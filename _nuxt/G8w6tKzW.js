var t=Object.defineProperty,__publicField=(e,s,n)=>((e,s,n)=>s in e?t(e,s,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[s]=n)(e,"symbol"!=typeof s?s+"":s,n);import{i as e,k as s}from"./B-meQdOw.js";import{N as n}from"./CybH7Zs2.js";const i="15.1.22",createExtendedExponentialRampToValueAutomationEvent=(t,e,s)=>({endTime:e,insertTime:s,type:"exponentialRampToValue",value:t}),createExtendedLinearRampToValueAutomationEvent=(t,e,s)=>({endTime:e,insertTime:s,type:"linearRampToValue",value:t}),createSetValueAutomationEvent=(t,e)=>({startTime:e,type:"setValue",value:t}),createSetValueCurveAutomationEvent=(t,e,s)=>({duration:s,startTime:e,type:"setValueCurve",values:t}),getTargetValueAtTime=(t,e,{startTime:s,target:n,timeConstant:i})=>n+(e-n)*Math.exp((s-t)/i),isExponentialRampToValueAutomationEvent=t=>"exponentialRampToValue"===t.type,isLinearRampToValueAutomationEvent=t=>"linearRampToValue"===t.type,isAnyRampToValueAutomationEvent=t=>isExponentialRampToValueAutomationEvent(t)||isLinearRampToValueAutomationEvent(t),isSetValueAutomationEvent=t=>"setValue"===t.type,isSetValueCurveAutomationEvent=t=>"setValueCurve"===t.type,getValueOfAutomationEventAtIndexAtTime=(t,e,s,n)=>{const i=t[e];return void 0===i?n:isAnyRampToValueAutomationEvent(i)||isSetValueAutomationEvent(i)?i.value:isSetValueCurveAutomationEvent(i)?i.values[i.values.length-1]:getTargetValueAtTime(s,getValueOfAutomationEventAtIndexAtTime(t,e-1,i.startTime,n),i)},getEndTimeAndValueOfPreviousAutomationEvent=(t,e,s,n,i)=>void 0===s?[n.insertTime,i]:isAnyRampToValueAutomationEvent(s)?[s.endTime,s.value]:isSetValueAutomationEvent(s)?[s.startTime,s.value]:isSetValueCurveAutomationEvent(s)?[s.startTime+s.duration,s.values[s.values.length-1]]:[s.startTime,getValueOfAutomationEventAtIndexAtTime(t,e-1,s.startTime,i)],isCancelAndHoldAutomationEvent=t=>"cancelAndHold"===t.type,isCancelScheduledValuesAutomationEvent=t=>"cancelScheduledValues"===t.type,getEventTime=t=>isCancelAndHoldAutomationEvent(t)||isCancelScheduledValuesAutomationEvent(t)?t.cancelTime:isExponentialRampToValueAutomationEvent(t)||isLinearRampToValueAutomationEvent(t)?t.endTime:t.startTime,getExponentialRampValueAtTime=(t,e,s,{endTime:n,value:i})=>s===i?i:0<s&&0<i||s<0&&i<0?s*(i/s)**((t-e)/(n-e)):0,getLinearRampValueAtTime=(t,e,s,{endTime:n,value:i})=>s+(t-e)/(n-e)*(i-s),getValueCurveValueAtTime=(t,{duration:e,startTime:s,values:n})=>((t,e)=>{const s=Math.floor(e),n=Math.ceil(e);return s===n?t[s]:(1-(e-s))*t[s]+(1-(n-e))*t[n]})(n,(t-s)/e*(n.length-1)),isSetTargetAutomationEvent=t=>"setTarget"===t.type;class AutomationEventList{constructor(t){this._automationEvents=[],this._currenTime=0,this._defaultValue=t}[Symbol.iterator](){return this._automationEvents[Symbol.iterator]()}add(t){const e=getEventTime(t);if(isCancelAndHoldAutomationEvent(t)||isCancelScheduledValuesAutomationEvent(t)){const s=this._automationEvents.findIndex(s=>isCancelScheduledValuesAutomationEvent(t)&&isSetValueCurveAutomationEvent(s)?s.startTime+s.duration>=e:getEventTime(s)>=e),n=this._automationEvents[s];if(-1!==s&&(this._automationEvents=this._automationEvents.slice(0,s)),isCancelAndHoldAutomationEvent(t)){const t=this._automationEvents[this._automationEvents.length-1];if(void 0!==n&&isAnyRampToValueAutomationEvent(n)){if(void 0!==t&&isSetTargetAutomationEvent(t))throw new Error("The internal list is malformed.");const s=void 0===t?n.insertTime:isSetValueCurveAutomationEvent(t)?t.startTime+t.duration:getEventTime(t),i=void 0===t?this._defaultValue:isSetValueCurveAutomationEvent(t)?t.values[t.values.length-1]:t.value,o=isExponentialRampToValueAutomationEvent(n)?getExponentialRampValueAtTime(e,s,i,n):getLinearRampValueAtTime(e,s,i,n),r=isExponentialRampToValueAutomationEvent(n)?createExtendedExponentialRampToValueAutomationEvent(o,e,this._currenTime):createExtendedLinearRampToValueAutomationEvent(o,e,this._currenTime);this._automationEvents.push(r)}if(void 0!==t&&isSetTargetAutomationEvent(t)&&this._automationEvents.push(createSetValueAutomationEvent(this.getValue(e),e)),void 0!==t&&isSetValueCurveAutomationEvent(t)&&t.startTime+t.duration>e){const s=e-t.startTime,n=(t.values.length-1)/t.duration,i=Math.max(2,1+Math.ceil(s*n)),o=s/(i-1)*n,r=t.values.slice(0,i);if(o<1)for(let e=1;e<i;e+=1){const s=o*e%1;r[e]=t.values[e-1]*(1-s)+t.values[e]*s}this._automationEvents[this._automationEvents.length-1]=createSetValueCurveAutomationEvent(r,t.startTime,s)}}}else{const s=this._automationEvents.findIndex(t=>getEventTime(t)>e),n=-1===s?this._automationEvents[this._automationEvents.length-1]:this._automationEvents[s-1];if(void 0!==n&&isSetValueCurveAutomationEvent(n)&&getEventTime(n)+n.duration>e)return!1;const i=isExponentialRampToValueAutomationEvent(t)?createExtendedExponentialRampToValueAutomationEvent(t.value,t.endTime,this._currenTime):isLinearRampToValueAutomationEvent(t)?createExtendedLinearRampToValueAutomationEvent(t.value,e,this._currenTime):t;if(-1===s)this._automationEvents.push(i);else{if(isSetValueCurveAutomationEvent(t)&&e+t.duration>getEventTime(this._automationEvents[s]))return!1;this._automationEvents.splice(s,0,i)}}return!0}flush(t){const e=this._automationEvents.findIndex(e=>getEventTime(e)>t);if(e>1){const t=this._automationEvents.slice(e-1),s=t[0];isSetTargetAutomationEvent(s)&&t.unshift(createSetValueAutomationEvent(getValueOfAutomationEventAtIndexAtTime(this._automationEvents,e-2,s.startTime,this._defaultValue),s.startTime)),this._automationEvents=t}}getValue(t){if(0===this._automationEvents.length)return this._defaultValue;const e=this._automationEvents.findIndex(e=>getEventTime(e)>t),s=this._automationEvents[e],n=(-1===e?this._automationEvents.length:e)-1,i=this._automationEvents[n];if(void 0!==i&&isSetTargetAutomationEvent(i)&&(void 0===s||!isAnyRampToValueAutomationEvent(s)||s.insertTime>t))return getTargetValueAtTime(t,getValueOfAutomationEventAtIndexAtTime(this._automationEvents,n-1,i.startTime,this._defaultValue),i);if(void 0!==i&&isSetValueAutomationEvent(i)&&(void 0===s||!isAnyRampToValueAutomationEvent(s)))return i.value;if(void 0!==i&&isSetValueCurveAutomationEvent(i)&&(void 0===s||!isAnyRampToValueAutomationEvent(s)||i.startTime+i.duration>t))return t<i.startTime+i.duration?getValueCurveValueAtTime(t,i):i.values[i.values.length-1];if(void 0!==i&&isAnyRampToValueAutomationEvent(i)&&(void 0===s||!isAnyRampToValueAutomationEvent(s)))return i.value;if(void 0!==s&&isExponentialRampToValueAutomationEvent(s)){const[e,o]=getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents,n,i,s,this._defaultValue);return getExponentialRampValueAtTime(t,e,o,s)}if(void 0!==s&&isLinearRampToValueAutomationEvent(s)){const[e,o]=getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents,n,i,s,this._defaultValue);return getLinearRampValueAtTime(t,e,o,s)}return this._defaultValue}}const o=new WeakSet,r=new WeakMap,a=new WeakMap,c=new WeakMap,h=new WeakMap,l=new WeakMap,u=new WeakMap,d=new WeakMap,p=new WeakMap,m=new WeakMap,f={construct:()=>f},_=/^import(?:(?:[\s]+[\w]+|(?:[\s]+[\w]+[\s]*,)?[\s]*\{[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?(?:[\s]*,[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?)*[\s]*}|(?:[\s]+[\w]+[\s]*,)?[\s]*\*[\s]+as[\s]+[\w]+)[\s]+from)?(?:[\s]*)("([^"\\]|\\.)+"|'([^'\\]|\\.)+')(?:[\s]*);?/,splitImportStatements=(t,e)=>{const s=[];let n=t.replace(/^[\s]+/,""),i=n.match(_);for(;null!==i;){const t=i[1].slice(1,-1),o=i[0].replace(/([\s]+)?;?$/,"").replace(t,new URL(t,e).toString());s.push(o),n=n.slice(i[0].length).replace(/^[\s]+/,""),i=n.match(_)}return[s.join(";"),n]},verifyParameterDescriptors=t=>{if(void 0!==t&&!Array.isArray(t))throw new TypeError("The parameterDescriptors property of given value for processorCtor is not an array.")},verifyProcessorCtor=t=>{if(!(t=>{try{new new Proxy(t,f)}catch{return!1}return!0})(t))throw new TypeError("The given value for processorCtor should be a constructor.");if(null===t.prototype||"object"!=typeof t.prototype)throw new TypeError("The given value for processorCtor should have a prototype.")},getValueForKey=(t,e)=>{const s=t.get(e);if(void 0===s)throw new Error("A value with the given key could not be found.");return s},pickElementFromSet=(t,e)=>{const s=Array.from(t).filter(e);if(s.length>1)throw Error("More than one element was found.");if(0===s.length)throw Error("No element was found.");const[n]=s;return t.delete(n),n},deletePassiveInputConnectionToAudioNode=(t,e,s,n)=>{const i=getValueForKey(t,e),o=pickElementFromSet(i,t=>t[0]===s&&t[1]===n);return 0===i.size&&t.delete(e),o},getEventListenersOfAudioNode=t=>getValueForKey(u,t),setInternalStateToActive=t=>{if(o.has(t))throw new Error("The AudioNode is already stored.");o.add(t),getEventListenersOfAudioNode(t).forEach(t=>t(!0))},isAudioWorkletNode=t=>"port"in t,setInternalStateToPassive=t=>{if(!o.has(t))throw new Error("The AudioNode is not stored.");o.delete(t),getEventListenersOfAudioNode(t).forEach(t=>t(!1))},setInternalStateToPassiveWhenNecessary=(t,e)=>{!isAudioWorkletNode(t)&&e.every(t=>0===t.size)&&setInternalStateToPassive(t)},g={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",fftSize:2048,maxDecibels:-30,minDecibels:-100,smoothingTimeConstant:.8},isOwnedByContext=(t,e)=>t.context===e,testAudioBufferCopyChannelMethodsOutOfBoundsSupport=t=>{try{t.copyToChannel(new Float32Array(1),0,-1)}catch{return!1}return!0},createIndexSizeError=()=>new DOMException("","IndexSizeError"),wrapAudioBufferGetChannelDataMethod=t=>{t.getChannelData=(e=>s=>{try{return e.call(t,s)}catch(n){if(12===n.code)throw createIndexSizeError();throw n}})(t.getChannelData)},y={numberOfChannels:1},v=-34028234663852886e22,x=-v,isActiveAudioNode=t=>o.has(t),b={buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1},getAudioNodeConnections=t=>getValueForKey(r,t),getAudioParamConnections=t=>getValueForKey(c,t),deactivateActiveAudioNodeInputConnections=(t,e)=>{const{activeInputs:s}=getAudioNodeConnections(t);s.forEach(s=>s.forEach(([s])=>{e.includes(t)||deactivateActiveAudioNodeInputConnections(s,[...e,t])}));const n=(t=>"playbackRate"in t)(t)?[t.playbackRate]:isAudioWorkletNode(t)?Array.from(t.parameters.values()):(t=>"frequency"in t&&"gain"in t)(t)?[t.Q,t.detune,t.frequency,t.gain]:(t=>"offset"in t)(t)?[t.offset]:(t=>!("frequency"in t)&&"gain"in t)(t)?[t.gain]:(t=>"detune"in t&&"frequency"in t&&!("gain"in t))(t)?[t.detune,t.frequency]:(t=>"pan"in t)(t)?[t.pan]:[];for(const i of n){const t=getAudioParamConnections(i);void 0!==t&&t.activeInputs.forEach(([t])=>deactivateActiveAudioNodeInputConnections(t,e))}isActiveAudioNode(t)&&setInternalStateToPassive(t)},deactivateAudioGraph=t=>{deactivateActiveAudioNodeInputConnections(t.destination,[])},isAudioNode$1=t=>"context"in t,isAudioNodeOutputConnection=t=>isAudioNode$1(t[0]),insertElementInSet=(t,e,s,n)=>{for(const i of t)if(s(i)){if(n)return!1;throw Error("The set contains at least one similar element.")}return t.add(e),!0},addActiveInputConnectionToAudioParam=(t,e,[s,n],i)=>{insertElementInSet(t,[e,s,n],t=>t[0]===e&&t[1]===s,i)},addPassiveInputConnectionToAudioParam=(t,[e,s,n],i)=>{const o=t.get(e);void 0===o?t.set(e,new Set([[s,n]])):insertElementInSet(o,[s,n],t=>t[0]===s,i)},isNativeAudioNodeFaker=t=>"inputs"in t,connectNativeAudioNodeToNativeAudioNode=(t,e,s,n)=>{if(isNativeAudioNodeFaker(e)){const i=e.inputs[n];return t.connect(i,s,0),[i,s,0]}return t.connect(e,s,n),[e,s,n]},deleteActiveInputConnection=(t,e,s)=>{for(const n of t)if(n[0]===e&&n[1]===s)return t.delete(n),n;return null},deleteEventListenerOfAudioNode=(t,e)=>{if(!getEventListenersOfAudioNode(t).delete(e))throw new Error("Missing the expected event listener.")},deletePassiveInputConnectionToAudioParam=(t,e,s)=>{const n=getValueForKey(t,e),i=pickElementFromSet(n,t=>t[0]===s);return 0===n.size&&t.delete(e),i},disconnectNativeAudioNodeFromNativeAudioNode=(t,e,s,n)=>{isNativeAudioNodeFaker(e)?t.disconnect(e.inputs[n],s,0):t.disconnect(e,s,n)},getNativeAudioNode=t=>getValueForKey(a,t),getNativeAudioParam=t=>getValueForKey(h,t),isPartOfACycle=t=>d.has(t),isPassiveAudioNode=t=>!o.has(t),testAudioNodeDisconnectMethodSupport=(t,e)=>new Promise(s=>{if(null!==e)s(!0);else{const e=t.createScriptProcessor(256,1,1),n=t.createGain(),i=t.createBuffer(1,2,44100),o=i.getChannelData(0);o[0]=1,o[1]=1;const r=t.createBufferSource();r.buffer=i,r.loop=!0,r.connect(e).connect(t.destination),r.connect(n),r.disconnect(n),e.onaudioprocess=n=>{const i=n.inputBuffer.getChannelData(0);Array.prototype.some.call(i,t=>1===t)?s(!0):s(!1),r.stop(),e.onaudioprocess=null,r.disconnect(e),e.disconnect(t.destination)},r.start()}}),visitEachAudioNodeOnce=(t,e)=>{const s=new Map;for(const n of t)for(const t of n){const e=s.get(t);s.set(t,void 0===e?1:e+1)}s.forEach((t,s)=>e(s,t))},isNativeAudioNode$1=t=>"context"in t,addConnectionToAudioParamOfAudioContext=(t,e,s,n)=>{const{activeInputs:i,passiveInputs:o}=getAudioParamConnections(e),{outputs:r}=getAudioNodeConnections(t),a=getEventListenersOfAudioNode(t),eventListener=r=>{const a=getNativeAudioNode(t),c=getNativeAudioParam(e);if(r){const e=deletePassiveInputConnectionToAudioParam(o,t,s);addActiveInputConnectionToAudioParam(i,t,e,!1),n||isPartOfACycle(t)||a.connect(c,s)}else{const e=((t,e,s)=>pickElementFromSet(t,t=>t[0]===e&&t[1]===s))(i,t,s);addPassiveInputConnectionToAudioParam(o,e,!1),n||isPartOfACycle(t)||a.disconnect(c,s)}};return!!insertElementInSet(r,[e,s],t=>t[0]===e&&t[1]===s,!0)&&(a.add(eventListener),isActiveAudioNode(t)?addActiveInputConnectionToAudioParam(i,t,[s,eventListener],!0):addPassiveInputConnectionToAudioParam(o,[t,s,eventListener],!0),!0)},deleteInputsOfAudioNode=(t,e,s,n,i)=>{const[o,r]=((t,e,s,n)=>{const{activeInputs:i,passiveInputs:o}=getAudioNodeConnections(e),r=deleteActiveInputConnection(i[n],t,s);if(null===r)return[deletePassiveInputConnectionToAudioNode(o,t,s,n)[2],!1];return[r[2],!0]})(t,s,n,i);if(null!==o&&(deleteEventListenerOfAudioNode(t,o),!r||e||isPartOfACycle(t)||disconnectNativeAudioNodeFromNativeAudioNode(getNativeAudioNode(t),getNativeAudioNode(s),n,i)),isActiveAudioNode(s)){const{activeInputs:t}=getAudioNodeConnections(s);setInternalStateToPassiveWhenNecessary(s,t)}},deleteInputsOfAudioParam=(t,e,s,n)=>{const[i,o]=((t,e,s)=>{const{activeInputs:n,passiveInputs:i}=getAudioParamConnections(e),o=deleteActiveInputConnection(n,t,s);if(null===o)return[deletePassiveInputConnectionToAudioParam(i,t,s)[1],!1];return[o[2],!0]})(t,s,n);null!==i&&(deleteEventListenerOfAudioNode(t,i),!o||e||isPartOfACycle(t)||getNativeAudioNode(t).disconnect(getNativeAudioParam(s),n))};class ReadOnlyMap{constructor(t){this._map=new Map(t)}get size(){return this._map.size}entries(){return this._map.entries()}forEach(t,e=null){return this._map.forEach((s,n)=>t.call(e,s,n,this))}get(t){return this._map.get(t)}has(t){return this._map.has(t)}keys(){return this._map.keys()}values(){return this._map.values()}}const T={channelCount:2,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:1,numberOfOutputs:1,parameterData:{},processorOptions:{}};function copyFromChannel(t,e,s,n,i){if("function"==typeof t.copyFromChannel)0===e[s].byteLength&&(e[s]=new Float32Array(128)),t.copyFromChannel(e[s],n,i);else{const o=t.getChannelData(n);if(0===e[s].byteLength)e[s]=o.slice(i,i+128);else{const t=new Float32Array(o.buffer,i*Float32Array.BYTES_PER_ELEMENT,128);e[s].set(t)}}}const copyToChannel=(t,e,s,n,i)=>{"function"==typeof t.copyToChannel?0!==e[s].byteLength&&t.copyToChannel(e[s],n,i):0!==e[s].byteLength&&t.getChannelData(n).set(e[s],i)},createNestedArrays=(t,e)=>{const s=[];for(let n=0;n<t;n+=1){const t=[],i="number"==typeof e?e:e[n];for(let e=0;e<i;e+=1)t.push(new Float32Array(128));s.push(t)}return s},processBuffer=async(t,e,s,n,i,o,r)=>{const a=null===e?128*Math.ceil(t.context.length/128):e.length,c=n.channelCount*n.numberOfInputs,h=i.reduce((t,e)=>t+e,0),l=0===h?null:s.createBuffer(h,a,s.sampleRate);if(void 0===o)throw new Error("Missing the processor constructor.");const u=getAudioNodeConnections(t),d=await((t,e)=>{const s=getValueForKey(m,t),n=getNativeAudioNode(e);return getValueForKey(s,n)})(s,t),p=createNestedArrays(n.numberOfInputs,n.channelCount),f=createNestedArrays(n.numberOfOutputs,i),_=Array.from(t.parameters.keys()).reduce((t,e)=>({...t,[e]:new Float32Array(128)}),{});for(let m=0;m<a;m+=128){if(n.numberOfInputs>0&&null!==e)for(let t=0;t<n.numberOfInputs;t+=1)for(let s=0;s<n.channelCount;s+=1)copyFromChannel(e,p[t],s,s,m);void 0!==o.parameterDescriptors&&null!==e&&o.parameterDescriptors.forEach(({name:t},s)=>{copyFromChannel(e,_,t,c+s,m)});for(let t=0;t<n.numberOfInputs;t+=1)for(let e=0;e<i[t];e+=1)0===f[t][e].byteLength&&(f[t][e]=new Float32Array(128));try{const t=p.map((t,e)=>0===u.activeInputs[e].size?[]:t),e=r(m/s.sampleRate,s.sampleRate,()=>d.process(t,f,_));if(null!==l)for(let s=0,o=0;s<n.numberOfOutputs;s+=1){for(let t=0;t<i[s];t+=1)copyToChannel(l,f[s],t,o+t,m);o+=i[s]}if(!e)break}catch(g){t.dispatchEvent(new ErrorEvent("processorerror",{colno:g.colno,filename:g.filename,lineno:g.lineno,message:g.message}));break}}return l},w={Q:1,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",detune:0,frequency:350,gain:0,type:"lowpass"},S={channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:6},A={channelCount:6,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:6},C={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",offset:1},k={buffer:null,channelCount:2,channelCountMode:"clamped-max",channelInterpretation:"speakers",disableNormalization:!1},detachArrayBuffer=t=>{const{port1:e,port2:s}=new MessageChannel;return new Promise(n=>{const closeAndResolve=()=>{s.onmessage=null,e.close(),s.close(),n()};s.onmessage=()=>closeAndResolve();try{e.postMessage(t,[t])}catch{}finally{closeAndResolve()}})},O={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",delayTime:0,maxDelayTime:1},getOutputAudioNodeAtIndex=(t,e,s)=>{const n=e[s];if(void 0===n)throw t();return n},M={attack:.003,channelCount:2,channelCountMode:"clamped-max",channelInterpretation:"speakers",knee:30,ratio:12,release:.25,threshold:-24},D={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",gain:1},createInvalidStateError=()=>new DOMException("","InvalidStateError"),createInvalidAccessError=()=>new DOMException("","InvalidAccessError"),F={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers"},filterBuffer=(t,e,s,n,i,o,r,a,c,h,l)=>{const u=h.length;let d=a;for(let p=0;p<u;p+=1){let a=s[0]*h[p];for(let e=1;e<i;e+=1){const n=d-e&c-1;a+=s[e]*o[n],a-=t[e]*r[n]}for(let t=i;t<n;t+=1)a+=s[t]*o[d-t&c-1];for(let s=i;s<e;s+=1)a-=t[s]*r[d-s&c-1];o[d]=h[p],r[d]=a,d=d+1&c-1,l[p]=a}return d},E={channelCount:2,channelCountMode:"explicit",channelInterpretation:"speakers"},testPromiseSupport=t=>{const e=new Uint32Array([1179011410,40,1163280727,544501094,16,131073,44100,176400,1048580,1635017060,4,0]);try{const s=t.decodeAudioData(e.buffer,()=>{});return void 0!==s&&(s.catch(()=>{}),!0)}catch{}return!1},assignNativeAudioNodeOption=(t,e,s)=>{const n=e[s];void 0!==n&&n!==t[s]&&(t[s]=n)},assignNativeAudioNodeOptions=(t,e)=>{assignNativeAudioNodeOption(t,e,"channelCount"),assignNativeAudioNodeOption(t,e,"channelCountMode"),assignNativeAudioNodeOption(t,e,"channelInterpretation")},testAnalyserNodeGetFloatTimeDomainDataMethodSupport=t=>"function"==typeof t.getFloatTimeDomainData,assignNativeAudioNodeAudioParamValue=(t,e,s)=>{const n=e[s];void 0!==n&&n!==t[s].value&&(t[s].value=n)},wrapAudioScheduledSourceNodeStartMethodNegativeParameters=t=>{t.start=(e=>(s=0,n=0,i)=>{if("number"==typeof i&&i<0||n<0||s<0)throw new RangeError("The parameters can't be negative.");e.call(t,s,n,i)})(t.start)},wrapAudioScheduledSourceNodeStopMethodNegativeParameters=t=>{t.stop=(e=>(s=0)=>{if(s<0)throw new RangeError("The parameter can't be negative.");e.call(t,s)})(t.stop)},computeBufferSize=(t,e)=>null===t?512:Math.max(512,Math.min(16384,Math.pow(2,Math.round(Math.log2(t*e))))),createAudioWorkletProcessorPromise=async(t,e)=>{const s=await(t=>new Promise((e,s)=>{const{port1:n,port2:i}=new MessageChannel;n.onmessage=({data:t})=>{n.close(),i.close(),e(t)},n.onmessageerror=({data:t})=>{n.close(),i.close(),s(t)},i.postMessage(t)}))(e);return new t(s)},createNativeBiquadFilterNode=(t,e)=>{const s=t.createBiquadFilter();return assignNativeAudioNodeOptions(s,e),assignNativeAudioNodeAudioParamValue(s,e,"Q"),assignNativeAudioNodeAudioParamValue(s,e,"detune"),assignNativeAudioNodeAudioParamValue(s,e,"frequency"),assignNativeAudioNodeAudioParamValue(s,e,"gain"),assignNativeAudioNodeOption(s,e,"type"),s},createNativeChannelSplitterNode=(t,e)=>{const s=t.createChannelSplitter(e.numberOfOutputs);return assignNativeAudioNodeOptions(s,e),(t=>{const e=t.numberOfOutputs;Object.defineProperty(t,"channelCount",{get:()=>e,set:t=>{if(t!==e)throw createInvalidStateError()}}),Object.defineProperty(t,"channelCountMode",{get:()=>"explicit",set:t=>{if("explicit"!==t)throw createInvalidStateError()}}),Object.defineProperty(t,"channelInterpretation",{get:()=>"discrete",set:t=>{if("discrete"!==t)throw createInvalidStateError()}})})(s),s},interceptConnections=(t,e)=>(t.connect=e.connect.bind(e),t.disconnect=e.disconnect.bind(e),t),createNativeDelayNode=(t,e)=>{const s=t.createDelay(e.maxDelayTime);return assignNativeAudioNodeOptions(s,e),assignNativeAudioNodeAudioParamValue(s,e,"delayTime"),s},createNativeGainNode=(t,e)=>{const s=t.createGain();return assignNativeAudioNodeOptions(s,e),assignNativeAudioNodeAudioParamValue(s,e,"gain"),s};function divide(t,e){const s=e[0]*e[0]+e[1]*e[1];return[(t[0]*e[0]+t[1]*e[1])/s,(t[1]*e[0]-t[0]*e[1])/s]}function multiply(t,e){return[t[0]*e[0]-t[1]*e[1],t[0]*e[1]+t[1]*e[0]]}function evaluatePolynomial(t,e){let s=[0,0];for(let n=t.length-1;n>=0;n-=1)s=multiply(s,e),s[0]+=t[n];return s}const createNativeScriptProcessorNode=(t,e,s,n)=>t.createScriptProcessor(e,s,n),createNotSupportedError=()=>new DOMException("","NotSupportedError"),R={numberOfChannels:1},q={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",detune:0,frequency:440,periodicWave:void 0,type:"sine"},N={channelCount:2,channelCountMode:"clamped-max",channelInterpretation:"speakers",coneInnerAngle:360,coneOuterAngle:360,coneOuterGain:0,distanceModel:"inverse",maxDistance:1e4,orientationX:1,orientationY:0,orientationZ:0,panningModel:"equalpower",positionX:0,positionY:0,positionZ:0,refDistance:1,rolloffFactor:1},P={disableNormalization:!1},I={channelCount:2,channelCountMode:"explicit",channelInterpretation:"speakers",pan:0},V={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",curve:null,oversample:"none"},getFirstSample=(t,e,s)=>void 0===t.copyFromChannel?t.getChannelData(s)[0]:(t.copyFromChannel(e,s),e[0]),isDCCurve=t=>{if(null===t)return!1;const e=t.length;return e%2!=0?0!==t[Math.floor(e/2)]:t[e/2-1]+t[e/2]!==0},overwriteAccessors=(t,e,s,n)=>{let i=t;for(;!i.hasOwnProperty(e);)i=Object.getPrototypeOf(i);const{get:o,set:r}=Object.getOwnPropertyDescriptor(i,e);Object.defineProperty(t,e,{get:s(o),set:n(r)})},setValueAtTimeUntilPossible=(t,e,s)=>{try{t.setValueAtTime(e,s)}catch(n){if(9!==n.code)throw n;setValueAtTimeUntilPossible(t,e,s+1e-7)}},testAudioScheduledSourceNodeStartMethodNegativeParametersSupport=t=>{const e=t.createOscillator();try{e.start(-1)}catch(s){return s instanceof RangeError}return!1},testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport=t=>{const e=t.createBuffer(1,1,44100),s=t.createBufferSource();s.buffer=e,s.start(),s.stop();try{return s.stop(),!0}catch{return!1}},testAudioScheduledSourceNodeStopMethodNegativeParametersSupport=t=>{const e=t.createOscillator();try{e.stop(-1)}catch(s){return s instanceof RangeError}return!1},testDomExceptionConstructorSupport=()=>{try{new DOMException}catch{return!1}return!0},testTransferablesSupport=()=>new Promise(t=>{const e=new ArrayBuffer(0),{port1:s,port2:n}=new MessageChannel;s.onmessage=({data:e})=>t(null!==e),n.postMessage(e,[e])}),wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls=(t,e)=>{const s=e.createGain();t.connect(s);const n=(e=>()=>{e.call(t,s),t.removeEventListener("ended",n)})(t.disconnect);t.addEventListener("ended",n),interceptConnections(t,s),t.stop=(e=>{let n=!1;return(i=0)=>{if(n)try{e.call(t,i)}catch{s.gain.setValueAtTime(0,i)}else e.call(t,i),n=!0}})(t.stop)},wrapEventListener=(t,e)=>s=>{const n={value:t};return Object.defineProperties(s,{currentTarget:n,target:n}),"function"==typeof e?e.call(t,s):e.handleEvent.call(t,s)},L=(j=insertElementInSet,(t,e,[s,n,i],o)=>{j(t[n],[e,s,i],t=>t[0]===e&&t[1]===s,o)});var j;const B=(t=>(e,s,[n,i,o],r)=>{const a=e.get(n);void 0===a?e.set(n,new Set([[i,s,o]])):t(a,[i,s,o],t=>t[0]===i&&t[1]===s,r)})(insertElementInSet),W=(G=pickElementFromSet,(t,e,s,n)=>G(t[n],t=>t[0]===e&&t[1]===s));var G;const z=new WeakMap,U=(Q=z,t=>{var e;return null!==(e=Q.get(t))&&void 0!==e?e:0});var Q;const Z=(X=new Map,Y=new WeakMap,(t,e)=>{const s=Y.get(t);if(void 0!==s)return s;const n=X.get(t);if(void 0!==n)return n;try{const s=e();return s instanceof Promise?(X.set(t,s),s.catch(()=>!1).then(e=>(X.delete(t),Y.set(t,e),e))):(Y.set(t,s),s)}catch{return Y.set(t,!1),!1}});var X,Y;const $="undefined"==typeof window?null:window,H=(J=Z,K=createIndexSizeError,(t,e)=>{const s=t.createAnalyser();if(assignNativeAudioNodeOptions(s,e),!(e.maxDecibels>e.minDecibels))throw K();return assignNativeAudioNodeOption(s,e,"fftSize"),assignNativeAudioNodeOption(s,e,"maxDecibels"),assignNativeAudioNodeOption(s,e,"minDecibels"),assignNativeAudioNodeOption(s,e,"smoothingTimeConstant"),J(testAnalyserNodeGetFloatTimeDomainDataMethodSupport,()=>testAnalyserNodeGetFloatTimeDomainDataMethodSupport(s))||(t=>{t.getFloatTimeDomainData=e=>{const s=new Uint8Array(e.length);t.getByteTimeDomainData(s);const n=Math.max(s.length,t.fftSize);for(let t=0;t<n;t+=1)e[t]=.0078125*(s[t]-128);return e}})(s),s});var J,K;const tt=(et=getAudioNodeConnections,t=>{const e=et(t);if(null===e.renderer)throw new Error("Missing the renderer of the given AudioNode in the audio graph.");return e.renderer});var et;const st=((t,e,s)=>async(n,i,o)=>{const r=t(n);await Promise.all(r.activeInputs.map((t,r)=>Array.from(t).map(async([t,a])=>{const c=e(t),h=await c.render(t,i),l=n.context.destination;s(t)||n===l&&s(n)||h.connect(o,a,r)})).reduce((t,e)=>[...t,...e],[]))})(getAudioNodeConnections,tt,isPartOfACycle),nt=(it=H,ot=getNativeAudioNode,rt=st,()=>{const t=new WeakMap;return{render(e,s){const n=t.get(s);return void 0!==n?Promise.resolve(n):(async(e,s)=>{let n=ot(e);if(!isOwnedByContext(n,s)){const t={channelCount:n.channelCount,channelCountMode:n.channelCountMode,channelInterpretation:n.channelInterpretation,fftSize:n.fftSize,maxDecibels:n.maxDecibels,minDecibels:n.minDecibels,smoothingTimeConstant:n.smoothingTimeConstant};n=it(s,t)}return t.set(s,n),await rt(e,s,n),n})(e,s)}}});var it,ot,rt;const at=(ct=l,t=>{const e=ct.get(t);if(void 0===e)throw createInvalidStateError();return e});var ct;const ht=null===(lt=$)?null:lt.hasOwnProperty("OfflineAudioContext")?lt.OfflineAudioContext:lt.hasOwnProperty("webkitOfflineAudioContext")?lt.webkitOfflineAudioContext:null;var lt;const ut=(dt=ht,t=>null!==dt&&t instanceof dt);var dt;const pt=new WeakMap,mt=(ft=wrapEventListener,class EventTarget{constructor(t){this._nativeEventTarget=t,this._listeners=new WeakMap}addEventListener(t,e,s){if(null!==e){let n=this._listeners.get(e);void 0===n&&(n=ft(this,e),"function"==typeof e&&this._listeners.set(e,n)),this._nativeEventTarget.addEventListener(t,n,s)}}dispatchEvent(t){return this._nativeEventTarget.dispatchEvent(t)}removeEventListener(t,e,s){const n=null===e?void 0:this._listeners.get(e);this._nativeEventTarget.removeEventListener(t,void 0===n?null:n,s)}});var ft;const _t=(t=>null===t?null:t.hasOwnProperty("AudioContext")?t.AudioContext:t.hasOwnProperty("webkitAudioContext")?t.webkitAudioContext:null)($),gt=(yt=_t,t=>null!==yt&&t instanceof yt);var yt;const vt=(t=>e=>null!==t&&"function"==typeof t.AudioNode&&e instanceof t.AudioNode)($),xt=(t=>e=>null!==t&&"function"==typeof t.AudioParam&&e instanceof t.AudioParam)($),bt=(t=>null===t?null:t.hasOwnProperty("AudioWorkletNode")?t.AudioWorkletNode:null)($),Tt=((t,e,s,n,i,o,r,c,h,l,d,p,m,f,_,g)=>class AudioNode extends l{constructor(e,n,i,o){super(i),this._context=e,this._nativeAudioNode=i;const r=d(e);p(r)&&!0!==s(testAudioNodeDisconnectMethodSupport,()=>testAudioNodeDisconnectMethodSupport(r,g))&&(t=>{const e=new Map;t.connect=(t=>(s,n=0,i=0)=>{const o=isNativeAudioNode$1(s)?t(s,n,i):t(s,n),r=e.get(s);return void 0===r?e.set(s,[{input:i,output:n}]):r.every(t=>t.input!==i||t.output!==n)&&r.push({input:i,output:n}),o})(t.connect.bind(t)),t.disconnect=(s=>(n,i,o)=>{if(s.apply(t),void 0===n)e.clear();else if("number"==typeof n)for(const[t,s]of e){const i=s.filter(t=>t.output!==n);0===i.length?e.delete(t):e.set(t,i)}else if(e.has(n))if(void 0===i)e.delete(n);else{const t=e.get(n);if(void 0!==t){const s=t.filter(t=>t.output!==i&&(t.input!==o||void 0===o));0===s.length?e.delete(n):e.set(n,s)}}for(const[s,r]of e)r.forEach(e=>{isNativeAudioNode$1(s)?t.connect(s,e.output,e.input):t.connect(s,e.output)})})(t.disconnect)})(i),a.set(this,i),u.set(this,new Set),"closed"!==e.state&&n&&setInternalStateToActive(this),t(this,o,i)}get channelCount(){return this._nativeAudioNode.channelCount}set channelCount(t){this._nativeAudioNode.channelCount=t}get channelCountMode(){return this._nativeAudioNode.channelCountMode}set channelCountMode(t){this._nativeAudioNode.channelCountMode=t}get channelInterpretation(){return this._nativeAudioNode.channelInterpretation}set channelInterpretation(t){this._nativeAudioNode.channelInterpretation=t}get context(){return this._context}get numberOfInputs(){return this._nativeAudioNode.numberOfInputs}get numberOfOutputs(){return this._nativeAudioNode.numberOfOutputs}connect(t,s=0,a=0){if(s<0||s>=this._nativeAudioNode.numberOfOutputs)throw i();const c=d(this._context),l=_(c);if(m(t)||f(t))throw o();if(isAudioNode$1(t)){const i=getNativeAudioNode(t);try{const e=connectNativeAudioNodeToNativeAudioNode(this._nativeAudioNode,i,s,a),n=isPassiveAudioNode(this);(l||n)&&this._nativeAudioNode.disconnect(...e),"closed"!==this.context.state&&!n&&isPassiveAudioNode(t)&&setInternalStateToActive(t)}catch(p){if(12===p.code)throw o();throw p}if(e(this,t,s,a,l)){const e=h([this],t);visitEachAudioNodeOnce(e,n(l))}return t}const u=getNativeAudioParam(t);if("playbackRate"===u.name&&1024===u.maxValue)throw r();try{this._nativeAudioNode.connect(u,s),(l||isPassiveAudioNode(this))&&this._nativeAudioNode.disconnect(u,s)}catch(p){if(12===p.code)throw o();throw p}if(addConnectionToAudioParamOfAudioContext(this,t,s,l)){const e=h([this],t);visitEachAudioNodeOnce(e,n(l))}}disconnect(t,e,s){let n;const r=d(this._context),a=_(r);if(void 0===t)n=((t,e)=>{const s=getAudioNodeConnections(t),n=[];for(const i of s.outputs)isAudioNodeOutputConnection(i)?deleteInputsOfAudioNode(t,e,...i):deleteInputsOfAudioParam(t,e,...i),n.push(i[0]);return s.outputs.clear(),n})(this,a);else if("number"==typeof t){if(t<0||t>=this.numberOfOutputs)throw i();n=((t,e,s)=>{const n=getAudioNodeConnections(t),i=[];for(const o of n.outputs)o[1]===s&&(isAudioNodeOutputConnection(o)?deleteInputsOfAudioNode(t,e,...o):deleteInputsOfAudioParam(t,e,...o),i.push(o[0]),n.outputs.delete(o));return i})(this,a,t)}else{if(void 0!==e&&(e<0||e>=this.numberOfOutputs))throw i();if(isAudioNode$1(t)&&void 0!==s&&(s<0||s>=t.numberOfInputs))throw i();if(n=((t,e,s,n,i)=>{const o=getAudioNodeConnections(t);return Array.from(o.outputs).filter(t=>!(t[0]!==s||void 0!==n&&t[1]!==n||void 0!==i&&t[2]!==i)).map(s=>(isAudioNodeOutputConnection(s)?deleteInputsOfAudioNode(t,e,...s):deleteInputsOfAudioParam(t,e,...s),o.outputs.delete(s),s[0]))})(this,a,t,e,s),0===n.length)throw o()}for(const i of n){const t=h([this],i);visitEachAudioNodeOnce(t,c)}}})((wt=r,(t,e,s)=>{const n=[];for(let i=0;i<s.numberOfInputs;i+=1)n.push(new Set);wt.set(t,{activeInputs:n,outputs:new Set,passiveInputs:new WeakMap,renderer:e})}),((t,e,s,n,i,o,r,a,c,h,l,u,d)=>{const p=new WeakMap;return(m,f,_,g,y)=>{const{activeInputs:v,passiveInputs:x}=o(f),{outputs:b}=o(m),T=a(m),eventListener=o=>{const a=c(f),h=c(m);if(o){const e=deletePassiveInputConnectionToAudioNode(x,m,_,g);t(v,m,e,!1),y||u(m)||s(h,a,_,g),d(f)&&setInternalStateToActive(f)}else{const t=n(v,m,_,g);e(x,g,t,!1),y||u(m)||i(h,a,_,g);const s=r(f);if(0===s)l(f)&&setInternalStateToPassiveWhenNecessary(f,v);else{const t=p.get(f);void 0!==t&&clearTimeout(t),p.set(f,setTimeout(()=>{l(f)&&setInternalStateToPassiveWhenNecessary(f,v)},1e3*s))}}};return!!h(b,[f,_,g],t=>t[0]===f&&t[1]===_&&t[2]===g,!0)&&(T.add(eventListener),l(m)?t(v,m,[_,g,eventListener],!0):e(x,g,[m,_,eventListener],!0),!0)}})(L,B,connectNativeAudioNodeToNativeAudioNode,W,disconnectNativeAudioNodeFromNativeAudioNode,getAudioNodeConnections,U,getEventListenersOfAudioNode,getNativeAudioNode,insertElementInSet,isActiveAudioNode,isPartOfACycle,isPassiveAudioNode),Z,((t,e,s,n,i,o)=>r=>(a,c)=>{const h=t.get(a);if(void 0===h){if(!r&&o(a)){const t=n(a),{outputs:o}=s(a);for(const s of o)if(isAudioNodeOutputConnection(s)){const i=n(s[0]);e(t,i,s[1],s[2])}else{const e=i(s[0]);t.disconnect(e,s[1])}}t.set(a,c)}else t.set(a,h+c)})(d,disconnectNativeAudioNodeFromNativeAudioNode,getAudioNodeConnections,getNativeAudioNode,getNativeAudioParam,isActiveAudioNode),createIndexSizeError,createInvalidAccessError,createNotSupportedError,((t,e,s,n,i,o,r,a)=>(c,h)=>{const l=e.get(c);if(void 0===l)throw new Error("Missing the expected cycle count.");const u=o(c.context),d=a(u);if(l===h){if(e.delete(c),!d&&r(c)){const e=n(c),{outputs:o}=s(c);for(const s of o)if(isAudioNodeOutputConnection(s)){const i=n(s[0]);t(e,i,s[1],s[2])}else{const t=i(s[0]);e.connect(t,s[1])}}}else e.set(c,l-h)})(connectNativeAudioNodeToNativeAudioNode,d,getAudioNodeConnections,getNativeAudioNode,getNativeAudioParam,at,isActiveAudioNode,ut),((t,e,s)=>function detectCycles(n,i){const o=isAudioNode$1(i)?i:s(t,i);if((t=>"delayTime"in t)(o))return[];if(n[0]===o)return[n];if(n.includes(o))return[];const{outputs:r}=e(o);return Array.from(r).map(t=>detectCycles([...n,o],t[0])).reduce((t,e)=>t.concat(e),[])})(pt,getAudioNodeConnections,getValueForKey),mt,at,gt,vt,xt,ut,bt);var wt;const St=((t,e,s,n,i,o)=>class AnalyserNode extends t{constructor(t,s){const r=i(t),a={...g,...s},c=n(r,a);super(t,!1,c,o(r)?e():null),this._nativeAnalyserNode=c}get fftSize(){return this._nativeAnalyserNode.fftSize}set fftSize(t){this._nativeAnalyserNode.fftSize=t}get frequencyBinCount(){return this._nativeAnalyserNode.frequencyBinCount}get maxDecibels(){return this._nativeAnalyserNode.maxDecibels}set maxDecibels(t){const e=this._nativeAnalyserNode.maxDecibels;if(this._nativeAnalyserNode.maxDecibels=t,!(t>this._nativeAnalyserNode.minDecibels))throw this._nativeAnalyserNode.maxDecibels=e,s()}get minDecibels(){return this._nativeAnalyserNode.minDecibels}set minDecibels(t){const e=this._nativeAnalyserNode.minDecibels;if(this._nativeAnalyserNode.minDecibels=t,!(this._nativeAnalyserNode.maxDecibels>t))throw this._nativeAnalyserNode.minDecibels=e,s()}get smoothingTimeConstant(){return this._nativeAnalyserNode.smoothingTimeConstant}set smoothingTimeConstant(t){this._nativeAnalyserNode.smoothingTimeConstant=t}getByteFrequencyData(t){this._nativeAnalyserNode.getByteFrequencyData(t)}getByteTimeDomainData(t){this._nativeAnalyserNode.getByteTimeDomainData(t)}getFloatFrequencyData(t){this._nativeAnalyserNode.getFloatFrequencyData(t)}getFloatTimeDomainData(t){this._nativeAnalyserNode.getFloatTimeDomainData(t)}})(Tt,nt,createIndexSizeError,H,at,ut),At=new WeakSet,Ct=(t=>null===t?null:t.hasOwnProperty("AudioBuffer")?t.AudioBuffer:null)($),kt=(Ot=new Uint32Array(1),t=>(Ot[0]=t,Ot[0]));var Ot;const Mt=((t,e)=>s=>{s.copyFromChannel=(n,i,o=0)=>{const r=t(o),a=t(i);if(a>=s.numberOfChannels)throw e();const c=s.length,h=s.getChannelData(a),l=n.length;for(let t=r<0?-r:0;t+r<c&&t<l;t+=1)n[t]=h[t+r]},s.copyToChannel=(n,i,o=0)=>{const r=t(o),a=t(i);if(a>=s.numberOfChannels)throw e();const c=s.length,h=s.getChannelData(a),l=n.length;for(let t=r<0?-r:0;t+r<c&&t<l;t+=1)h[t+r]=n[t]}})(kt,createIndexSizeError),Dt=(Ft=kt,t=>{t.copyFromChannel=(e=>(s,n,i=0)=>{const o=Ft(i),r=Ft(n);if(o<t.length)return e.call(t,s,r,o)})(t.copyFromChannel),t.copyToChannel=(e=>(s,n,i=0)=>{const o=Ft(i),r=Ft(n);if(o<t.length)return e.call(t,s,r,o)})(t.copyToChannel)});var Ft;const Et=((t,e,s,n,i,o,r,a)=>{let c=null;return class AudioBuffer{constructor(h){if(null===i)throw new Error("Missing the native OfflineAudioContext constructor.");const{length:l,numberOfChannels:u,sampleRate:d}={...y,...h};null===c&&(c=new i(1,1,44100));const p=null!==n&&e(o,o)?new n({length:l,numberOfChannels:u,sampleRate:d}):c.createBuffer(u,l,d);if(0===p.numberOfChannels)throw s();return"function"!=typeof p.copyFromChannel?(r(p),wrapAudioBufferGetChannelDataMethod(p)):e(testAudioBufferCopyChannelMethodsOutOfBoundsSupport,()=>testAudioBufferCopyChannelMethodsOutOfBoundsSupport(p))||a(p),t.add(p),p}static[Symbol.hasInstance](e){return null!==e&&"object"==typeof e&&Object.getPrototypeOf(e)===AudioBuffer.prototype||t.has(e)}}})(At,Z,createNotSupportedError,Ct,ht,(Rt=Ct,()=>{if(null===Rt)return!1;try{new Rt({length:1,sampleRate:44100})}catch{return!1}return!0}),Mt,Dt);var Rt;const qt=(Nt=createNativeGainNode,(t,e)=>{const s=Nt(t,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});e.connect(s).connect(t.destination);const disconnect2=()=>{e.removeEventListener("ended",disconnect2),e.disconnect(s),s.disconnect()};e.addEventListener("ended",disconnect2)});var Nt;const Pt=(It=tt,Vt=getAudioParamConnections,Lt=isPartOfACycle,async(t,e,s)=>{const n=Vt(t);await Promise.all(Array.from(n.activeInputs).map(async([t,n])=>{const i=It(t),o=await i.render(t,e);Lt(t)||o.connect(s,n)}))});var It,Vt,Lt;const jt=(Bt=Pt,(t,e,s)=>Bt(e,t,s));var Bt;const Wt=((t,e,s,n,i,o,r,a,c,h,l)=>(u,d)=>{const p=u.createBufferSource();return assignNativeAudioNodeOptions(p,d),assignNativeAudioNodeAudioParamValue(p,d,"playbackRate"),assignNativeAudioNodeOption(p,d,"buffer"),assignNativeAudioNodeOption(p,d,"loop"),assignNativeAudioNodeOption(p,d,"loopEnd"),assignNativeAudioNodeOption(p,d,"loopStart"),e(s,()=>s(u))||(t=>{t.start=(e=>{let s=!1;return(n=0,i=0,o)=>{if(s)throw createInvalidStateError();e.call(t,n,i,o),s=!0}})(t.start)})(p),e(n,()=>n(u))||c(p),e(i,()=>i(u))||h(p,u),e(o,()=>o(u))||wrapAudioScheduledSourceNodeStartMethodNegativeParameters(p),e(r,()=>r(u))||l(p,u),e(a,()=>a(u))||wrapAudioScheduledSourceNodeStopMethodNegativeParameters(p),t(u,p),p})(qt,Z,t=>{const e=t.createBufferSource();e.start();try{e.start()}catch{return!0}return!1},t=>{const e=t.createBufferSource(),s=t.createBuffer(1,1,44100);e.buffer=s;try{e.start(0,1)}catch{return!1}return!0},t=>{const e=t.createBufferSource();e.start();try{e.stop()}catch{return!1}return!0},testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport,testAudioScheduledSourceNodeStopMethodNegativeParametersSupport,t=>{t.start=(e=>(s=0,n=0,i)=>{const o=t.buffer,r=null===o?n:Math.min(o.duration,n);null!==o&&r>o.duration-.5/t.context.sampleRate?e.call(t,s,0,0):e.call(t,s,r,i)})(t.start)},(Gt=overwriteAccessors,(t,e)=>{const s=e.createBuffer(1,1,44100);null===t.buffer&&(t.buffer=s),Gt(t,"buffer",e=>()=>{const n=e.call(t);return n===s?null:n},e=>n=>e.call(t,null===n?s:n))}),wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);var Gt;const zt=((t,e)=>(s,n,i)=>(t(n).replay(i),e(n,s,i)))((t=>e=>{const s=t(e);if(null===s.renderer)throw new Error("Missing the renderer of the given AudioParam in the audio graph.");return s.renderer})(getAudioParamConnections),Pt),Ut=((t,e,s,n,i)=>()=>{const o=new WeakMap;let r=null,a=null;return{set start(t){r=t},set stop(t){a=t},render(c,h){const l=o.get(h);return void 0!==l?Promise.resolve(l):(async(c,h)=>{let l=s(c);const u=isOwnedByContext(l,h);if(!u){const t={buffer:l.buffer,channelCount:l.channelCount,channelCountMode:l.channelCountMode,channelInterpretation:l.channelInterpretation,loop:l.loop,loopEnd:l.loopEnd,loopStart:l.loopStart,playbackRate:l.playbackRate.value};l=e(h,t),null!==r&&l.start(...r),null!==a&&l.stop(a)}return o.set(h,l),u?await t(h,c.playbackRate,l.playbackRate):await n(h,c.playbackRate,l.playbackRate),await i(c,h,l),l})(c,h)}}})(jt,Wt,getNativeAudioNode,zt,st),Qt=((t,e,s,n,i,o,r,a,c,h,l,u,d)=>(p,m,f,_=null,g=null)=>{const y=f.value,v=new AutomationEventList(y),x=m?n(v):null,b={get defaultValue(){return y},get maxValue(){return null===_?f.maxValue:_},get minValue(){return null===g?f.minValue:g},get value(){return f.value},set value(t){f.value=t,b.setValueAtTime(t,p.context.currentTime)},cancelAndHoldAtTime(t){if("function"==typeof f.cancelAndHoldAtTime)null===x&&v.flush(p.context.currentTime),v.add(i(t)),f.cancelAndHoldAtTime(t);else{const e=Array.from(v).pop();null===x&&v.flush(p.context.currentTime),v.add(i(t));const s=Array.from(v).pop();f.cancelScheduledValues(t),e!==s&&void 0!==s&&("exponentialRampToValue"===s.type?f.exponentialRampToValueAtTime(s.value,s.endTime):"linearRampToValue"===s.type?f.linearRampToValueAtTime(s.value,s.endTime):"setValue"===s.type?f.setValueAtTime(s.value,s.startTime):"setValueCurve"===s.type&&f.setValueCurveAtTime(s.values,s.startTime,s.duration))}return b},cancelScheduledValues:t=>(null===x&&v.flush(p.context.currentTime),v.add(o(t)),f.cancelScheduledValues(t),b),exponentialRampToValueAtTime(t,e){if(0===t)throw new RangeError;if(!Number.isFinite(e)||e<0)throw new RangeError;const s=p.context.currentTime;return null===x&&v.flush(s),0===Array.from(v).length&&(v.add(h(y,s)),f.setValueAtTime(y,s)),v.add(r(t,e)),f.exponentialRampToValueAtTime(t,e),b},linearRampToValueAtTime(t,e){const s=p.context.currentTime;return null===x&&v.flush(s),0===Array.from(v).length&&(v.add(h(y,s)),f.setValueAtTime(y,s)),v.add(a(t,e)),f.linearRampToValueAtTime(t,e),b},setTargetAtTime:(t,e,s)=>(null===x&&v.flush(p.context.currentTime),v.add(c(t,e,s)),f.setTargetAtTime(t,e,s),b),setValueAtTime:(t,e)=>(null===x&&v.flush(p.context.currentTime),v.add(h(t,e)),f.setValueAtTime(t,e),b),setValueCurveAtTime(t,e,s){const n=t instanceof Float32Array?t:new Float32Array(t);if(null!==u&&"webkitAudioContext"===u.name){const t=e+s,i=p.context.sampleRate,o=Math.ceil(e*i),r=Math.floor(t*i),a=r-o,c=new Float32Array(a);for(let l=0;l<a;l+=1){const t=(n.length-1)/s*((o+l)/i-e),r=Math.floor(t),a=Math.ceil(t);c[l]=r===a?n[r]:(1-(t-r))*n[r]+(1-(a-t))*n[a]}null===x&&v.flush(p.context.currentTime),v.add(l(c,e,s)),f.setValueCurveAtTime(c,e,s);const h=r/i;h<t&&d(b,c[c.length-1],h),d(b,n[n.length-1],t)}else null===x&&v.flush(p.context.currentTime),v.add(l(n,e,s)),f.setValueCurveAtTime(n,e,s);return b}};return s.set(b,f),e.set(b,p),t(b,x),b})((Zt=c,(t,e)=>{Zt.set(t,{activeInputs:new Set,passiveInputs:new WeakMap,renderer:e})}),pt,h,t=>({replay(e){for(const s of t)if("exponentialRampToValue"===s.type){const{endTime:t,value:n}=s;e.exponentialRampToValueAtTime(n,t)}else if("linearRampToValue"===s.type){const{endTime:t,value:n}=s;e.linearRampToValueAtTime(n,t)}else if("setTarget"===s.type){const{startTime:t,target:n,timeConstant:i}=s;e.setTargetAtTime(n,t,i)}else if("setValue"===s.type){const{startTime:t,value:n}=s;e.setValueAtTime(n,t)}else{if("setValueCurve"!==s.type)throw new Error("Can't apply an unknown automation.");{const{duration:t,startTime:n,values:i}=s;e.setValueCurveAtTime(i,n,t)}}}}),t=>({cancelTime:t,type:"cancelAndHold"}),t=>({cancelTime:t,type:"cancelScheduledValues"}),(t,e)=>({endTime:e,type:"exponentialRampToValue",value:t}),(t,e)=>({endTime:e,type:"linearRampToValue",value:t}),(t,e,s)=>({startTime:e,target:t,timeConstant:s,type:"setTarget"}),createSetValueAutomationEvent,createSetValueCurveAutomationEvent,_t,setValueAtTimeUntilPossible);var Zt;const Xt=((t,e,s,n,i,o,r,a)=>class AudioBufferSourceNode extends t{constructor(t,n){const a=o(t),c={...b,...n},h=i(a,c),l=r(a),u=l?e():null;super(t,!1,h,u),this._audioBufferSourceNodeRenderer=u,this._isBufferNullified=!1,this._isBufferSet=null!==c.buffer,this._nativeAudioBufferSourceNode=h,this._onended=null,this._playbackRate=s(this,l,h.playbackRate,x,v)}get buffer(){return this._isBufferNullified?null:this._nativeAudioBufferSourceNode.buffer}set buffer(t){if(this._nativeAudioBufferSourceNode.buffer=t,null!==t){if(this._isBufferSet)throw n();this._isBufferSet=!0}}get loop(){return this._nativeAudioBufferSourceNode.loop}set loop(t){this._nativeAudioBufferSourceNode.loop=t}get loopEnd(){return this._nativeAudioBufferSourceNode.loopEnd}set loopEnd(t){this._nativeAudioBufferSourceNode.loopEnd=t}get loopStart(){return this._nativeAudioBufferSourceNode.loopStart}set loopStart(t){this._nativeAudioBufferSourceNode.loopStart=t}get onended(){return this._onended}set onended(t){const e="function"==typeof t?a(this,t):null;this._nativeAudioBufferSourceNode.onended=e;const s=this._nativeAudioBufferSourceNode.onended;this._onended=null!==s&&s===e?t:s}get playbackRate(){return this._playbackRate}start(t=0,e=0,s){if(this._nativeAudioBufferSourceNode.start(t,e,s),null!==this._audioBufferSourceNodeRenderer&&(this._audioBufferSourceNodeRenderer.start=void 0===s?[t,e]:[t,e,s]),"closed"!==this.context.state){setInternalStateToActive(this);const resetInternalStateToPassive=()=>{this._nativeAudioBufferSourceNode.removeEventListener("ended",resetInternalStateToPassive),isActiveAudioNode(this)&&setInternalStateToPassive(this)};this._nativeAudioBufferSourceNode.addEventListener("ended",resetInternalStateToPassive)}}stop(t=0){this._nativeAudioBufferSourceNode.stop(t),null!==this._audioBufferSourceNodeRenderer&&(this._audioBufferSourceNodeRenderer.stop=t)}})(Tt,Ut,Qt,createInvalidStateError,Wt,at,ut,wrapEventListener),Yt=((t,e,s,n,i,o,r,a)=>class AudioDestinationNode extends t{constructor(t,s){const n=o(t),c=r(n),h=i(n,s,c);super(t,!1,h,c?e(a):null),this._isNodeOfNativeOfflineAudioContext=c,this._nativeAudioDestinationNode=h}get channelCount(){return this._nativeAudioDestinationNode.channelCount}set channelCount(t){if(this._isNodeOfNativeOfflineAudioContext)throw n();if(t>this._nativeAudioDestinationNode.maxChannelCount)throw s();this._nativeAudioDestinationNode.channelCount=t}get channelCountMode(){return this._nativeAudioDestinationNode.channelCountMode}set channelCountMode(t){if(this._isNodeOfNativeOfflineAudioContext)throw n();this._nativeAudioDestinationNode.channelCountMode=t}get maxChannelCount(){return this._nativeAudioDestinationNode.maxChannelCount}})(Tt,t=>{const e=new WeakMap;return{render(s,n){const i=e.get(n);return void 0!==i?Promise.resolve(i):(async(s,n)=>{const i=n.destination;return e.set(n,i),await t(s,n,i),i})(s,n)}}},createIndexSizeError,createInvalidStateError,((t,e)=>(s,n,i)=>{const o=s.destination;if(o.channelCount!==n)try{o.channelCount=n}catch{}i&&"explicit"!==o.channelCountMode&&(o.channelCountMode="explicit"),0===o.maxChannelCount&&Object.defineProperty(o,"maxChannelCount",{value:n});const r=t(s,{channelCount:n,channelCountMode:o.channelCountMode,channelInterpretation:o.channelInterpretation,gain:1});return e(r,"channelCount",t=>()=>t.call(r),t=>e=>{t.call(r,e);try{o.channelCount=e}catch(s){if(e>o.maxChannelCount)throw s}}),e(r,"channelCountMode",t=>()=>t.call(r),t=>e=>{t.call(r,e),o.channelCountMode=e}),e(r,"channelInterpretation",t=>()=>t.call(r),t=>e=>{t.call(r,e),o.channelInterpretation=e}),Object.defineProperty(r,"maxChannelCount",{get:()=>o.maxChannelCount}),r.connect(o),r})(createNativeGainNode,overwriteAccessors),at,ut,st),$t=((t,e,s,n,i)=>()=>{const o=new WeakMap;return{render(r,a){const c=o.get(a);return void 0!==c?Promise.resolve(c):(async(r,a)=>{let c=s(r);const h=isOwnedByContext(c,a);if(!h){const t={Q:c.Q.value,channelCount:c.channelCount,channelCountMode:c.channelCountMode,channelInterpretation:c.channelInterpretation,detune:c.detune.value,frequency:c.frequency.value,gain:c.gain.value,type:c.type};c=e(a,t)}return o.set(a,c),h?(await t(a,r.Q,c.Q),await t(a,r.detune,c.detune),await t(a,r.frequency,c.frequency),await t(a,r.gain,c.gain)):(await n(a,r.Q,c.Q),await n(a,r.detune,c.detune),await n(a,r.frequency,c.frequency),await n(a,r.gain,c.gain)),await i(r,a,c),c})(r,a)}}})(jt,createNativeBiquadFilterNode,getNativeAudioNode,zt,st),Ht=(t=>(e,s)=>t.set(e,s))(z),Jt=(Kt=Tt,te=Qt,ee=$t,se=createInvalidAccessError,ne=createNativeBiquadFilterNode,ie=at,oe=ut,re=Ht,class BiquadFilterNode extends Kt{constructor(t,e){const s=ie(t),n={...w,...e},i=ne(s,n),o=oe(s);super(t,!1,i,o?ee():null),this._Q=te(this,o,i.Q,x,v),this._detune=te(this,o,i.detune,1200*Math.log2(x),-1200*Math.log2(x)),this._frequency=te(this,o,i.frequency,t.sampleRate/2,0),this._gain=te(this,o,i.gain,40*Math.log10(x),v),this._nativeBiquadFilterNode=i,re(this,1)}get detune(){return this._detune}get frequency(){return this._frequency}get gain(){return this._gain}get Q(){return this._Q}get type(){return this._nativeBiquadFilterNode.type}set type(t){this._nativeBiquadFilterNode.type=t}getFrequencyResponse(t,e,s){try{this._nativeBiquadFilterNode.getFrequencyResponse(t,e,s)}catch(n){if(11===n.code)throw se();throw n}if(t.length!==e.length||e.length!==s.length)throw se()}});var Kt,te,ee,se,ne,ie,oe,re;const ae=((t,e)=>(s,n,i)=>{const o=new Set;return s.connect=(i=>(r,a=0,c=0)=>{const h=0===o.size;if(e(r))return i.call(s,r,a,c),t(o,[r,a,c],t=>t[0]===r&&t[1]===a&&t[2]===c,!0),h&&n(),r;i.call(s,r,a),t(o,[r,a],t=>t[0]===r&&t[1]===a,!0),h&&n()})(s.connect),s.disconnect=(t=>(n,r,a)=>{const c=o.size>0;if(void 0===n)t.apply(s),o.clear();else if("number"==typeof n){t.call(s,n);for(const t of o)t[1]===n&&o.delete(t)}else{e(n)?t.call(s,n,r,a):t.call(s,n,r);for(const t of o)t[0]!==n||void 0!==r&&t[1]!==r||void 0!==a&&t[2]!==a||o.delete(t)}const h=0===o.size;c&&h&&i()})(s.disconnect),s})(insertElementInSet,vt),ce=(he=createInvalidStateError,le=ae,(t,e)=>{e.channelCount=1,e.channelCountMode="explicit",Object.defineProperty(e,"channelCount",{get:()=>1,set:()=>{throw he()}}),Object.defineProperty(e,"channelCountMode",{get:()=>"explicit",set:()=>{throw he()}});const s=t.createBufferSource();le(e,()=>{const t=e.numberOfInputs;for(let n=0;n<t;n+=1)s.connect(e,0,n)},()=>s.disconnect(e))});var he,le;const ue=((t,e)=>(s,n)=>{const i=s.createChannelMerger(n.numberOfInputs);return null!==t&&"webkitAudioContext"===t.name&&e(s,i),assignNativeAudioNodeOptions(i,n),i})(_t,ce),de=((t,e,s)=>()=>{const n=new WeakMap;return{render(i,o){const r=n.get(o);return void 0!==r?Promise.resolve(r):(async(i,o)=>{let r=e(i);if(!isOwnedByContext(r,o)){const e={channelCount:r.channelCount,channelCountMode:r.channelCountMode,channelInterpretation:r.channelInterpretation,numberOfInputs:r.numberOfInputs};r=t(o,e)}return n.set(o,r),await s(i,o,r),r})(i,o)}}})(ue,getNativeAudioNode,st),pe=((t,e,s,n,i)=>class ChannelMergerNode extends t{constructor(t,o){const r=n(t),a={...S,...o};super(t,!1,s(r,a),i(r)?e():null)}})(Tt,de,ue,at,ut),me=((t,e,s)=>()=>{const n=new WeakMap;return{render(i,o){const r=n.get(o);return void 0!==r?Promise.resolve(r):(async(i,o)=>{let r=e(i);if(!isOwnedByContext(r,o)){const e={channelCount:r.channelCount,channelCountMode:r.channelCountMode,channelInterpretation:r.channelInterpretation,numberOfOutputs:r.numberOfOutputs};r=t(o,e)}return n.set(o,r),await s(i,o,r),r})(i,o)}}})(createNativeChannelSplitterNode,getNativeAudioNode,st),fe=((t,e,s,n,i,o)=>class ChannelSplitterNode extends t{constructor(t,r){const a=n(t),c=o({...A,...r});super(t,!1,s(a,c),i(a)?e():null)}})(Tt,me,createNativeChannelSplitterNode,at,ut,t=>({...t,channelCount:t.numberOfOutputs})),_e=((t,e,s,n)=>(i,{offset:o,...r})=>{const a=i.createBuffer(1,2,44100),c=e(i,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}),h=s(i,{...r,gain:o}),l=a.getChannelData(0);l[0]=1,l[1]=1,c.buffer=a,c.loop=!0;const u={get bufferSize(){},get channelCount(){return h.channelCount},set channelCount(t){h.channelCount=t},get channelCountMode(){return h.channelCountMode},set channelCountMode(t){h.channelCountMode=t},get channelInterpretation(){return h.channelInterpretation},set channelInterpretation(t){h.channelInterpretation=t},get context(){return h.context},get inputs(){return[]},get numberOfInputs(){return c.numberOfInputs},get numberOfOutputs(){return h.numberOfOutputs},get offset(){return h.gain},get onended(){return c.onended},set onended(t){c.onended=t},addEventListener:(...t)=>c.addEventListener(t[0],t[1],t[2]),dispatchEvent:(...t)=>c.dispatchEvent(t[0]),removeEventListener:(...t)=>c.removeEventListener(t[0],t[1],t[2]),start(t=0){c.start.call(c,t)},stop(t=0){c.stop.call(c,t)}};return t(i,c),n(interceptConnections(u,h),()=>c.connect(h),()=>c.disconnect(h))})(qt,Wt,createNativeGainNode,ae),ge=((t,e,s,n,i)=>(o,r)=>{if(void 0===o.createConstantSource)return s(o,r);const a=o.createConstantSource();return assignNativeAudioNodeOptions(a,r),assignNativeAudioNodeAudioParamValue(a,r,"offset"),e(n,()=>n(o))||wrapAudioScheduledSourceNodeStartMethodNegativeParameters(a),e(i,()=>i(o))||wrapAudioScheduledSourceNodeStopMethodNegativeParameters(a),t(o,a),a})(qt,Z,_e,testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,testAudioScheduledSourceNodeStopMethodNegativeParametersSupport),ye=((t,e,s,n,i)=>()=>{const o=new WeakMap;let r=null,a=null;return{set start(t){r=t},set stop(t){a=t},render(c,h){const l=o.get(h);return void 0!==l?Promise.resolve(l):(async(c,h)=>{let l=s(c);const u=isOwnedByContext(l,h);if(!u){const t={channelCount:l.channelCount,channelCountMode:l.channelCountMode,channelInterpretation:l.channelInterpretation,offset:l.offset.value};l=e(h,t),null!==r&&l.start(r),null!==a&&l.stop(a)}return o.set(h,l),u?await t(h,c.offset,l.offset):await n(h,c.offset,l.offset),await i(c,h,l),l})(c,h)}}})(jt,ge,getNativeAudioNode,zt,st),ve=((t,e,s,n,i,o,r)=>class ConstantSourceNode extends t{constructor(t,r){const a=i(t),c={...C,...r},h=n(a,c),l=o(a),u=l?s():null;super(t,!1,h,u),this._constantSourceNodeRenderer=u,this._nativeConstantSourceNode=h,this._offset=e(this,l,h.offset,x,v),this._onended=null}get offset(){return this._offset}get onended(){return this._onended}set onended(t){const e="function"==typeof t?r(this,t):null;this._nativeConstantSourceNode.onended=e;const s=this._nativeConstantSourceNode.onended;this._onended=null!==s&&s===e?t:s}start(t=0){if(this._nativeConstantSourceNode.start(t),null!==this._constantSourceNodeRenderer&&(this._constantSourceNodeRenderer.start=t),"closed"!==this.context.state){setInternalStateToActive(this);const resetInternalStateToPassive=()=>{this._nativeConstantSourceNode.removeEventListener("ended",resetInternalStateToPassive),isActiveAudioNode(this)&&setInternalStateToPassive(this)};this._nativeConstantSourceNode.addEventListener("ended",resetInternalStateToPassive)}}stop(t=0){this._nativeConstantSourceNode.stop(t),null!==this._constantSourceNodeRenderer&&(this._constantSourceNodeRenderer.stop=t)}})(Tt,Qt,ye,ge,at,ut,wrapEventListener),xe=((t,e)=>(s,n)=>{const i=s.createConvolver();if(assignNativeAudioNodeOptions(i,n),n.disableNormalization===i.normalize&&(i.normalize=!n.disableNormalization),assignNativeAudioNodeOption(i,n,"buffer"),n.channelCount>2)throw t();if(e(i,"channelCount",t=>()=>t.call(i),e=>s=>{if(s>2)throw t();return e.call(i,s)}),"max"===n.channelCountMode)throw t();return e(i,"channelCountMode",t=>()=>t.call(i),e=>s=>{if("max"===s)throw t();return e.call(i,s)}),i})(createNotSupportedError,overwriteAccessors),be=((t,e,s)=>()=>{const n=new WeakMap;return{render(i,o){const r=n.get(o);return void 0!==r?Promise.resolve(r):(async(i,o)=>{let r=e(i);if(!isOwnedByContext(r,o)){const e={buffer:r.buffer,channelCount:r.channelCount,channelCountMode:r.channelCountMode,channelInterpretation:r.channelInterpretation,disableNormalization:!r.normalize};r=t(o,e)}return n.set(o,r),isNativeAudioNodeFaker(r)?await s(i,o,r.inputs[0]):await s(i,o,r),r})(i,o)}}})(xe,getNativeAudioNode,st),Te=((t,e,s,n,i,o)=>class ConvolverNode extends t{constructor(t,r){const a=n(t),c={...k,...r},h=s(a,c);super(t,!1,h,i(a)?e():null),this._isBufferNullified=!1,this._nativeConvolverNode=h,null!==c.buffer&&o(this,c.buffer.duration)}get buffer(){return this._isBufferNullified?null:this._nativeConvolverNode.buffer}set buffer(t){if(this._nativeConvolverNode.buffer=t,null===t&&null!==this._nativeConvolverNode.buffer){const t=this._nativeConvolverNode.context;this._nativeConvolverNode.buffer=t.createBuffer(1,1,t.sampleRate),this._isBufferNullified=!0,o(this,0)}else this._isBufferNullified=!1,o(this,null===this._nativeConvolverNode.buffer?0:this._nativeConvolverNode.buffer.duration)}get normalize(){return this._nativeConvolverNode.normalize}set normalize(t){this._nativeConvolverNode.normalize=t}})(Tt,be,xe,at,ut,Ht),we=((t,e,s,n,i)=>o=>{const r=new WeakMap;return{render(a,c){const h=r.get(c);return void 0!==h?Promise.resolve(h):(async(a,c)=>{let h=s(a);const l=isOwnedByContext(h,c);if(!l){const t={channelCount:h.channelCount,channelCountMode:h.channelCountMode,channelInterpretation:h.channelInterpretation,delayTime:h.delayTime.value,maxDelayTime:o};h=e(c,t)}return r.set(c,h),l?await t(c,a.delayTime,h.delayTime):await n(c,a.delayTime,h.delayTime),await i(a,c,h),h})(a,c)}}})(jt,createNativeDelayNode,getNativeAudioNode,zt,st),Se=((t,e,s,n,i,o,r)=>class DelayNode extends t{constructor(t,a){const c=i(t),h={...O,...a},l=n(c,h),u=o(c);super(t,!1,l,u?s(h.maxDelayTime):null),this._delayTime=e(this,u,l.delayTime),r(this,h.maxDelayTime)}get delayTime(){return this._delayTime}})(Tt,Qt,we,createNativeDelayNode,at,ut,Ht),Ae=(Ce=createNotSupportedError,(t,e)=>{const s=t.createDynamicsCompressor();if(assignNativeAudioNodeOptions(s,e),e.channelCount>2)throw Ce();if("max"===e.channelCountMode)throw Ce();return assignNativeAudioNodeAudioParamValue(s,e,"attack"),assignNativeAudioNodeAudioParamValue(s,e,"knee"),assignNativeAudioNodeAudioParamValue(s,e,"ratio"),assignNativeAudioNodeAudioParamValue(s,e,"release"),assignNativeAudioNodeAudioParamValue(s,e,"threshold"),s});var Ce;const ke=((t,e,s,n,i)=>()=>{const o=new WeakMap;return{render(r,a){const c=o.get(a);return void 0!==c?Promise.resolve(c):(async(r,a)=>{let c=s(r);const h=isOwnedByContext(c,a);if(!h){const t={attack:c.attack.value,channelCount:c.channelCount,channelCountMode:c.channelCountMode,channelInterpretation:c.channelInterpretation,knee:c.knee.value,ratio:c.ratio.value,release:c.release.value,threshold:c.threshold.value};c=e(a,t)}return o.set(a,c),h?(await t(a,r.attack,c.attack),await t(a,r.knee,c.knee),await t(a,r.ratio,c.ratio),await t(a,r.release,c.release),await t(a,r.threshold,c.threshold)):(await n(a,r.attack,c.attack),await n(a,r.knee,c.knee),await n(a,r.ratio,c.ratio),await n(a,r.release,c.release),await n(a,r.threshold,c.threshold)),await i(r,a,c),c})(r,a)}}})(jt,Ae,getNativeAudioNode,zt,st),Oe=((t,e,s,n,i,o,r,a)=>class DynamicsCompressorNode extends t{constructor(t,i){const c=o(t),h={...M,...i},l=n(c,h),u=r(c);super(t,!1,l,u?s():null),this._attack=e(this,u,l.attack),this._knee=e(this,u,l.knee),this._nativeDynamicsCompressorNode=l,this._ratio=e(this,u,l.ratio),this._release=e(this,u,l.release),this._threshold=e(this,u,l.threshold),a(this,.006)}get attack(){return this._attack}get channelCount(){return this._nativeDynamicsCompressorNode.channelCount}set channelCount(t){const e=this._nativeDynamicsCompressorNode.channelCount;if(this._nativeDynamicsCompressorNode.channelCount=t,t>2)throw this._nativeDynamicsCompressorNode.channelCount=e,i()}get channelCountMode(){return this._nativeDynamicsCompressorNode.channelCountMode}set channelCountMode(t){const e=this._nativeDynamicsCompressorNode.channelCountMode;if(this._nativeDynamicsCompressorNode.channelCountMode=t,"max"===t)throw this._nativeDynamicsCompressorNode.channelCountMode=e,i()}get knee(){return this._knee}get ratio(){return this._ratio}get reduction(){return"number"==typeof this._nativeDynamicsCompressorNode.reduction.value?this._nativeDynamicsCompressorNode.reduction.value:this._nativeDynamicsCompressorNode.reduction}get release(){return this._release}get threshold(){return this._threshold}})(Tt,Qt,ke,Ae,createNotSupportedError,at,ut,Ht),Me=((t,e,s,n,i)=>()=>{const o=new WeakMap;return{render(r,a){const c=o.get(a);return void 0!==c?Promise.resolve(c):(async(r,a)=>{let c=s(r);const h=isOwnedByContext(c,a);if(!h){const t={channelCount:c.channelCount,channelCountMode:c.channelCountMode,channelInterpretation:c.channelInterpretation,gain:c.gain.value};c=e(a,t)}return o.set(a,c),h?await t(a,r.gain,c.gain):await n(a,r.gain,c.gain),await i(r,a,c),c})(r,a)}}})(jt,createNativeGainNode,getNativeAudioNode,zt,st),De=((t,e,s,n,i,o)=>class GainNode extends t{constructor(t,r){const a=i(t),c={...D,...r},h=n(a,c),l=o(a);super(t,!1,h,l?s():null),this._gain=e(this,l,h.gain,x,v)}get gain(){return this._gain}})(Tt,Qt,Me,createNativeGainNode,at,ut),Fe=((t,e,s,n)=>(i,o,{channelCount:r,channelCountMode:a,channelInterpretation:c,feedback:h,feedforward:l})=>{const u=computeBufferSize(o,i.sampleRate),d=h instanceof Float64Array?h:new Float64Array(h),p=l instanceof Float64Array?l:new Float64Array(l),m=d.length,f=p.length,_=Math.min(m,f);if(0===m||m>20)throw n();if(0===d[0])throw e();if(0===f||f>20)throw n();if(0===p[0])throw e();if(1!==d[0]){for(let t=0;t<f;t+=1)p[t]/=d[0];for(let t=1;t<m;t+=1)d[t]/=d[0]}const g=s(i,u,r,r);g.channelCount=r,g.channelCountMode=a,g.channelInterpretation=c;const y=[],v=[],x=[];for(let t=0;t<r;t+=1){y.push(0);const t=new Float32Array(32),e=new Float32Array(32);t.fill(0),e.fill(0),v.push(t),x.push(e)}g.onaudioprocess=t=>{const e=t.inputBuffer,s=t.outputBuffer,n=e.numberOfChannels;for(let i=0;i<n;i+=1){const t=e.getChannelData(i),n=s.getChannelData(i);y[i]=filterBuffer(d,m,p,f,_,v[i],x[i],y[i],32,t,n)}};const b=i.sampleRate/2;return interceptConnections({get bufferSize(){return u},get channelCount(){return g.channelCount},set channelCount(t){g.channelCount=t},get channelCountMode(){return g.channelCountMode},set channelCountMode(t){g.channelCountMode=t},get channelInterpretation(){return g.channelInterpretation},set channelInterpretation(t){g.channelInterpretation=t},get context(){return g.context},get inputs(){return[g]},get numberOfInputs(){return g.numberOfInputs},get numberOfOutputs(){return g.numberOfOutputs},addEventListener:(...t)=>g.addEventListener(t[0],t[1],t[2]),dispatchEvent:(...t)=>g.dispatchEvent(t[0]),getFrequencyResponse(e,s,n){if(e.length!==s.length||s.length!==n.length)throw t();const i=e.length;for(let t=0;t<i;t+=1){const i=-Math.PI*(e[t]/b),o=[Math.cos(i),Math.sin(i)],r=divide(evaluatePolynomial(p,o),evaluatePolynomial(d,o));s[t]=Math.sqrt(r[0]*r[0]+r[1]*r[1]),n[t]=Math.atan2(r[1],r[0])}},removeEventListener:(...t)=>g.removeEventListener(t[0],t[1],t[2])},g)})(createInvalidAccessError,createInvalidStateError,createNativeScriptProcessorNode,createNotSupportedError),Ee=((t,e,s,n)=>i=>t(testPromiseSupport,()=>testPromiseSupport(i))?Promise.resolve(t(n,n)).then(t=>{if(!t){const t=s(i,512,0,1);i.oncomplete=()=>{t.onaudioprocess=null,t.disconnect()},t.onaudioprocess=()=>i.currentTime,t.connect(i.destination)}return i.startRendering()}):new Promise(t=>{const s=e(i,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});i.oncomplete=e=>{s.disconnect(),t(e.renderedBuffer)},s.connect(i.destination),i.startRendering()}))(Z,createNativeGainNode,createNativeScriptProcessorNode,((t,e)=>()=>{if(null===e)return Promise.resolve(!1);const s=new e(1,1,44100),n=t(s,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});return new Promise(t=>{s.oncomplete=()=>{n.disconnect(),t(0!==s.currentTime)},s.startRendering()})})(createNativeGainNode,ht)),Re=((t,e,s,n,i)=>(o,r)=>{const a=new WeakMap;let c=null;const createAudioNode=async(h,l)=>{let u=null,d=e(h);const p=isOwnedByContext(d,l);if(void 0===l.createIIRFilter?u=t(l,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}):p||(d=l.createIIRFilter(r,o)),a.set(l,null===u?d:u),null!==u){if(null===c){if(null===s)throw new Error("Missing the native OfflineAudioContext constructor.");const t=new s(h.context.destination.channelCount,h.context.length,l.sampleRate);c=(async()=>{await n(h,t,t.destination);return((t,e,s,n)=>{const i=s instanceof Float64Array?s:new Float64Array(s),o=n instanceof Float64Array?n:new Float64Array(n),r=i.length,a=o.length,c=Math.min(r,a);if(1!==i[0]){for(let t=0;t<r;t+=1)o[t]/=i[0];for(let t=1;t<a;t+=1)i[t]/=i[0]}const h=new Float32Array(32),l=new Float32Array(32),u=e.createBuffer(t.numberOfChannels,t.length,t.sampleRate),d=t.numberOfChannels;for(let p=0;p<d;p+=1){const e=t.getChannelData(p),s=u.getChannelData(p);h.fill(0),l.fill(0),filterBuffer(i,r,o,a,c,h,l,0,32,e,s)}return u})(await i(t),l,o,r)})()}const t=await c;return u.buffer=t,u.start(0),u}return await n(h,l,d),d};return{render(t,e){const s=a.get(e);return void 0!==s?Promise.resolve(s):createAudioNode(t,e)}}})(Wt,getNativeAudioNode,ht,st,Ee);var qe;const Ne=((t,e,s,n,i,o)=>class IIRFilterNode extends t{constructor(t,r){const a=n(t),c=i(a),h={...F,...r},l=e(a,c?null:t.baseLatency,h);super(t,!1,l,c?s(h.feedback,h.feedforward):null),(t=>{t.getFrequencyResponse=(e=>(s,n,i)=>{if(s.length!==n.length||n.length!==i.length)throw createInvalidAccessError();return e.call(t,s,n,i)})(t.getFrequencyResponse)})(l),this._nativeIIRFilterNode=l,o(this,1)}getFrequencyResponse(t,e,s){return this._nativeIIRFilterNode.getFrequencyResponse(t,e,s)}})(Tt,(qe=Fe,(t,e,s)=>{if(void 0===t.createIIRFilter)return qe(t,e,s);const n=t.createIIRFilter(s.feedforward,s.feedback);return assignNativeAudioNodeOptions(n,s),n}),Re,at,ut,Ht),Pe=((t,e,s,n,i,o,r,a)=>(c,h)=>{const l=h.listener,{forwardX:u,forwardY:d,forwardZ:p,positionX:m,positionY:f,positionZ:_,upX:g,upY:y,upZ:b}=void 0===l.forwardX?(()=>{const u=new Float32Array(1),d=e(h,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:9}),p=r(h);let m=!1,f=[0,0,-1,0,1,0],_=[0,0,0];const createScriptProcessorNode=()=>{if(m)return;m=!0;const t=n(h,256,9,0);t.onaudioprocess=({inputBuffer:t})=>{const e=[o(t,u,0),o(t,u,1),o(t,u,2),o(t,u,3),o(t,u,4),o(t,u,5)];e.some((t,e)=>t!==f[e])&&(l.setOrientation(...e),f=e);const s=[o(t,u,6),o(t,u,7),o(t,u,8)];s.some((t,e)=>t!==_[e])&&(l.setPosition(...s),_=s)},d.connect(t)},createSetOrientation=t=>e=>{e!==f[t]&&(f[t]=e,l.setOrientation(...f))},createSetPosition=t=>e=>{e!==_[t]&&(_[t]=e,l.setPosition(..._))},createFakeAudioParam=(e,n,o)=>{const r=s(h,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:n});r.connect(d,0,e),r.start(),Object.defineProperty(r.offset,"defaultValue",{get:()=>n});const l=t({context:c},p,r.offset,x,v);var u,m,f,_,g,y,b;return a(l,"value",t=>()=>t.call(l),t=>e=>{try{t.call(l,e)}catch(s){if(9!==s.code)throw s}createScriptProcessorNode(),p&&o(e)}),l.cancelAndHoldAtTime=(u=l.cancelAndHoldAtTime,p?()=>{throw i()}:(...t)=>{const e=u.apply(l,t);return createScriptProcessorNode(),e}),l.cancelScheduledValues=(m=l.cancelScheduledValues,p?()=>{throw i()}:(...t)=>{const e=m.apply(l,t);return createScriptProcessorNode(),e}),l.exponentialRampToValueAtTime=(f=l.exponentialRampToValueAtTime,p?()=>{throw i()}:(...t)=>{const e=f.apply(l,t);return createScriptProcessorNode(),e}),l.linearRampToValueAtTime=(_=l.linearRampToValueAtTime,p?()=>{throw i()}:(...t)=>{const e=_.apply(l,t);return createScriptProcessorNode(),e}),l.setTargetAtTime=(g=l.setTargetAtTime,p?()=>{throw i()}:(...t)=>{const e=g.apply(l,t);return createScriptProcessorNode(),e}),l.setValueAtTime=(y=l.setValueAtTime,p?()=>{throw i()}:(...t)=>{const e=y.apply(l,t);return createScriptProcessorNode(),e}),l.setValueCurveAtTime=(b=l.setValueCurveAtTime,p?()=>{throw i()}:(...t)=>{const e=b.apply(l,t);return createScriptProcessorNode(),e}),l};return{forwardX:createFakeAudioParam(0,0,createSetOrientation(0)),forwardY:createFakeAudioParam(1,0,createSetOrientation(1)),forwardZ:createFakeAudioParam(2,-1,createSetOrientation(2)),positionX:createFakeAudioParam(6,0,createSetPosition(0)),positionY:createFakeAudioParam(7,0,createSetPosition(1)),positionZ:createFakeAudioParam(8,0,createSetPosition(2)),upX:createFakeAudioParam(3,0,createSetOrientation(3)),upY:createFakeAudioParam(4,1,createSetOrientation(4)),upZ:createFakeAudioParam(5,0,createSetOrientation(5))}})():l;return{get forwardX(){return u},get forwardY(){return d},get forwardZ(){return p},get positionX(){return m},get positionY(){return f},get positionZ(){return _},get upX(){return g},get upY(){return y},get upZ(){return b}}})(Qt,ue,ge,createNativeScriptProcessorNode,createNotSupportedError,getFirstSample,ut,overwriteAccessors),Ie=new WeakMap,Ve=((t,e,s,n,i,o)=>class MinimalBaseAudioContext extends s{constructor(s,o){super(s),this._nativeContext=s,l.set(this,s),n(s)&&i.set(s,new Set),this._destination=new t(this,o),this._listener=e(this,s),this._onstatechange=null}get currentTime(){return this._nativeContext.currentTime}get destination(){return this._destination}get listener(){return this._listener}get onstatechange(){return this._onstatechange}set onstatechange(t){const e="function"==typeof t?o(this,t):null;this._nativeContext.onstatechange=e;const s=this._nativeContext.onstatechange;this._onstatechange=null!==s&&s===e?t:s}get sampleRate(){return this._nativeContext.sampleRate}get state(){return this._nativeContext.state}})(Yt,Pe,mt,ut,Ie,wrapEventListener),Le=((t,e,s,n,i,o)=>(r,a)=>{const c=r.createOscillator();return assignNativeAudioNodeOptions(c,a),assignNativeAudioNodeAudioParamValue(c,a,"detune"),assignNativeAudioNodeAudioParamValue(c,a,"frequency"),void 0!==a.periodicWave?c.setPeriodicWave(a.periodicWave):assignNativeAudioNodeOption(c,a,"type"),e(s,()=>s(r))||wrapAudioScheduledSourceNodeStartMethodNegativeParameters(c),e(n,()=>n(r))||o(c,r),e(i,()=>i(r))||wrapAudioScheduledSourceNodeStopMethodNegativeParameters(c),t(r,c),c})(qt,Z,testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport,testAudioScheduledSourceNodeStopMethodNegativeParametersSupport,wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls),je=((t,e,s,n,i)=>()=>{const o=new WeakMap;let r=null,a=null,c=null;return{set periodicWave(t){r=t},set start(t){a=t},set stop(t){c=t},render(h,l){const u=o.get(l);return void 0!==u?Promise.resolve(u):(async(h,l)=>{let u=s(h);const d=isOwnedByContext(u,l);if(!d){const t={channelCount:u.channelCount,channelCountMode:u.channelCountMode,channelInterpretation:u.channelInterpretation,detune:u.detune.value,frequency:u.frequency.value,periodicWave:null===r?void 0:r,type:u.type};u=e(l,t),null!==a&&u.start(a),null!==c&&u.stop(c)}return o.set(l,u),d?(await t(l,h.detune,u.detune),await t(l,h.frequency,u.frequency)):(await n(l,h.detune,u.detune),await n(l,h.frequency,u.frequency)),await i(h,l,u),u})(h,l)}}})(jt,Le,getNativeAudioNode,zt,st),Be=((t,e,s,n,i,o,r)=>class OscillatorNode extends t{constructor(t,r){const a=i(t),c={...q,...r},h=s(a,c),l=o(a),u=l?n():null,d=t.sampleRate/2;super(t,!1,h,u),this._detune=e(this,l,h.detune,153600,-153600),this._frequency=e(this,l,h.frequency,d,-d),this._nativeOscillatorNode=h,this._onended=null,this._oscillatorNodeRenderer=u,null!==this._oscillatorNodeRenderer&&void 0!==c.periodicWave&&(this._oscillatorNodeRenderer.periodicWave=c.periodicWave)}get detune(){return this._detune}get frequency(){return this._frequency}get onended(){return this._onended}set onended(t){const e="function"==typeof t?r(this,t):null;this._nativeOscillatorNode.onended=e;const s=this._nativeOscillatorNode.onended;this._onended=null!==s&&s===e?t:s}get type(){return this._nativeOscillatorNode.type}set type(t){this._nativeOscillatorNode.type=t,null!==this._oscillatorNodeRenderer&&(this._oscillatorNodeRenderer.periodicWave=null)}setPeriodicWave(t){this._nativeOscillatorNode.setPeriodicWave(t),null!==this._oscillatorNodeRenderer&&(this._oscillatorNodeRenderer.periodicWave=t)}start(t=0){if(this._nativeOscillatorNode.start(t),null!==this._oscillatorNodeRenderer&&(this._oscillatorNodeRenderer.start=t),"closed"!==this.context.state){setInternalStateToActive(this);const resetInternalStateToPassive=()=>{this._nativeOscillatorNode.removeEventListener("ended",resetInternalStateToPassive),isActiveAudioNode(this)&&setInternalStateToPassive(this)};this._nativeOscillatorNode.addEventListener("ended",resetInternalStateToPassive)}}stop(t=0){this._nativeOscillatorNode.stop(t),null!==this._oscillatorNodeRenderer&&(this._oscillatorNodeRenderer.stop=t)}})(Tt,Qt,Le,je,at,ut,wrapEventListener),We=(Ge=Wt,(t,e)=>{const s=Ge(t,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}),n=t.createBuffer(1,2,44100);return s.buffer=n,s.loop=!0,s.connect(e),s.start(),()=>{s.stop(),s.disconnect(e)}});var Ge;const ze=((t,e,s,n,i)=>(o,{curve:r,oversample:a,...c})=>{const h=o.createWaveShaper(),l=o.createWaveShaper();assignNativeAudioNodeOptions(h,c),assignNativeAudioNodeOptions(l,c);const u=s(o,{...c,gain:1}),d=s(o,{...c,gain:-1}),p=s(o,{...c,gain:1}),m=s(o,{...c,gain:-1});let f=null,_=!1,g=null;const y={get bufferSize(){},get channelCount(){return h.channelCount},set channelCount(t){u.channelCount=t,d.channelCount=t,h.channelCount=t,p.channelCount=t,l.channelCount=t,m.channelCount=t},get channelCountMode(){return h.channelCountMode},set channelCountMode(t){u.channelCountMode=t,d.channelCountMode=t,h.channelCountMode=t,p.channelCountMode=t,l.channelCountMode=t,m.channelCountMode=t},get channelInterpretation(){return h.channelInterpretation},set channelInterpretation(t){u.channelInterpretation=t,d.channelInterpretation=t,h.channelInterpretation=t,p.channelInterpretation=t,l.channelInterpretation=t,m.channelInterpretation=t},get context(){return h.context},get curve(){return g},set curve(s){if(null!==s&&s.length<2)throw e();if(null===s)h.curve=s,l.curve=s;else{const t=s.length,e=new Float32Array(t+2-t%2),n=new Float32Array(t+2-t%2);e[0]=s[0],n[0]=-s[t-1];const i=Math.ceil((t+1)/2),o=(t+1)/2-1;for(let r=1;r<i;r+=1){const a=r/i*o,c=Math.floor(a),h=Math.ceil(a);e[r]=c===h?s[c]:(1-(a-c))*s[c]+(1-(h-a))*s[h],n[r]=c===h?-s[t-1-c]:-(1-(a-c))*s[t-1-c]-(1-(h-a))*s[t-1-h]}e[i]=t%2==1?s[i-1]:(s[i-2]+s[i-1])/2,h.curve=e,l.curve=n}g=s,_&&(n(g)&&null===f?f=t(o,u):null!==f&&(f(),f=null))},get inputs(){return[u]},get numberOfInputs(){return h.numberOfInputs},get numberOfOutputs(){return h.numberOfOutputs},get oversample(){return h.oversample},set oversample(t){h.oversample=t,l.oversample=t},addEventListener:(...t)=>u.addEventListener(t[0],t[1],t[2]),dispatchEvent:(...t)=>u.dispatchEvent(t[0]),removeEventListener:(...t)=>u.removeEventListener(t[0],t[1],t[2])};null!==r&&(y.curve=r instanceof Float32Array?r:new Float32Array(r)),a!==y.oversample&&(y.oversample=a);return i(interceptConnections(y,p),()=>{u.connect(h).connect(p),u.connect(d).connect(l).connect(m).connect(p),_=!0,n(g)&&(f=t(o,u))},()=>{u.disconnect(h),h.disconnect(p),u.disconnect(d),d.disconnect(l),l.disconnect(m),m.disconnect(p),_=!1,null!==f&&(f(),f=null)})})(We,createInvalidStateError,createNativeGainNode,isDCCurve,ae),Ue=((t,e,s,n,i,o,r)=>(a,c)=>{const h=a.createWaveShaper();if(null!==o&&"webkitAudioContext"===o.name&&void 0===a.createGain().gain.automationRate)return s(a,c);assignNativeAudioNodeOptions(h,c);const l=null===c.curve||c.curve instanceof Float32Array?c.curve:new Float32Array(c.curve);if(null!==l&&l.length<2)throw e();assignNativeAudioNodeOption(h,{curve:l},"curve"),assignNativeAudioNodeOption(h,c,"oversample");let u=null,d=!1;r(h,"curve",t=>()=>t.call(h),e=>s=>(e.call(h,s),d&&(n(s)&&null===u?u=t(a,h):n(s)||null===u||(u(),u=null)),s));return i(h,()=>{d=!0,n(h.curve)&&(u=t(a,h))},()=>{d=!1,null!==u&&(u(),u=null)})})(We,createInvalidStateError,ze,isDCCurve,ae,_t,overwriteAccessors),Qe=((t,e,s,n,i,o,r,a,c,h)=>(l,{coneInnerAngle:u,coneOuterAngle:d,coneOuterGain:p,distanceModel:m,maxDistance:f,orientationX:_,orientationY:g,orientationZ:y,panningModel:v,positionX:x,positionY:b,positionZ:T,refDistance:w,rolloffFactor:S,...A})=>{const C=l.createPanner();if(A.channelCount>2)throw r();if("max"===A.channelCountMode)throw r();assignNativeAudioNodeOptions(C,A);const k={channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete"},O=s(l,{...k,channelInterpretation:"speakers",numberOfInputs:6}),M=n(l,{...A,gain:1}),D=n(l,{...k,gain:1}),F=n(l,{...k,gain:0}),E=n(l,{...k,gain:0}),R=n(l,{...k,gain:0}),q=n(l,{...k,gain:0}),N=n(l,{...k,gain:0}),P=i(l,256,6,1),I=o(l,{...k,curve:new Float32Array([1,1]),oversample:"none"});let V=[_,g,y],L=[x,b,T];const j=new Float32Array(1);P.onaudioprocess=({inputBuffer:t})=>{const e=[c(t,j,0),c(t,j,1),c(t,j,2)];e.some((t,e)=>t!==V[e])&&(C.setOrientation(...e),V=e);const s=[c(t,j,3),c(t,j,4),c(t,j,5)];s.some((t,e)=>t!==L[e])&&(C.setPosition(...s),L=s)},Object.defineProperty(F.gain,"defaultValue",{get:()=>0}),Object.defineProperty(E.gain,"defaultValue",{get:()=>0}),Object.defineProperty(R.gain,"defaultValue",{get:()=>0}),Object.defineProperty(q.gain,"defaultValue",{get:()=>0}),Object.defineProperty(N.gain,"defaultValue",{get:()=>0});const B={get bufferSize(){},get channelCount(){return C.channelCount},set channelCount(t){if(t>2)throw r();M.channelCount=t,C.channelCount=t},get channelCountMode(){return C.channelCountMode},set channelCountMode(t){if("max"===t)throw r();M.channelCountMode=t,C.channelCountMode=t},get channelInterpretation(){return C.channelInterpretation},set channelInterpretation(t){M.channelInterpretation=t,C.channelInterpretation=t},get coneInnerAngle(){return C.coneInnerAngle},set coneInnerAngle(t){C.coneInnerAngle=t},get coneOuterAngle(){return C.coneOuterAngle},set coneOuterAngle(t){C.coneOuterAngle=t},get coneOuterGain(){return C.coneOuterGain},set coneOuterGain(t){if(t<0||t>1)throw e();C.coneOuterGain=t},get context(){return C.context},get distanceModel(){return C.distanceModel},set distanceModel(t){C.distanceModel=t},get inputs(){return[M]},get maxDistance(){return C.maxDistance},set maxDistance(t){if(t<0)throw new RangeError;C.maxDistance=t},get numberOfInputs(){return C.numberOfInputs},get numberOfOutputs(){return C.numberOfOutputs},get orientationX(){return D.gain},get orientationY(){return F.gain},get orientationZ(){return E.gain},get panningModel(){return C.panningModel},set panningModel(t){C.panningModel=t},get positionX(){return R.gain},get positionY(){return q.gain},get positionZ(){return N.gain},get refDistance(){return C.refDistance},set refDistance(t){if(t<0)throw new RangeError;C.refDistance=t},get rolloffFactor(){return C.rolloffFactor},set rolloffFactor(t){if(t<0)throw new RangeError;C.rolloffFactor=t},addEventListener:(...t)=>M.addEventListener(t[0],t[1],t[2]),dispatchEvent:(...t)=>M.dispatchEvent(t[0]),removeEventListener:(...t)=>M.removeEventListener(t[0],t[1],t[2])};u!==B.coneInnerAngle&&(B.coneInnerAngle=u),d!==B.coneOuterAngle&&(B.coneOuterAngle=d),p!==B.coneOuterGain&&(B.coneOuterGain=p),m!==B.distanceModel&&(B.distanceModel=m),f!==B.maxDistance&&(B.maxDistance=f),_!==B.orientationX.value&&(B.orientationX.value=_),g!==B.orientationY.value&&(B.orientationY.value=g),y!==B.orientationZ.value&&(B.orientationZ.value=y),v!==B.panningModel&&(B.panningModel=v),x!==B.positionX.value&&(B.positionX.value=x),b!==B.positionY.value&&(B.positionY.value=b),T!==B.positionZ.value&&(B.positionZ.value=T),w!==B.refDistance&&(B.refDistance=w),S!==B.rolloffFactor&&(B.rolloffFactor=S),1===V[0]&&0===V[1]&&0===V[2]||C.setOrientation(...V),0===L[0]&&0===L[1]&&0===L[2]||C.setPosition(...L);return h(interceptConnections(B,C),()=>{M.connect(C),t(M,I,0,0),I.connect(D).connect(O,0,0),I.connect(F).connect(O,0,1),I.connect(E).connect(O,0,2),I.connect(R).connect(O,0,3),I.connect(q).connect(O,0,4),I.connect(N).connect(O,0,5),O.connect(P).connect(l.destination)},()=>{M.disconnect(C),a(M,I,0,0),I.disconnect(D),D.disconnect(O),I.disconnect(F),F.disconnect(O),I.disconnect(E),E.disconnect(O),I.disconnect(R),R.disconnect(O),I.disconnect(q),q.disconnect(O),I.disconnect(N),N.disconnect(O),O.disconnect(P),P.disconnect(l.destination)})})(connectNativeAudioNodeToNativeAudioNode,createInvalidStateError,ue,createNativeGainNode,createNativeScriptProcessorNode,Ue,createNotSupportedError,disconnectNativeAudioNodeFromNativeAudioNode,getFirstSample,ae),Ze=(Xe=Qe,(t,e)=>{const s=t.createPanner();return void 0===s.orientationX?Xe(t,e):(assignNativeAudioNodeOptions(s,e),assignNativeAudioNodeAudioParamValue(s,e,"orientationX"),assignNativeAudioNodeAudioParamValue(s,e,"orientationY"),assignNativeAudioNodeAudioParamValue(s,e,"orientationZ"),assignNativeAudioNodeAudioParamValue(s,e,"positionX"),assignNativeAudioNodeAudioParamValue(s,e,"positionY"),assignNativeAudioNodeAudioParamValue(s,e,"positionZ"),assignNativeAudioNodeOption(s,e,"coneInnerAngle"),assignNativeAudioNodeOption(s,e,"coneOuterAngle"),assignNativeAudioNodeOption(s,e,"coneOuterGain"),assignNativeAudioNodeOption(s,e,"distanceModel"),assignNativeAudioNodeOption(s,e,"maxDistance"),assignNativeAudioNodeOption(s,e,"panningModel"),assignNativeAudioNodeOption(s,e,"refDistance"),assignNativeAudioNodeOption(s,e,"rolloffFactor"),s)});var Xe;const Ye=((t,e,s,n,i,o,r,a,c,h)=>()=>{const l=new WeakMap;let u=null;return{render(d,p){const m=l.get(p);return void 0!==m?Promise.resolve(m):(async(d,p)=>{let m=null,f=o(d);const _={channelCount:f.channelCount,channelCountMode:f.channelCountMode,channelInterpretation:f.channelInterpretation},g={..._,coneInnerAngle:f.coneInnerAngle,coneOuterAngle:f.coneOuterAngle,coneOuterGain:f.coneOuterGain,distanceModel:f.distanceModel,maxDistance:f.maxDistance,panningModel:f.panningModel,refDistance:f.refDistance,rolloffFactor:f.rolloffFactor},y=isOwnedByContext(f,p);if("bufferSize"in f)m=n(p,{..._,gain:1});else if(!y){const t={...g,orientationX:f.orientationX.value,orientationY:f.orientationY.value,orientationZ:f.orientationZ.value,positionX:f.positionX.value,positionY:f.positionY.value,positionZ:f.positionZ.value};f=i(p,t)}if(l.set(p,null===m?f:m),null!==m){if(null===u){if(null===r)throw new Error("Missing the native OfflineAudioContext constructor.");const t=new r(6,d.context.length,p.sampleRate),n=e(t,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:6});n.connect(t.destination),u=(async()=>{const e=await Promise.all([d.orientationX,d.orientationY,d.orientationZ,d.positionX,d.positionY,d.positionZ].map(async(e,n)=>{const i=s(t,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:0===n?1:0});return await a(t,e,i.offset),i}));for(let t=0;t<6;t+=1)e[t].connect(n,0,t),e[t].start(0);return h(t)})()}const t=await u,o=n(p,{..._,gain:1});await c(d,p,o);const l=[];for(let e=0;e<t.numberOfChannels;e+=1)l.push(t.getChannelData(e));let f=[l[0][0],l[1][0],l[2][0]],y=[l[3][0],l[4][0],l[5][0]],v=n(p,{..._,gain:1}),x=i(p,{...g,orientationX:f[0],orientationY:f[1],orientationZ:f[2],positionX:y[0],positionY:y[1],positionZ:y[2]});o.connect(v).connect(x.inputs[0]),x.connect(m);for(let e=128;e<t.length;e+=128){const t=[l[0][e],l[1][e],l[2][e]],s=[l[3][e],l[4][e],l[5][e]];if(t.some((t,e)=>t!==f[e])||s.some((t,e)=>t!==y[e])){f=t,y=s;const r=e/p.sampleRate;v.gain.setValueAtTime(0,r),v=n(p,{..._,gain:0}),x=i(p,{...g,orientationX:f[0],orientationY:f[1],orientationZ:f[2],positionX:y[0],positionY:y[1],positionZ:y[2]}),v.gain.setValueAtTime(1,r),o.connect(v).connect(x.inputs[0]),x.connect(m)}}return m}return y?(await t(p,d.orientationX,f.orientationX),await t(p,d.orientationY,f.orientationY),await t(p,d.orientationZ,f.orientationZ),await t(p,d.positionX,f.positionX),await t(p,d.positionY,f.positionY),await t(p,d.positionZ,f.positionZ)):(await a(p,d.orientationX,f.orientationX),await a(p,d.orientationY,f.orientationY),await a(p,d.orientationZ,f.orientationZ),await a(p,d.positionX,f.positionX),await a(p,d.positionY,f.positionY),await a(p,d.positionZ,f.positionZ)),isNativeAudioNodeFaker(f)?await c(d,p,f.inputs[0]):await c(d,p,f),f})(d,p)}}})(jt,ue,ge,createNativeGainNode,Ze,getNativeAudioNode,ht,zt,st,Ee),$e=((t,e,s,n,i,o,r)=>class PannerNode extends t{constructor(t,a){const c=i(t),h={...N,...a},l=s(c,h),u=o(c);super(t,!1,l,u?n():null),this._nativePannerNode=l,this._orientationX=e(this,u,l.orientationX,x,v),this._orientationY=e(this,u,l.orientationY,x,v),this._orientationZ=e(this,u,l.orientationZ,x,v),this._positionX=e(this,u,l.positionX,x,v),this._positionY=e(this,u,l.positionY,x,v),this._positionZ=e(this,u,l.positionZ,x,v),r(this,1)}get coneInnerAngle(){return this._nativePannerNode.coneInnerAngle}set coneInnerAngle(t){this._nativePannerNode.coneInnerAngle=t}get coneOuterAngle(){return this._nativePannerNode.coneOuterAngle}set coneOuterAngle(t){this._nativePannerNode.coneOuterAngle=t}get coneOuterGain(){return this._nativePannerNode.coneOuterGain}set coneOuterGain(t){this._nativePannerNode.coneOuterGain=t}get distanceModel(){return this._nativePannerNode.distanceModel}set distanceModel(t){this._nativePannerNode.distanceModel=t}get maxDistance(){return this._nativePannerNode.maxDistance}set maxDistance(t){this._nativePannerNode.maxDistance=t}get orientationX(){return this._orientationX}get orientationY(){return this._orientationY}get orientationZ(){return this._orientationZ}get panningModel(){return this._nativePannerNode.panningModel}set panningModel(t){this._nativePannerNode.panningModel=t}get positionX(){return this._positionX}get positionY(){return this._positionY}get positionZ(){return this._positionZ}get refDistance(){return this._nativePannerNode.refDistance}set refDistance(t){this._nativePannerNode.refDistance=t}get rolloffFactor(){return this._nativePannerNode.rolloffFactor}set rolloffFactor(t){this._nativePannerNode.rolloffFactor=t}})(Tt,Qt,Ze,Ye,at,ut,Ht),He=(t=>(e,{disableNormalization:s,imag:n,real:i})=>{const o=n instanceof Float32Array?n:new Float32Array(n),r=i instanceof Float32Array?i:new Float32Array(i),a=e.createPeriodicWave(r,o,{disableNormalization:s});if(Array.from(n).length<2)throw t();return a})(createIndexSizeError),Je=((t,e,s,n)=>class PeriodicWave{constructor(i,o){const r=e(i),a=n({...P,...o}),c=t(r,a);return s.add(c),c}static[Symbol.hasInstance](t){return null!==t&&"object"==typeof t&&Object.getPrototypeOf(t)===PeriodicWave.prototype||s.has(t)}})(He,at,new WeakSet,t=>{const{imag:e,real:s}=t;return void 0===e?void 0===s?{...t,imag:[0,0],real:[0,0]}:{...t,imag:Array.from(s,()=>0),real:s}:void 0===s?{...t,imag:e,real:Array.from(e,()=>0)}:{...t,imag:e,real:s}}),Ke=((t,e,s,n,i,o)=>{const r=16385,a=new Float32Array([1,1]),c=Math.PI/2,h={channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete"},l={...h,oversample:"none"},buildInternalGraph=(t,o,u,d,p)=>{if(1===o)return((t,e,i,o)=>{const u=new Float32Array(r),d=new Float32Array(r);for(let s=0;s<r;s+=1){const t=s/16384*c;u[s]=Math.cos(t),d[s]=Math.sin(t)}const p=s(t,{...h,gain:0}),m=n(t,{...l,curve:u}),f=n(t,{...l,curve:a}),_=s(t,{...h,gain:0}),g=n(t,{...l,curve:d});return{connectGraph(){e.connect(p),e.connect(void 0===f.inputs?f:f.inputs[0]),e.connect(_),f.connect(i),i.connect(void 0===m.inputs?m:m.inputs[0]),i.connect(void 0===g.inputs?g:g.inputs[0]),m.connect(p.gain),g.connect(_.gain),p.connect(o,0,0),_.connect(o,0,1)},disconnectGraph(){e.disconnect(p),e.disconnect(void 0===f.inputs?f:f.inputs[0]),e.disconnect(_),f.disconnect(i),i.disconnect(void 0===m.inputs?m:m.inputs[0]),i.disconnect(void 0===g.inputs?g:g.inputs[0]),m.disconnect(p.gain),g.disconnect(_.gain),p.disconnect(o,0,0),_.disconnect(o,0,1)}}})(t,u,d,p);if(2===o)return((t,i,o,u)=>{const d=new Float32Array(r),p=new Float32Array(r),m=new Float32Array(r),f=new Float32Array(r),_=Math.floor(8192.5);for(let e=0;e<r;e+=1)if(e>_){const t=(e-_)/(16384-_)*c;d[e]=Math.cos(t),p[e]=Math.sin(t),m[e]=0,f[e]=1}else{const t=e/(16384-_)*c;d[e]=1,p[e]=0,m[e]=Math.cos(t),f[e]=Math.sin(t)}const g=e(t,{channelCount:2,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:2}),y=s(t,{...h,gain:0}),v=n(t,{...l,curve:d}),x=s(t,{...h,gain:0}),b=n(t,{...l,curve:p}),T=n(t,{...l,curve:a}),w=s(t,{...h,gain:0}),S=n(t,{...l,curve:m}),A=s(t,{...h,gain:0}),C=n(t,{...l,curve:f});return{connectGraph(){i.connect(g),i.connect(void 0===T.inputs?T:T.inputs[0]),g.connect(y,0),g.connect(x,0),g.connect(w,1),g.connect(A,1),T.connect(o),o.connect(void 0===v.inputs?v:v.inputs[0]),o.connect(void 0===b.inputs?b:b.inputs[0]),o.connect(void 0===S.inputs?S:S.inputs[0]),o.connect(void 0===C.inputs?C:C.inputs[0]),v.connect(y.gain),b.connect(x.gain),S.connect(w.gain),C.connect(A.gain),y.connect(u,0,0),w.connect(u,0,0),x.connect(u,0,1),A.connect(u,0,1)},disconnectGraph(){i.disconnect(g),i.disconnect(void 0===T.inputs?T:T.inputs[0]),g.disconnect(y,0),g.disconnect(x,0),g.disconnect(w,1),g.disconnect(A,1),T.disconnect(o),o.disconnect(void 0===v.inputs?v:v.inputs[0]),o.disconnect(void 0===b.inputs?b:b.inputs[0]),o.disconnect(void 0===S.inputs?S:S.inputs[0]),o.disconnect(void 0===C.inputs?C:C.inputs[0]),v.disconnect(y.gain),b.disconnect(x.gain),S.disconnect(w.gain),C.disconnect(A.gain),y.disconnect(u,0,0),w.disconnect(u,0,0),x.disconnect(u,0,1),A.disconnect(u,0,1)}}})(t,u,d,p);throw i()};return(e,{channelCount:n,channelCountMode:r,pan:a,...c})=>{if("max"===r)throw i();const h=t(e,{...c,channelCount:1,channelCountMode:r,numberOfInputs:2}),l=s(e,{...c,channelCount:n,channelCountMode:r,gain:1}),u=s(e,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:a});let{connectGraph:d,disconnectGraph:p}=buildInternalGraph(e,n,l,u,h);Object.defineProperty(u.gain,"defaultValue",{get:()=>0}),Object.defineProperty(u.gain,"maxValue",{get:()=>1}),Object.defineProperty(u.gain,"minValue",{get:()=>-1});const m={get bufferSize(){},get channelCount(){return l.channelCount},set channelCount(t){l.channelCount!==t&&(f&&p(),({connectGraph:d,disconnectGraph:p}=buildInternalGraph(e,t,l,u,h)),f&&d()),l.channelCount=t},get channelCountMode(){return l.channelCountMode},set channelCountMode(t){if("clamped-max"===t||"max"===t)throw i();l.channelCountMode=t},get channelInterpretation(){return l.channelInterpretation},set channelInterpretation(t){l.channelInterpretation=t},get context(){return l.context},get inputs(){return[l]},get numberOfInputs(){return l.numberOfInputs},get numberOfOutputs(){return l.numberOfOutputs},get pan(){return u.gain},addEventListener:(...t)=>l.addEventListener(t[0],t[1],t[2]),dispatchEvent:(...t)=>l.dispatchEvent(t[0]),removeEventListener:(...t)=>l.removeEventListener(t[0],t[1],t[2])};let f=!1;return o(interceptConnections(m,h),()=>{d(),f=!0},()=>{p(),f=!1})}})(ue,createNativeChannelSplitterNode,createNativeGainNode,Ue,createNotSupportedError,ae),ts=((t,e)=>(s,n)=>{const i=n.channelCountMode;if("clamped-max"===i)throw e();if(void 0===s.createStereoPanner)return t(s,n);const o=s.createStereoPanner();return assignNativeAudioNodeOptions(o,n),assignNativeAudioNodeAudioParamValue(o,n,"pan"),Object.defineProperty(o,"channelCountMode",{get:()=>i,set:t=>{if(t!==i)throw e()}}),o})(Ke,createNotSupportedError),es=((t,e,s,n,i)=>()=>{const o=new WeakMap;return{render(r,a){const c=o.get(a);return void 0!==c?Promise.resolve(c):(async(r,a)=>{let c=s(r);const h=isOwnedByContext(c,a);if(!h){const t={channelCount:c.channelCount,channelCountMode:c.channelCountMode,channelInterpretation:c.channelInterpretation,pan:c.pan.value};c=e(a,t)}return o.set(a,c),h?await t(a,r.pan,c.pan):await n(a,r.pan,c.pan),isNativeAudioNodeFaker(c)?await i(r,a,c.inputs[0]):await i(r,a,c),c})(r,a)}}})(jt,ts,getNativeAudioNode,zt,st),ss=((t,e,s,n,i,o)=>class StereoPannerNode extends t{constructor(t,r){const a=i(t),c={...I,...r},h=s(a,c),l=o(a);super(t,!1,h,l?n():null),this._pan=e(this,l,h.pan)}get pan(){return this._pan}})(Tt,Qt,ts,es,at,ut),ns=((t,e,s)=>()=>{const n=new WeakMap;return{render(i,o){const r=n.get(o);return void 0!==r?Promise.resolve(r):(async(i,o)=>{let r=e(i);if(!isOwnedByContext(r,o)){const e={channelCount:r.channelCount,channelCountMode:r.channelCountMode,channelInterpretation:r.channelInterpretation,curve:r.curve,oversample:r.oversample};r=t(o,e)}return n.set(o,r),isNativeAudioNodeFaker(r)?await s(i,o,r.inputs[0]):await s(i,o,r),r})(i,o)}}})(Ue,getNativeAudioNode,st),is=((t,e,s,n,i,o,r)=>class WaveShaperNode extends t{constructor(t,e){const a=i(t),c={...V,...e},h=s(a,c);super(t,!0,h,o(a)?n():null),this._isCurveNullified=!1,this._nativeWaveShaperNode=h,r(this,1)}get curve(){return this._isCurveNullified?null:this._nativeWaveShaperNode.curve}set curve(t){if(null===t)this._isCurveNullified=!0,this._nativeWaveShaperNode.curve=new Float32Array([0,0]);else{if(t.length<2)throw e();this._isCurveNullified=!1,this._nativeWaveShaperNode.curve=t}}get oversample(){return this._nativeWaveShaperNode.oversample}set oversample(t){this._nativeWaveShaperNode.oversample=t}})(Tt,createInvalidStateError,Ue,ns,at,ut,Ht),os=(t=>null!==t&&t.isSecureContext)($),rs=(t=>(e,s,n)=>{Object.defineProperties(t,{currentFrame:{configurable:!0,get:()=>Math.round(e*s)},currentTime:{configurable:!0,get:()=>e}});try{return n()}finally{null!==t&&(delete t.currentFrame,delete t.currentTime)}})($),as=new WeakMap,cs=((t,e)=>s=>{let n=t.get(s);if(void 0!==n)return n;if(null===e)throw new Error("Missing the native OfflineAudioContext constructor.");return n=new e(1,1,44100),t.set(s,n),n})(as,ht),hs=os?((t,e,s,n,i,o,r,a,c,h,l,u,d)=>{let m=0;return(f,_,g={credentials:"omit"})=>{const y=l.get(f);if(void 0!==y&&y.has(_))return Promise.resolve();const v=h.get(f);if(void 0!==v){const t=v.get(_);if(void 0!==t)return t}const x=o(f),b=void 0===x.audioWorklet?i(_).then(([t,e])=>{const[n,i]=splitImportStatements(t,e);return s(`${n};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${i}\n})})(window,'_AWGS')`)}).then(()=>{const t=d._AWGS.pop();if(void 0===t)throw new SyntaxError;n(x.currentTime,x.sampleRate,()=>t(class AudioWorkletProcessor{},void 0,(t,s)=>{if(""===t.trim())throw e();const n=p.get(x);if(void 0!==n){if(n.has(t))throw e();verifyProcessorCtor(s),verifyParameterDescriptors(s.parameterDescriptors),n.set(t,s)}else verifyProcessorCtor(s),verifyParameterDescriptors(s.parameterDescriptors),p.set(x,new Map([[t,s]]))},x.sampleRate,void 0,void 0))}):Promise.all([i(_),Promise.resolve(t(u,u))]).then(([[t,e],s])=>{const n=m+1;m=n;const[i,o]=splitImportStatements(t,e),h=new Blob([`${i};((AudioWorkletProcessor,registerProcessor)=>{${o}\n})(${s?"AudioWorkletProcessor":"class extends AudioWorkletProcessor {__b=new WeakSet();constructor(){super();(p=>p.postMessage=(q=>(m,t)=>q.call(p,m,t?t.filter(u=>!this.__b.has(u)):t))(p.postMessage))(this.port)}}"},(n,p)=>registerProcessor(n,class extends p{${s?"":"__c = (a) => a.forEach(e=>this.__b.add(e.buffer));"}process(i,o,p){${s?"":"i.forEach(this.__c);o.forEach(this.__c);this.__c(Object.values(p));"}return super.process(i.map(j=>j.some(k=>k.length===0)?[]:j),o,p)}}));registerProcessor('__sac${n}',class extends AudioWorkletProcessor{process(){return !1}})`],{type:"application/javascript; charset=utf-8"}),l=URL.createObjectURL(h);return x.audioWorklet.addModule(l,g).then(()=>{if(a(x))return x;const t=r(x);return t.audioWorklet.addModule(l,g).then(()=>t)}).then(t=>{if(null===c)throw new SyntaxError;try{new c(t,`__sac${n}`)}catch{throw new SyntaxError}}).finally(()=>URL.revokeObjectURL(l))});return void 0===v?h.set(f,new Map([[_,b]])):v.set(_,b),b.then(()=>{const t=l.get(f);void 0===t?l.set(f,new Set([_])):t.add(_)}).finally(()=>{const t=h.get(f);void 0!==t&&t.delete(_)}),b}})(Z,createNotSupportedError,(t=>e=>new Promise((s,n)=>{if(null===t)return void n(new SyntaxError);const i=t.document.head;if(null===i)n(new SyntaxError);else{const o=t.document.createElement("script"),r=new Blob([e],{type:"application/javascript"}),a=URL.createObjectURL(r),c=t.onerror,removeErrorEventListenerAndRevokeUrl=()=>{t.onerror=c,URL.revokeObjectURL(a)};t.onerror=(e,s,i,o,r)=>s===a||s===t.location.href&&1===i&&1===o?(removeErrorEventListenerAndRevokeUrl(),n(r),!1):null!==c?c(e,s,i,o,r):void 0,o.onerror=()=>{removeErrorEventListenerAndRevokeUrl(),n(new SyntaxError)},o.onload=()=>{removeErrorEventListenerAndRevokeUrl(),s()},o.src=a,o.type="module",i.appendChild(o)}}))($),rs,(ls=()=>new DOMException("","AbortError"),async t=>{try{const e=await fetch(t);if(e.ok)return[await e.text(),e.url]}catch{}throw ls()}),at,cs,ut,bt,new WeakMap,new WeakMap,((t,e)=>async()=>{if(null===t)return!0;if(null===e)return!1;const s=new Blob(['class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor("a",A)'],{type:"application/javascript; charset=utf-8"}),n=new e(1,128,44100),i=URL.createObjectURL(s);let o=!1,r=!1;try{await n.audioWorklet.addModule(i);const e=new t(n,"a",{numberOfOutputs:0}),s=n.createOscillator();e.port.onmessage=()=>o=!0,e.onprocessorerror=()=>r=!0,s.connect(e),s.start(0),await n.startRendering(),await new Promise(t=>setTimeout(t))}catch{}finally{URL.revokeObjectURL(i)}return o&&!r})(bt,ht),$):void 0;var ls;const us=((t,e)=>s=>t(s)||e(s))(gt,ut),ds=((t,e,s,n,i,o,r,a,c,h,l)=>(u,d)=>{const p=r(u)?u:o(u);if(i.has(d)){const t=s();return Promise.reject(t)}try{i.add(d)}catch{}return e(c,()=>c(p))?p.decodeAudioData(d).then(s=>(detachArrayBuffer(d).catch(()=>{}),e(a,()=>a(s))||l(s),t.add(s),s)):new Promise((e,s)=>{const complete=async()=>{try{await detachArrayBuffer(d)}catch{}},fail=t=>{s(t),complete()};try{p.decodeAudioData(d,s=>{"function"!=typeof s.copyFromChannel&&(h(s),wrapAudioBufferGetChannelDataMethod(s)),t.add(s),complete().then(()=>e(s))},t=>{fail(null===t?n():t)})}catch(i){fail(i)}})})(At,Z,()=>new DOMException("","DataCloneError"),()=>new DOMException("","EncodingError"),new WeakSet,at,us,testAudioBufferCopyChannelMethodsOutOfBoundsSupport,testPromiseSupport,Mt,Dt),ps=(ms=hs,fs=St,_s=Et,gs=Xt,ys=Jt,vs=pe,xs=fe,bs=ve,Ts=Te,ws=ds,Ss=Se,As=Oe,Cs=De,ks=Ne,Os=Ve,Ms=Be,Ds=$e,Fs=Je,Es=ss,Rs=is,class BaseAudioContext extends Os{constructor(t,e){super(t,e),this._nativeContext=t,this._audioWorklet=void 0===ms?void 0:{addModule:(t,e)=>ms(this,t,e)}}get audioWorklet(){return this._audioWorklet}createAnalyser(){return new fs(this)}createBiquadFilter(){return new ys(this)}createBuffer(t,e,s){return new _s({length:e,numberOfChannels:t,sampleRate:s})}createBufferSource(){return new gs(this)}createChannelMerger(t=6){return new vs(this,{numberOfInputs:t})}createChannelSplitter(t=6){return new xs(this,{numberOfOutputs:t})}createConstantSource(){return new bs(this)}createConvolver(){return new Ts(this)}createDelay(t=1){return new Ss(this,{maxDelayTime:t})}createDynamicsCompressor(){return new As(this)}createGain(){return new Cs(this)}createIIRFilter(t,e){return new ks(this,{feedback:e,feedforward:t})}createOscillator(){return new Ms(this)}createPanner(){return new Ds(this)}createPeriodicWave(t,e,s={disableNormalization:!1}){return new Fs(this,{...s,imag:e,real:t})}createStereoPanner(){return new Es(this)}createWaveShaper(){return new Rs(this)}decodeAudioData(t,e,s){return ws(this._nativeContext,t).then(t=>("function"==typeof e&&e(t),t),t=>{throw"function"==typeof s&&s(t),t})}});var ms,fs,_s,gs,ys,vs,xs,bs,Ts,ws,Ss,As,Cs,ks,Os,Ms,Ds,Fs,Es,Rs;const qs=((t,e,s,n)=>class MediaElementAudioSourceNode extends t{constructor(t,i){const o=s(t),r=e(o,i);if(n(o))throw TypeError();super(t,!0,r,null),this._nativeMediaElementAudioSourceNode=r}get mediaElement(){return this._nativeMediaElementAudioSourceNode.mediaElement}})(Tt,(t,e)=>t.createMediaElementSource(e.mediaElement),at,ut),Ns=((t,e,s,n)=>class MediaStreamAudioDestinationNode extends t{constructor(t,i){const o=s(t);if(n(o))throw new TypeError;const r={...E,...i},a=e(o,r);super(t,!1,a,null),this._nativeMediaStreamAudioDestinationNode=a}get stream(){return this._nativeMediaStreamAudioDestinationNode.stream}})(Tt,(t,e)=>{const s=t.createMediaStreamDestination();return assignNativeAudioNodeOptions(s,e),1===s.numberOfOutputs&&Object.defineProperty(s,"numberOfOutputs",{get:()=>0}),s},at,ut),Ps=((t,e,s,n)=>class MediaStreamAudioSourceNode extends t{constructor(t,i){const o=s(t),r=e(o,i);if(n(o))throw new TypeError;super(t,!0,r,null),this._nativeMediaStreamAudioSourceNode=r}get mediaStream(){return this._nativeMediaStreamAudioSourceNode.mediaStream}})(Tt,(t,{mediaStream:e})=>{const s=e.getAudioTracks();s.sort((t,e)=>t.id<e.id?-1:t.id>e.id?1:0);const n=s.slice(0,1),i=t.createMediaStreamSource(new MediaStream(n));return Object.defineProperty(i,"mediaStream",{value:e}),i},at,ut),Is=((t,e)=>(s,{mediaStreamTrack:n})=>{if("function"==typeof s.createMediaStreamTrackSource)return s.createMediaStreamTrackSource(n);const i=new MediaStream([n]),o=s.createMediaStreamSource(i);if("audio"!==n.kind)throw t();if(e(s))throw new TypeError;return o})(createInvalidStateError,ut),Vs=((t,e,s)=>class MediaStreamTrackAudioSourceNode extends t{constructor(t,n){const i=s(t);super(t,!0,e(i,n),null)}})(Tt,Is,at),Ls=((t,e,s,n,i,o,r,a,c)=>class AudioContext extends t{constructor(t={}){if(null===c)throw new Error("Missing the native AudioContext constructor.");let e;try{e=new c(t)}catch(r){if(12===r.code&&"sampleRate is not in range"===r.message)throw s();throw r}if(null===e)throw n();if(!(t=>void 0===t||"number"==typeof t||"string"==typeof t&&("balanced"===t||"interactive"===t||"playback"===t))(t.latencyHint))throw new TypeError(`The provided value '${t.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);if(void 0!==t.sampleRate&&e.sampleRate!==t.sampleRate)throw s();super(e,2);const{latencyHint:i}=t,{sampleRate:o}=e;if(this._baseLatency="number"==typeof e.baseLatency?e.baseLatency:"balanced"===i?512/o:"interactive"===i||void 0===i?256/o:"playback"===i?1024/o:128*Math.max(2,Math.min(128,Math.round(i*o/128)))/o,this._nativeAudioContext=e,"webkitAudioContext"===c.name?(this._nativeGainNode=e.createGain(),this._nativeOscillatorNode=e.createOscillator(),this._nativeGainNode.gain.value=1e-37,this._nativeOscillatorNode.connect(this._nativeGainNode).connect(e.destination),this._nativeOscillatorNode.start()):(this._nativeGainNode=null,this._nativeOscillatorNode=null),this._state=null,"running"===e.state){this._state="suspended";const revokeState=()=>{"suspended"===this._state&&(this._state=null),e.removeEventListener("statechange",revokeState)};e.addEventListener("statechange",revokeState)}}get baseLatency(){return this._baseLatency}get state(){return null!==this._state?this._state:this._nativeAudioContext.state}close(){return"closed"===this.state?this._nativeAudioContext.close().then(()=>{throw e()}):("suspended"===this._state&&(this._state=null),this._nativeAudioContext.close().then(()=>{null!==this._nativeGainNode&&null!==this._nativeOscillatorNode&&(this._nativeOscillatorNode.stop(),this._nativeGainNode.disconnect(),this._nativeOscillatorNode.disconnect()),deactivateAudioGraph(this)}))}createMediaElementSource(t){return new i(this,{mediaElement:t})}createMediaStreamDestination(){return new o(this)}createMediaStreamSource(t){return new r(this,{mediaStream:t})}createMediaStreamTrackSource(t){return new a(this,{mediaStreamTrack:t})}resume(){return"suspended"===this._state?new Promise((t,e)=>{const resolvePromise=()=>{this._nativeAudioContext.removeEventListener("statechange",resolvePromise),"running"===this._nativeAudioContext.state?t():this.resume().then(t,e)};this._nativeAudioContext.addEventListener("statechange",resolvePromise)}):this._nativeAudioContext.resume().catch(t=>{if(void 0===t||15===t.code)throw e();throw t})}suspend(){return this._nativeAudioContext.suspend().catch(t=>{if(void 0===t)throw e();throw t})}})(ps,createInvalidStateError,createNotSupportedError,()=>new DOMException("","UnknownError"),qs,Ns,Ps,Vs,_t),js=(Bs=Ie,t=>{const e=Bs.get(t);if(void 0===e)throw new Error("The context has no set of AudioWorkletNodes.");return e});var Bs;const Ws=(Gs=js,(t,e)=>{Gs(t).add(e)});var Gs;const zs=(t=>(e,s,n=0,i=0)=>{const o=e[n];if(void 0===o)throw t();return isNativeAudioNode$1(s)?o.connect(s,0,i):o.connect(s,0)})(createIndexSizeError),Us=(t=>(e,s)=>{t(e).delete(s)})(js),Qs=(t=>(e,s=void 0,n=void 0,i=0)=>void 0===s?e.forEach(t=>t.disconnect()):"number"==typeof s?getOutputAudioNodeAtIndex(t,e,s).disconnect():isNativeAudioNode$1(s)?void 0===n?e.forEach(t=>t.disconnect(s)):void 0===i?getOutputAudioNodeAtIndex(t,e,n).disconnect(s,0):getOutputAudioNodeAtIndex(t,e,n).disconnect(s,0,i):void 0===n?e.forEach(t=>t.disconnect(s)):getOutputAudioNodeAtIndex(t,e,n).disconnect(s,0))(createIndexSizeError),Zs=new WeakMap,Xs=(Ys=Zs,$s=getValueForKey,t=>$s(Ys,t));var Ys,$s;const Hs=((t,e,s,n,i,o,r,a,c,h,l,u,d)=>(p,f,_,g)=>{if(0===g.numberOfInputs&&0===g.numberOfOutputs)throw c();const y=Array.isArray(g.outputChannelCount)?g.outputChannelCount:Array.from(g.outputChannelCount);if(y.some(t=>t<1))throw c();if(y.length!==g.numberOfOutputs)throw e();if("explicit"!==g.channelCountMode)throw c();const b=g.channelCount*g.numberOfInputs,T=y.reduce((t,e)=>t+e,0),w=void 0===_.parameterDescriptors?0:_.parameterDescriptors.length;if(b+w>6||T>6)throw c();const S=new MessageChannel,A=[],C=[];for(let t=0;t<g.numberOfInputs;t+=1)A.push(r(p,{channelCount:g.channelCount,channelCountMode:g.channelCountMode,channelInterpretation:g.channelInterpretation,gain:1})),C.push(i(p,{channelCount:g.channelCount,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:g.channelCount}));const k=[];if(void 0!==_.parameterDescriptors)for(const{defaultValue:t,maxValue:e,minValue:s,name:n}of _.parameterDescriptors){const i=o(p,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:void 0!==g.parameterData[n]?g.parameterData[n]:void 0===t?0:t});Object.defineProperties(i.offset,{defaultValue:{get:()=>void 0===t?0:t},maxValue:{get:()=>void 0===e?x:e},minValue:{get:()=>void 0===s?v:s}}),k.push(i)}const O=n(p,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:Math.max(1,b+w)}),M=computeBufferSize(f,p.sampleRate),D=a(p,M,b+w,Math.max(1,T)),F=i(p,{channelCount:Math.max(1,T),channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:Math.max(1,T)}),E=[];for(let t=0;t<g.numberOfOutputs;t+=1)E.push(n(p,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:y[t]}));for(let t=0;t<g.numberOfInputs;t+=1){A[t].connect(C[t]);for(let e=0;e<g.channelCount;e+=1)C[t].connect(O,e,t*g.channelCount+e)}const R=new ReadOnlyMap(void 0===_.parameterDescriptors?[]:_.parameterDescriptors.map(({name:t},e)=>{const s=k[e];return s.connect(O,0,b+e),s.start(0),[t,s.offset]}));O.connect(D);let q=g.channelInterpretation,N=null;const P=0===g.numberOfOutputs?[D]:E,I={get bufferSize(){return M},get channelCount(){return g.channelCount},set channelCount(t){throw s()},get channelCountMode(){return g.channelCountMode},set channelCountMode(t){throw s()},get channelInterpretation(){return q},set channelInterpretation(t){for(const e of A)e.channelInterpretation=t;q=t},get context(){return D.context},get inputs(){return A},get numberOfInputs(){return g.numberOfInputs},get numberOfOutputs(){return g.numberOfOutputs},get onprocessorerror(){return N},set onprocessorerror(t){"function"==typeof N&&I.removeEventListener("processorerror",N),N="function"==typeof t?t:null,"function"==typeof N&&I.addEventListener("processorerror",N)},get parameters(){return R},get port(){return S.port2},addEventListener:(...t)=>D.addEventListener(t[0],t[1],t[2]),connect:t.bind(null,P),disconnect:h.bind(null,P),dispatchEvent:(...t)=>D.dispatchEvent(t[0]),removeEventListener:(...t)=>D.removeEventListener(t[0],t[1],t[2])},V=new Map;S.port1.addEventListener=(t=>(...e)=>{if("message"===e[0]){const t="function"==typeof e[1]?e[1]:"object"==typeof e[1]&&null!==e[1]&&"function"==typeof e[1].handleEvent?e[1].handleEvent:null;if(null!==t){const s=V.get(e[1]);void 0!==s?e[1]=s:(e[1]=e=>{l(p.currentTime,p.sampleRate,()=>t(e))},V.set(t,e[1]))}}return t.call(S.port1,e[0],e[1],e[2])})(S.port1.addEventListener),S.port1.removeEventListener=(t=>(...e)=>{if("message"===e[0]){const t=V.get(e[1]);void 0!==t&&(V.delete(e[1]),e[1]=t)}return t.call(S.port1,e[0],e[1],e[2])})(S.port1.removeEventListener);let L=null;Object.defineProperty(S.port1,"onmessage",{get:()=>L,set:t=>{"function"==typeof L&&S.port1.removeEventListener("message",L),L="function"==typeof t?t:null,"function"==typeof L&&(S.port1.addEventListener("message",L),S.port1.start())}}),_.prototype.port=S.port1;let j=null;const B=((t,e,s,n)=>{let i=m.get(t);void 0===i&&(i=new WeakMap,m.set(t,i));const o=createAudioWorkletProcessorPromise(s,n);return i.set(e,o),o})(p,I,_,g);B.then(t=>j=t);const W=createNestedArrays(g.numberOfInputs,g.channelCount),G=createNestedArrays(g.numberOfOutputs,y),z=void 0===_.parameterDescriptors?[]:_.parameterDescriptors.reduce((t,{name:e})=>({...t,[e]:new Float32Array(128)}),{});let U=!0;const disconnectOutputsGraph=()=>{g.numberOfOutputs>0&&D.disconnect(F);for(let t=0,e=0;t<g.numberOfOutputs;t+=1){const s=E[t];for(let n=0;n<y[t];n+=1)F.disconnect(s,e+n,n);e+=y[t]}},Q=new Map;D.onaudioprocess=({inputBuffer:t,outputBuffer:e})=>{if(null!==j){const n=u(I);for(let i=0;i<M;i+=128){for(let e=0;e<g.numberOfInputs;e+=1)for(let s=0;s<g.channelCount;s+=1)copyFromChannel(t,W[e],s,s,i);void 0!==_.parameterDescriptors&&_.parameterDescriptors.forEach(({name:e},s)=>{copyFromChannel(t,z,e,b+s,i)});for(let t=0;t<g.numberOfInputs;t+=1)for(let e=0;e<y[t];e+=1)0===G[t][e].byteLength&&(G[t][e]=new Float32Array(128));try{const t=W.map((t,e)=>{if(n[e].size>0)return Q.set(e,M/128),t;const s=Q.get(e);return void 0===s?[]:(t.every(t=>t.every(t=>0===t))&&(1===s?Q.delete(e):Q.set(e,s-1)),t)}),s=l(p.currentTime+i/p.sampleRate,p.sampleRate,()=>j.process(t,G,z));U=s;for(let n=0,o=0;n<g.numberOfOutputs;n+=1){for(let t=0;t<y[n];t+=1)copyToChannel(e,G[n],t,o+t,i);o+=y[n]}}catch(s){U=!1,I.dispatchEvent(new ErrorEvent("processorerror",{colno:s.colno,filename:s.filename,lineno:s.lineno,message:s.message}))}if(!U){for(let t=0;t<g.numberOfInputs;t+=1){A[t].disconnect(C[t]);for(let e=0;e<g.channelCount;e+=1)C[i].disconnect(O,e,t*g.channelCount+e)}if(void 0!==_.parameterDescriptors){const t=_.parameterDescriptors.length;for(let e=0;e<t;e+=1){const t=k[e];t.disconnect(O,0,b+e),t.stop()}}O.disconnect(D),D.onaudioprocess=null,Z?disconnectOutputsGraph():disconnectFakeGraph();break}}}};let Z=!1;const X=r(p,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0}),connectFakeGraph=()=>D.connect(X).connect(p.destination),disconnectFakeGraph=()=>{D.disconnect(X),X.disconnect()};return connectFakeGraph(),d(I,()=>{if(U){disconnectFakeGraph(),g.numberOfOutputs>0&&D.connect(F);for(let t=0,e=0;t<g.numberOfOutputs;t+=1){const s=E[t];for(let n=0;n<y[t];n+=1)F.connect(s,e+n,n);e+=y[t]}}Z=!0},()=>{U&&(connectFakeGraph(),disconnectOutputsGraph()),Z=!1})})(zs,createIndexSizeError,createInvalidStateError,ue,createNativeChannelSplitterNode,ge,createNativeGainNode,createNativeScriptProcessorNode,createNotSupportedError,Qs,rs,Xs,ae),Js=((t,e,s,n,i)=>(o,r,a,c,h,l)=>{if(null!==a)try{const e=new a(o,c,l),n=new Map;let r=null;if(Object.defineProperties(e,{channelCount:{get:()=>l.channelCount,set:()=>{throw t()}},channelCountMode:{get:()=>"explicit",set:()=>{throw t()}},onprocessorerror:{get:()=>r,set:t=>{"function"==typeof r&&e.removeEventListener("processorerror",r),r="function"==typeof t?t:null,"function"==typeof r&&e.addEventListener("processorerror",r)}}}),e.addEventListener=(t=>(...s)=>{if("processorerror"===s[0]){const t="function"==typeof s[1]?s[1]:"object"==typeof s[1]&&null!==s[1]&&"function"==typeof s[1].handleEvent?s[1].handleEvent:null;if(null!==t){const e=n.get(s[1]);void 0!==e?s[1]=e:(s[1]=e=>{"error"===e.type?(Object.defineProperties(e,{type:{value:"processorerror"}}),t(e)):t(new ErrorEvent(s[0],{...e}))},n.set(t,s[1]))}}return t.call(e,"error",s[1],s[2]),t.call(e,...s)})(e.addEventListener),e.removeEventListener=(t=>(...s)=>{if("processorerror"===s[0]){const t=n.get(s[1]);void 0!==t&&(n.delete(s[1]),s[1]=t)}return t.call(e,"error",s[1],s[2]),t.call(e,s[0],s[1],s[2])})(e.removeEventListener),0!==l.numberOfOutputs){const t=s(o,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});e.connect(t).connect(o.destination);return i(e,()=>t.disconnect(),()=>t.connect(o.destination))}return e}catch(u){if(11===u.code)throw n();throw u}if(void 0===h)throw n();return(t=>{const{port1:e}=new MessageChannel;try{e.postMessage(t)}finally{e.close()}})(l),e(o,r,h,l)})(createInvalidStateError,Hs,createNativeGainNode,createNotSupportedError,ae),Ks=((t,e,s,n,i,o,r,a,c,h,l,u,d,p,m,f)=>(_,g,y)=>{const v=new WeakMap;let x=null;return{render(b,T){a(T,b);const w=v.get(T);return void 0!==w?Promise.resolve(w):(async(a,b)=>{let T=l(a),w=null;const S=isOwnedByContext(T,b),A=Array.isArray(g.outputChannelCount)?g.outputChannelCount:Array.from(g.outputChannelCount);if(null===u){const t=A.reduce((t,e)=>t+e,0),s=i(b,{channelCount:Math.max(1,t),channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:Math.max(1,t)}),o=[];for(let e=0;e<a.numberOfOutputs;e+=1)o.push(n(b,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:A[e]}));const h=r(b,{channelCount:g.channelCount,channelCountMode:g.channelCountMode,channelInterpretation:g.channelInterpretation,gain:1});h.connect=e.bind(null,o),h.disconnect=c.bind(null,o),w=[s,o,h]}else S||(T=new u(b,_));if(v.set(b,null===w?T:w[2]),null!==w){if(null===x){if(void 0===y)throw new Error("Missing the processor constructor.");if(null===d)throw new Error("Missing the native OfflineAudioContext constructor.");const t=a.channelCount*a.numberOfInputs,e=void 0===y.parameterDescriptors?0:y.parameterDescriptors.length,s=t+e,renderBuffer=async()=>{const c=new d(s,128*Math.ceil(a.context.length/128),b.sampleRate),h=[],l=[];for(let t=0;t<g.numberOfInputs;t+=1)h.push(r(c,{channelCount:g.channelCount,channelCountMode:g.channelCountMode,channelInterpretation:g.channelInterpretation,gain:1})),l.push(i(c,{channelCount:g.channelCount,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:g.channelCount}));const u=await Promise.all(Array.from(a.parameters.values()).map(async t=>{const e=o(c,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:t.value});return await p(c,t,e.offset),e})),_=n(c,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:Math.max(1,t+e)});for(let t=0;t<g.numberOfInputs;t+=1){h[t].connect(l[t]);for(let e=0;e<g.channelCount;e+=1)l[t].connect(_,e,t*g.channelCount+e)}for(const[e,s]of u.entries())s.connect(_,0,t+e),s.start(0);return _.connect(c.destination),await Promise.all(h.map(t=>m(a,c,t))),f(c)};x=processBuffer(a,0===s?null:await renderBuffer(),b,g,A,y,h)}const t=await x,e=s(b,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}),[c,l,u]=w;null!==t&&(e.buffer=t,e.start(0)),e.connect(c);for(let s=0,n=0;s<a.numberOfOutputs;s+=1){const t=l[s];for(let e=0;e<A[s];e+=1)c.connect(t,n+e,e);n+=A[s]}return u}if(S)for(const[e,s]of a.parameters.entries())await t(b,s,T.parameters.get(e));else for(const[t,e]of a.parameters.entries())await p(b,e,T.parameters.get(t));return await m(a,b,T),T})(b,T)}}})(jt,zs,Wt,ue,createNativeChannelSplitterNode,ge,createNativeGainNode,Us,Qs,rs,getNativeAudioNode,bt,ht,zt,st,Ee),tn=(en=as,t=>en.get(t));var en;const sn=(t=>(e,s)=>{t.set(e,s)})(Zs),nn=os?((t,e,s,n,i,o,r,a,c,h,l,u,d,m)=>class AudioWorkletNode extends e{constructor(e,m,f){var _;const g=a(e),y=c(g),v=l({...T,...f});d(v);const x=p.get(g),b=null==x?void 0:x.get(m),w=y||"closed"!==g.state?g:null!==(_=r(g))&&void 0!==_?_:g,S=i(w,y?null:e.baseLatency,h,m,b,v);super(e,!0,S,y?n(m,v,b):null);const A=[];S.parameters.forEach((t,e)=>{const n=s(this,y,t);A.push([e,n])}),this._nativeAudioWorkletNode=S,this._onprocessorerror=null,this._parameters=new ReadOnlyMap(A),y&&t(g,this);const{activeInputs:C}=o(this);u(S,C)}get onprocessorerror(){return this._onprocessorerror}set onprocessorerror(t){const e="function"==typeof t?m(this,t):null;this._nativeAudioWorkletNode.onprocessorerror=e;const s=this._nativeAudioWorkletNode.onprocessorerror;this._onprocessorerror=null!==s&&s===e?t:s}get parameters(){return null===this._parameters?this._nativeAudioWorkletNode.parameters:this._parameters}get port(){return this._nativeAudioWorkletNode.port}})(Ws,Tt,Qt,Ks,Js,getAudioNodeConnections,tn,at,ut,bt,t=>({...t,outputChannelCount:void 0!==t.outputChannelCount?t.outputChannelCount:1===t.numberOfInputs&&1===t.numberOfOutputs?[t.channelCount]:Array.from({length:t.numberOfOutputs},()=>1)}),sn,t=>{const{port1:e,port2:s}=new MessageChannel;try{e.postMessage(t)}finally{e.close(),s.close()}},wrapEventListener):void 0,on=((t,e)=>(s,n,i)=>{if(null===e)throw new Error("Missing the native OfflineAudioContext constructor.");try{return new e(s,n,i)}catch(o){if("SyntaxError"===o.name)throw t();throw o}})(createNotSupportedError,ht),rn=((t,e,s,n,i,o,r,a)=>(c,h)=>s(c).render(c,h).then(()=>Promise.all(Array.from(n(h)).map(t=>s(t).render(t,h)))).then(()=>i(h)).then(s=>("function"!=typeof s.copyFromChannel?(r(s),wrapAudioBufferGetChannelDataMethod(s)):e(o,()=>o(s))||a(s),t.add(s),s)))(At,Z,tt,js,Ee,testAudioBufferCopyChannelMethodsOutOfBoundsSupport,Mt,Dt),an=((t,e,s,n,i)=>class OfflineAudioContext extends t{constructor(t,s,i){let o;if("number"==typeof t&&void 0!==s&&void 0!==i)o={length:s,numberOfChannels:t,sampleRate:i};else{if("object"!=typeof t)throw new Error("The given parameters are not valid.");o=t}const{length:r,numberOfChannels:a,sampleRate:c}={...R,...o},h=n(a,r,c);e(testPromiseSupport,()=>testPromiseSupport(h))||h.addEventListener("statechange",(()=>{let t=0;const delayStateChangeEvent=e=>{"running"===this._state&&(t>0?(h.removeEventListener("statechange",delayStateChangeEvent),e.stopImmediatePropagation(),this._waitForThePromiseToSettle(e)):t+=1)};return delayStateChangeEvent})()),super(h,a),this._length=r,this._nativeOfflineAudioContext=h,this._state=null}get length(){return void 0===this._nativeOfflineAudioContext.length?this._length:this._nativeOfflineAudioContext.length}get state(){return null===this._state?this._nativeOfflineAudioContext.state:this._state}startRendering(){return"running"===this._state?Promise.reject(s()):(this._state="running",i(this.destination,this._nativeOfflineAudioContext).finally(()=>{this._state=null,deactivateAudioGraph(this)}))}_waitForThePromiseToSettle(t){null===this._state?this._nativeOfflineAudioContext.dispatchEvent(t):setTimeout(()=>this._waitForThePromiseToSettle(t))}})(ps,Z,createInvalidStateError,on,rn),cn=((t,e)=>s=>{const n=t.get(s);return e(n)||e(s)})(l,gt),hn=(ln=a,un=vt,t=>ln.has(t)||un(t));var ln,un;const dn=(pn=h,mn=xt,t=>pn.has(t)||mn(t));var pn,mn;const fn=((t,e)=>s=>{const n=t.get(s);return e(n)||e(s)})(l,ut);function isUndef(t){return void 0===t}function isDefined(t){return void 0!==t}function isFunction(t){return"function"==typeof t}function isNumber(t){return"number"==typeof t}function isObject(t){return"[object Object]"===Object.prototype.toString.call(t)&&t.constructor===Object}function isBoolean(t){return"boolean"==typeof t}function isArray(t){return Array.isArray(t)}function isString(t){return"string"==typeof t}function isNote(t){return isString(t)&&/^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(t)}function assert(t,e){if(!t)throw new Error(e)}function assertRange(t,e,s=1/0){if(!(e<=t&&t<=s))throw new RangeError(`Value must be within [${e}, ${s}], got: ${t}`)}function assertContextRunning(t){t.isOffline||"running"===t.state||warn('The AudioContext is "suspended". Invoke Tone.start() from a user action to start the audio.')}let _n=!1,gn=!1;function enterScheduledCallback(t){_n=t}function assertUsedScheduleTime(t){isUndef(t)&&_n&&!gn&&(gn=!0,warn("Events scheduled inside of scheduled callbacks should use the passed in scheduling time. See https://github.com/Tonejs/Tone.js/wiki/Accurate-Timing"))}let yn=console;function log(...t){yn.log(...t)}function warn(...t){yn.warn(...t)}const vn=Object.freeze(Object.defineProperty({__proto__:null,assert:assert,assertContextRunning:assertContextRunning,assertRange:assertRange,assertUsedScheduleTime:assertUsedScheduleTime,enterScheduledCallback:enterScheduledCallback,log:log,setLogger:function setLogger(t){yn=t},warn:warn},Symbol.toStringTag,{value:"Module"}));const xn="object"==typeof self?self:null,bn=xn&&(xn.hasOwnProperty("AudioContext")||xn.hasOwnProperty("webkitAudioContext"));class Ticker{constructor(t,e,s,n){this._callback=t,this._type=e,this._minimumUpdateInterval=Math.max(128/(n||44100),.001),this.updateInterval=s,this._createClock()}_createWorker(){const t=new Blob([`\n\t\t\t// the initial timeout time\n\t\t\tlet timeoutTime =  ${(1e3*this._updateInterval).toFixed(1)};\n\t\t\t// onmessage callback\n\t\t\tself.onmessage = function(msg){\n\t\t\t\ttimeoutTime = parseInt(msg.data);\n\t\t\t};\n\t\t\t// the tick function which posts a message\n\t\t\t// and schedules a new tick\n\t\t\tfunction tick(){\n\t\t\t\tsetTimeout(tick, timeoutTime);\n\t\t\t\tself.postMessage('tick');\n\t\t\t}\n\t\t\t// call tick initially\n\t\t\ttick();\n\t\t\t`],{type:"text/javascript"}),e=URL.createObjectURL(t),s=new Worker(e);s.onmessage=this._callback.bind(this),this._worker=s}_createTimeout(){this._timeout=setTimeout(()=>{this._createTimeout(),this._callback()},1e3*this._updateInterval)}_createClock(){if("worker"===this._type)try{this._createWorker()}catch(t){this._type="timeout",this._createClock()}else"timeout"===this._type&&this._createTimeout()}_disposeClock(){this._timeout&&clearTimeout(this._timeout),this._worker&&(this._worker.terminate(),this._worker.onmessage=null)}get updateInterval(){return this._updateInterval}set updateInterval(t){var e;this._updateInterval=Math.max(t,this._minimumUpdateInterval),"worker"===this._type&&(null===(e=this._worker)||void 0===e||e.postMessage(1e3*this._updateInterval))}get type(){return this._type}set type(t){this._disposeClock(),this._type=t,this._createClock()}dispose(){this._disposeClock()}}function isAudioParam(t){return dn(t)}function isAudioNode(t){return hn(t)}function isOfflineAudioContext(t){return fn(t)}function isAudioContext(t){return cn(t)}function noCopy(t,e){return"value"===t||isAudioParam(e)||isAudioNode(e)||function isAudioBuffer(t){return t instanceof Et}(e)}function deepMerge(t,...e){if(!e.length)return t;const s=e.shift();if(isObject(t)&&isObject(s))for(const n in s)noCopy(n,s[n])?t[n]=s[n]:isObject(s[n])?(t[n]||Object.assign(t,{[n]:{}}),deepMerge(t[n],s[n])):Object.assign(t,{[n]:s[n]});return deepMerge(t,...e)}function optionsFromArguments(t,e,s=[],n){const i={},o=Array.from(e);if(isObject(o[0])&&n&&!Reflect.has(o[0],n)){Object.keys(o[0]).some(e=>Reflect.has(t,e))||(deepMerge(i,{[n]:o[0]}),s.splice(s.indexOf(n),1),o.shift())}if(1===o.length&&isObject(o[0]))deepMerge(i,o[0]);else for(let r=0;r<s.length;r++)isDefined(o[r])&&(i[s[r]]=o[r]);return deepMerge(t,i)}function defaultArg(t,e){return isUndef(t)?e:t}function omitFromObject(t,e){return e.forEach(e=>{Reflect.has(t,e)&&delete t[e]}),t}
/**
 * Tone.js
 * @author Yotam Mann
 * @license http://opensource.org/licenses/MIT MIT License
 * @copyright 2014-2024 Yotam Mann
 */let Tn=class Tone{constructor(){this.debug=!1,this._wasDisposed=!1}static getDefaults(){return{}}log(...t){(this.debug||xn&&this.toString()===xn.TONE_DEBUG_CLASS)&&log(this,...t)}dispose(){return this._wasDisposed=!0,this}get disposed(){return this._wasDisposed}toString(){return this.name}};Tn.version=i;const wn=1e-6;function GT(t,e){return t>e+wn}function GTE(t,e){return GT(t,e)||EQ(t,e)}function LT(t,e){return t+wn<e}function EQ(t,e){return Math.abs(t-e)<wn}function clamp(t,e,s){return Math.max(Math.min(t,s),e)}class Timeline extends Tn{constructor(){super(),this.name="Timeline",this._timeline=[];const t=optionsFromArguments(Timeline.getDefaults(),arguments,["memory"]);this.memory=t.memory,this.increasing=t.increasing}static getDefaults(){return{memory:1/0,increasing:!1}}get length(){return this._timeline.length}add(t){if(assert(Reflect.has(t,"time"),"Timeline: events must have a time attribute"),t.time=t.time.valueOf(),this.increasing&&this.length){const e=this._timeline[this.length-1];assert(GTE(t.time,e.time),"The time must be greater than or equal to the last scheduled time"),this._timeline.push(t)}else{const e=this._search(t.time);this._timeline.splice(e+1,0,t)}if(this.length>this.memory){const t=this.length-this.memory;this._timeline.splice(0,t)}return this}remove(t){const e=this._timeline.indexOf(t);return-1!==e&&this._timeline.splice(e,1),this}get(t,e="time"){const s=this._search(t,e);return-1!==s?this._timeline[s]:null}peek(){return this._timeline[0]}shift(){return this._timeline.shift()}getAfter(t,e="time"){const s=this._search(t,e);return s+1<this._timeline.length?this._timeline[s+1]:null}getBefore(t){const e=this._timeline.length;if(e>0&&this._timeline[e-1].time<t)return this._timeline[e-1];const s=this._search(t);return s-1>=0?this._timeline[s-1]:null}cancel(t){if(this._timeline.length>1){let e=this._search(t);if(e>=0)if(EQ(this._timeline[e].time,t)){for(let s=e;s>=0&&EQ(this._timeline[s].time,t);s--)e=s;this._timeline=this._timeline.slice(0,e)}else this._timeline=this._timeline.slice(0,e+1);else this._timeline=[]}else 1===this._timeline.length&&GTE(this._timeline[0].time,t)&&(this._timeline=[]);return this}cancelBefore(t){const e=this._search(t);return e>=0&&(this._timeline=this._timeline.slice(e+1)),this}previousEvent(t){const e=this._timeline.indexOf(t);return e>0?this._timeline[e-1]:null}_search(t,e="time"){if(0===this._timeline.length)return-1;let s=0;const n=this._timeline.length;let i=n;if(n>0&&this._timeline[n-1][e]<=t)return n-1;for(;s<i;){let n=Math.floor(s+(i-s)/2);const o=this._timeline[n],r=this._timeline[n+1];if(EQ(o[e],t)){for(let s=n;s<this._timeline.length;s++){if(!EQ(this._timeline[s][e],t))break;n=s}return n}if(LT(o[e],t)&&GT(r[e],t))return n;GT(o[e],t)?i=n:s=n+1}return-1}_iterate(t,e=0,s=this._timeline.length-1){this._timeline.slice(e,s+1).forEach(t)}forEach(t){return this._iterate(t),this}forEachBefore(t,e){const s=this._search(t);return-1!==s&&this._iterate(e,0,s),this}forEachAfter(t,e){const s=this._search(t);return this._iterate(e,s+1),this}forEachBetween(t,e,s){let n=this._search(t),i=this._search(e);return-1!==n&&-1!==i?(this._timeline[n].time!==t&&(n+=1),this._timeline[i].time===e&&(i-=1),this._iterate(s,n,i)):-1===n&&this._iterate(s,0,i),this}forEachFrom(t,e){let s=this._search(t);for(;s>=0&&this._timeline[s].time>=t;)s--;return this._iterate(e,s+1),this}forEachAtTime(t,e){const s=this._search(t);if(-1!==s&&EQ(this._timeline[s].time,t)){let n=s;for(let e=s;e>=0&&EQ(this._timeline[e].time,t);e--)n=e;this._iterate(t=>{e(t)},n,s)}return this}dispose(){return super.dispose(),this._timeline=[],this}}const Sn=[];function onContextInit(t){Sn.push(t)}const An=[];function onContextClose(t){An.push(t)}class Emitter extends Tn{constructor(){super(...arguments),this.name="Emitter"}on(t,e){return t.split(/\W+/).forEach(t=>{isUndef(this._events)&&(this._events={}),this._events.hasOwnProperty(t)||(this._events[t]=[]),this._events[t].push(e)}),this}once(t,e){const boundCallback=(...s)=>{e(...s),this.off(t,boundCallback)};return this.on(t,boundCallback),this}off(t,e){return t.split(/\W+/).forEach(t=>{if(isUndef(this._events)&&(this._events={}),this._events.hasOwnProperty(t))if(isUndef(e))this._events[t]=[];else{const s=this._events[t];for(let t=s.length-1;t>=0;t--)s[t]===e&&s.splice(t,1)}}),this}emit(t,...e){if(this._events&&this._events.hasOwnProperty(t)){const s=this._events[t].slice(0);for(let t=0,n=s.length;t<n;t++)s[t].apply(this,e)}return this}static mixin(t){["on","once","off","emit"].forEach(e=>{const s=Object.getOwnPropertyDescriptor(Emitter.prototype,e);Object.defineProperty(t.prototype,e,s)})}dispose(){return super.dispose(),this._events=void 0,this}}class BaseContext extends Emitter{constructor(){super(...arguments),this.isOffline=!1}toJSON(){return{}}}class Context extends BaseContext{constructor(){var t,e;super(),this.name="Context",this._constants=new Map,this._timeouts=new Timeline,this._timeoutIds=0,this._initialized=!1,this._closeStarted=!1,this.isOffline=!1,this._workletPromise=null;const s=optionsFromArguments(Context.getDefaults(),arguments,["context"]);s.context?(this._context=s.context,this._latencyHint=(null===(t=arguments[0])||void 0===t?void 0:t.latencyHint)||""):(this._context=function createAudioContext(t){return new Ls(t)}({latencyHint:s.latencyHint}),this._latencyHint=s.latencyHint),this._ticker=new Ticker(this.emit.bind(this,"tick"),s.clockSource,s.updateInterval,this._context.sampleRate),this.on("tick",this._timeoutLoop.bind(this)),this._context.onstatechange=()=>{this.emit("statechange",this.state)},this[(null===(e=arguments[0])||void 0===e?void 0:e.hasOwnProperty("updateInterval"))?"_lookAhead":"lookAhead"]=s.lookAhead}static getDefaults(){return{clockSource:"worker",latencyHint:"interactive",lookAhead:.1,updateInterval:.05}}initialize(){return this._initialized||(!function initializeContext(t){Sn.forEach(e=>e(t))}(this),this._initialized=!0),this}createAnalyser(){return this._context.createAnalyser()}createOscillator(){return this._context.createOscillator()}createBufferSource(){return this._context.createBufferSource()}createBiquadFilter(){return this._context.createBiquadFilter()}createBuffer(t,e,s){return this._context.createBuffer(t,e,s)}createChannelMerger(t){return this._context.createChannelMerger(t)}createChannelSplitter(t){return this._context.createChannelSplitter(t)}createConstantSource(){return this._context.createConstantSource()}createConvolver(){return this._context.createConvolver()}createDelay(t){return this._context.createDelay(t)}createDynamicsCompressor(){return this._context.createDynamicsCompressor()}createGain(){return this._context.createGain()}createIIRFilter(t,e){return this._context.createIIRFilter(t,e)}createPanner(){return this._context.createPanner()}createPeriodicWave(t,e,s){return this._context.createPeriodicWave(t,e,s)}createStereoPanner(){return this._context.createStereoPanner()}createWaveShaper(){return this._context.createWaveShaper()}createMediaStreamSource(t){assert(isAudioContext(this._context),"Not available if OfflineAudioContext");return this._context.createMediaStreamSource(t)}createMediaElementSource(t){assert(isAudioContext(this._context),"Not available if OfflineAudioContext");return this._context.createMediaElementSource(t)}createMediaStreamDestination(){assert(isAudioContext(this._context),"Not available if OfflineAudioContext");return this._context.createMediaStreamDestination()}decodeAudioData(t){return this._context.decodeAudioData(t)}get currentTime(){return this._context.currentTime}get state(){return this._context.state}get sampleRate(){return this._context.sampleRate}get listener(){return this.initialize(),this._listener}set listener(t){assert(!this._initialized,"The listener cannot be set after initialization."),this._listener=t}get transport(){return this.initialize(),this._transport}set transport(t){assert(!this._initialized,"The transport cannot be set after initialization."),this._transport=t}get draw(){return this.initialize(),this._draw}set draw(t){assert(!this._initialized,"Draw cannot be set after initialization."),this._draw=t}get destination(){return this.initialize(),this._destination}set destination(t){assert(!this._initialized,"The destination cannot be set after initialization."),this._destination=t}createAudioWorkletNode(t,e){return function createAudioWorkletNode(t,e,s){return assert(isDefined(nn),"AudioWorkletNode only works in a secure context (https or localhost)"),new(t instanceof(null==xn?void 0:xn.BaseAudioContext)?null==xn?void 0:xn.AudioWorkletNode:nn)(t,e,s)}(this.rawContext,t,e)}addAudioWorkletModule(t){return e(this,void 0,void 0,function*(){assert(isDefined(this.rawContext.audioWorklet),"AudioWorkletNode is only available in a secure context (https or localhost)"),this._workletPromise||(this._workletPromise=this.rawContext.audioWorklet.addModule(t)),yield this._workletPromise})}workletsAreReady(){return e(this,void 0,void 0,function*(){(yield this._workletPromise)?this._workletPromise:Promise.resolve()})}get updateInterval(){return this._ticker.updateInterval}set updateInterval(t){this._ticker.updateInterval=t}get clockSource(){return this._ticker.type}set clockSource(t){this._ticker.type=t}get lookAhead(){return this._lookAhead}set lookAhead(t){this._lookAhead=t,this.updateInterval=t?t/2:.01}get latencyHint(){return this._latencyHint}get rawContext(){return this._context}now(){return this._context.currentTime+this._lookAhead}immediate(){return this._context.currentTime}resume(){return isAudioContext(this._context)?this._context.resume():Promise.resolve()}close(){return e(this,void 0,void 0,function*(){isAudioContext(this._context)&&"closed"!==this.state&&!this._closeStarted&&(this._closeStarted=!0,yield this._context.close()),this._initialized&&function closeContext(t){An.forEach(e=>e(t))}(this)})}getConstant(t){if(this._constants.has(t))return this._constants.get(t);{const e=this._context.createBuffer(1,128,this._context.sampleRate),s=e.getChannelData(0);for(let i=0;i<s.length;i++)s[i]=t;const n=this._context.createBufferSource();return n.channelCount=1,n.channelCountMode="explicit",n.buffer=e,n.loop=!0,n.start(0),this._constants.set(t,n),n}}dispose(){return super.dispose(),this._ticker.dispose(),this._timeouts.dispose(),Object.keys(this._constants).map(t=>this._constants[t].disconnect()),this.close(),this}_timeoutLoop(){const t=this.now();this._timeouts.forEachBefore(t,t=>{t.callback(),this._timeouts.remove(t)})}setTimeout(t,e){this._timeoutIds++;const s=this.now();return this._timeouts.add({callback:t,id:this._timeoutIds,time:s+e}),this._timeoutIds}clearTimeout(t){return this._timeouts.forEach(e=>{e.id===t&&this._timeouts.remove(e)}),this}clearInterval(t){return this.clearTimeout(t)}setInterval(t,e){const s=++this._timeoutIds,intervalFn=()=>{const n=this.now();this._timeouts.add({callback:()=>{t(),intervalFn()},id:s,time:n+e})};return intervalFn(),s}}function readOnly(t,e){isArray(e)?e.forEach(e=>readOnly(t,e)):Object.defineProperty(t,e,{enumerable:!0,writable:!1})}function writable(t,e){isArray(e)?e.forEach(e=>writable(t,e)):Object.defineProperty(t,e,{writable:!0})}const noOp=()=>{};class ToneAudioBuffer extends Tn{constructor(){super(),this.name="ToneAudioBuffer",this.onload=noOp;const t=optionsFromArguments(ToneAudioBuffer.getDefaults(),arguments,["url","onload","onerror"]);this.reverse=t.reverse,this.onload=t.onload,isString(t.url)?this.load(t.url).catch(t.onerror):t.url&&this.set(t.url)}static getDefaults(){return{onerror:noOp,onload:noOp,reverse:!1}}get sampleRate(){return this._buffer?this._buffer.sampleRate:getContext().sampleRate}set(t){return t instanceof ToneAudioBuffer?t.loaded?this._buffer=t.get():t.onload=()=>{this.set(t),this.onload(this)}:this._buffer=t,this._reversed&&this._reverse(),this}get(){return this._buffer}load(t){return e(this,void 0,void 0,function*(){const e=ToneAudioBuffer.load(t).then(t=>{this.set(t),this.onload(this)});ToneAudioBuffer.downloads.push(e);try{yield e}finally{const t=ToneAudioBuffer.downloads.indexOf(e);ToneAudioBuffer.downloads.splice(t,1)}return this})}dispose(){return super.dispose(),this._buffer=void 0,this}fromArray(t){const e=isArray(t)&&t[0].length>0,s=e?t.length:1,n=e?t[0].length:t.length,i=getContext(),o=i.createBuffer(s,n,i.sampleRate),r=e||1!==s?t:[t];for(let a=0;a<s;a++)o.copyToChannel(r[a],a);return this._buffer=o,this}toMono(t){if(isNumber(t))this.fromArray(this.toArray(t));else{let t=new Float32Array(this.length);const e=this.numberOfChannels;for(let s=0;s<e;s++){const e=this.toArray(s);for(let s=0;s<e.length;s++)t[s]+=e[s]}t=t.map(t=>t/e),this.fromArray(t)}return this}toArray(t){if(isNumber(t))return this.getChannelData(t);if(1===this.numberOfChannels)return this.toArray(0);{const t=[];for(let e=0;e<this.numberOfChannels;e++)t[e]=this.getChannelData(e);return t}}getChannelData(t){return this._buffer?this._buffer.getChannelData(t):new Float32Array(0)}slice(t,e=this.duration){assert(this.loaded,"Buffer is not loaded");const s=Math.floor(t*this.sampleRate),n=Math.floor(e*this.sampleRate);assert(s<n,"The start time must be less than the end time");const i=n-s,o=getContext().createBuffer(this.numberOfChannels,i,this.sampleRate);for(let r=0;r<this.numberOfChannels;r++)o.copyToChannel(this.getChannelData(r).subarray(s,n),r);return new ToneAudioBuffer(o)}_reverse(){if(this.loaded)for(let t=0;t<this.numberOfChannels;t++)this.getChannelData(t).reverse();return this}get loaded(){return this.length>0}get duration(){return this._buffer?this._buffer.duration:0}get length(){return this._buffer?this._buffer.length:0}get numberOfChannels(){return this._buffer?this._buffer.numberOfChannels:0}get reverse(){return this._reversed}set reverse(t){this._reversed!==t&&(this._reversed=t,this._reverse())}static fromArray(t){return(new ToneAudioBuffer).fromArray(t)}static fromUrl(t){return e(this,void 0,void 0,function*(){const e=new ToneAudioBuffer;return yield e.load(t)})}static load(t){return e(this,void 0,void 0,function*(){const e=""===ToneAudioBuffer.baseUrl||ToneAudioBuffer.baseUrl.endsWith("/")?ToneAudioBuffer.baseUrl:ToneAudioBuffer.baseUrl+"/",s=yield fetch(e+t);if(!s.ok)throw new Error(`could not load url: ${t}`);const n=yield s.arrayBuffer();return yield getContext().decodeAudioData(n)})}static supportsType(t){const e=t.split("."),s=e[e.length-1];return""!==document.createElement("audio").canPlayType("audio/"+s)}static loaded(){return e(this,void 0,void 0,function*(){for(yield Promise.resolve();ToneAudioBuffer.downloads.length;)yield ToneAudioBuffer.downloads[0]})}}ToneAudioBuffer.baseUrl="",ToneAudioBuffer.downloads=[];class OfflineContext extends Context{constructor(){var t,e,s;super({clockSource:"offline",context:isOfflineAudioContext(arguments[0])?arguments[0]:(t=arguments[0],e=arguments[1]*arguments[2],s=arguments[2],new an(t,e,s)),lookAhead:0,updateInterval:isOfflineAudioContext(arguments[0])?128/arguments[0].sampleRate:128/arguments[2]}),this.name="OfflineContext",this._currentTime=0,this.isOffline=!0,this._duration=isOfflineAudioContext(arguments[0])?arguments[0].length/arguments[0].sampleRate:arguments[1]}now(){return this._currentTime}get currentTime(){return this._currentTime}_renderClock(t){return e(this,void 0,void 0,function*(){let e=0;for(;this._duration-this._currentTime>=0;){this.emit("tick"),this._currentTime+=128/this.sampleRate,e++;const s=Math.floor(this.sampleRate/128);t&&e%s===0&&(yield new Promise(t=>setTimeout(t,1)))}})}render(){return e(this,arguments,void 0,function*(t=!0){yield this.workletsAreReady(),yield this._renderClock(t);const e=yield this._context.startRendering();return new ToneAudioBuffer(e)})}close(){return Promise.resolve()}}const Cn=new class DummyContext extends BaseContext{constructor(){super(...arguments),this.lookAhead=0,this.latencyHint=0,this.isOffline=!1}createAnalyser(){return{}}createOscillator(){return{}}createBufferSource(){return{}}createBiquadFilter(){return{}}createBuffer(t,e,s){return{}}createChannelMerger(t){return{}}createChannelSplitter(t){return{}}createConstantSource(){return{}}createConvolver(){return{}}createDelay(t){return{}}createDynamicsCompressor(){return{}}createGain(){return{}}createIIRFilter(t,e){return{}}createPanner(){return{}}createPeriodicWave(t,e,s){return{}}createStereoPanner(){return{}}createWaveShaper(){return{}}createMediaStreamSource(t){return{}}createMediaElementSource(t){return{}}createMediaStreamDestination(){return{}}decodeAudioData(t){return Promise.resolve({})}createAudioWorkletNode(t,e){return{}}get rawContext(){return{}}addAudioWorkletModule(t){return e(this,void 0,void 0,function*(){return Promise.resolve()})}resume(){return Promise.resolve()}setTimeout(t,e){return 0}clearTimeout(t){return this}setInterval(t,e){return 0}clearInterval(t){return this}getConstant(t){return{}}get currentTime(){return 0}get state(){return{}}get sampleRate(){return 0}get listener(){return{}}get transport(){return{}}get draw(){return{}}set draw(t){}get destination(){return{}}set destination(t){}now(){return 0}immediate(){return 0}};let kn=Cn;function getContext(){return kn===Cn&&bn&&setContext(new Context),kn}function setContext(t,e=!1){e&&kn.dispose(),kn=isAudioContext(t)?new Context(t):isOfflineAudioContext(t)?new OfflineContext(t):t}function start(){return kn.resume()}if(xn&&!xn.TONE_SILENCE_LOGGING){const t=` * Tone.js ${"v"}${i} * `;console.log(`%c${t}`,"background: #000; color: #fff")}function dbToGain(t){return Math.pow(10,t/20)}function gainToDb(t){return Math.log(t)/Math.LN10*20}function intervalToFrequencyRatio(t){return Math.pow(2,t/12)}let On=440;function ftom(t){return Math.round(ftomf(t))}function ftomf(t){return 69+12*Math.log2(t/On)}function mtof(t){return On*Math.pow(2,(t-69)/12)}class TimeBaseClass extends Tn{constructor(t,e,s){super(),this.defaultUnits="s",this._val=e,this._units=s,this.context=t,this._expressions=this._getExpressions()}_getExpressions(){return{hz:{method:t=>this._frequencyToUnits(parseFloat(t)),regexp:/^(\d+(?:\.\d+)?)hz$/i},i:{method:t=>this._ticksToUnits(parseInt(t,10)),regexp:/^(\d+)i$/i},m:{method:t=>this._beatsToUnits(parseInt(t,10)*this._getTimeSignature()),regexp:/^(\d+)m$/i},n:{method:(t,e)=>{const s=parseInt(t,10),n="."===e?1.5:1;return 1===s?this._beatsToUnits(this._getTimeSignature())*n:this._beatsToUnits(4/s)*n},regexp:/^(\d+)n(\.?)$/i},number:{method:t=>this._expressions[this.defaultUnits].method.call(this,t),regexp:/^(\d+(?:\.\d+)?)$/},s:{method:t=>this._secondsToUnits(parseFloat(t)),regexp:/^(\d+(?:\.\d+)?)s$/},samples:{method:t=>parseInt(t,10)/this.context.sampleRate,regexp:/^(\d+)samples$/},t:{method:t=>{const e=parseInt(t,10);return this._beatsToUnits(8/(3*Math.floor(e)))},regexp:/^(\d+)t$/i},tr:{method:(t,e,s)=>{let n=0;return t&&"0"!==t&&(n+=this._beatsToUnits(this._getTimeSignature()*parseFloat(t))),e&&"0"!==e&&(n+=this._beatsToUnits(parseFloat(e))),s&&"0"!==s&&(n+=this._beatsToUnits(parseFloat(s)/4)),n},regexp:/^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?$/}}}valueOf(){if(this._val instanceof TimeBaseClass&&this.fromType(this._val),isUndef(this._val))return this._noArg();if(isString(this._val)&&isUndef(this._units)){for(const t in this._expressions)if(this._expressions[t].regexp.test(this._val.trim())){this._units=t;break}}else if(isObject(this._val)){let t=0;for(const e in this._val)if(isDefined(this._val[e])){const s=this._val[e];t+=new this.constructor(this.context,e).valueOf()*s}return t}if(isDefined(this._units)){const t=this._expressions[this._units],e=this._val.toString().trim().match(t.regexp);return e?t.method.apply(this,e.slice(1)):t.method.call(this,this._val)}return isString(this._val)?parseFloat(this._val):this._val}_frequencyToUnits(t){return 1/t}_beatsToUnits(t){return 60/this._getBpm()*t}_secondsToUnits(t){return t}_ticksToUnits(t){return t*this._beatsToUnits(1)/this._getPPQ()}_noArg(){return this._now()}_getBpm(){return this.context.transport.bpm.value}_getTimeSignature(){return this.context.transport.timeSignature}_getPPQ(){return this.context.transport.PPQ}fromType(t){switch(this._units=void 0,this.defaultUnits){case"s":this._val=t.toSeconds();break;case"i":this._val=t.toTicks();break;case"hz":this._val=t.toFrequency();break;case"midi":this._val=t.toMidi()}return this}toFrequency(){return 1/this.toSeconds()}toSamples(){return this.toSeconds()*this.context.sampleRate}toMilliseconds(){return 1e3*this.toSeconds()}}class TimeClass extends TimeBaseClass{constructor(){super(...arguments),this.name="TimeClass"}_getExpressions(){return Object.assign(super._getExpressions(),{now:{method:t=>this._now()+new this.constructor(this.context,t).valueOf(),regexp:/^\+(.+)/},quantize:{method:t=>{const e=new TimeClass(this.context,t).valueOf();return this._secondsToUnits(this.context.transport.nextSubdivision(e))},regexp:/^@(.+)/}})}quantize(t,e=1){const s=new this.constructor(this.context,t).valueOf(),n=this.valueOf();return n+(Math.round(n/s)*s-n)*e}toNotation(){const t=this.toSeconds(),e=["1m"];for(let i=1;i<9;i++){const t=Math.pow(2,i);e.push(t+"n."),e.push(t+"n"),e.push(t+"t")}e.push("0");let s=e[0],n=new TimeClass(this.context,e[0]).toSeconds();return e.forEach(e=>{const i=new TimeClass(this.context,e).toSeconds();Math.abs(i-t)<Math.abs(n-t)&&(s=e,n=i)}),s}toBarsBeatsSixteenths(){const t=this._beatsToUnits(1);let e=this.valueOf()/t;e=parseFloat(e.toFixed(4));const s=Math.floor(e/this._getTimeSignature());let n=e%1*4;e=Math.floor(e)%this._getTimeSignature();const i=n.toString();i.length>3&&(n=parseFloat(parseFloat(i).toFixed(3)));return[s,e,n].join(":")}toTicks(){const t=this._beatsToUnits(1);return this.valueOf()/t*this._getPPQ()}toSeconds(){return this.valueOf()}toMidi(){return ftom(this.toFrequency())}_now(){return this.context.now()}}function Time$1(t,e){return new TimeClass(getContext(),t,e)}class FrequencyClass extends TimeClass{constructor(){super(...arguments),this.name="Frequency",this.defaultUnits="hz"}static get A4(){return function getA4(){return On}()}static set A4(t){!function setA4(t){On=t}(t)}_getExpressions(){return Object.assign({},super._getExpressions(),{midi:{regexp:/^(\d+(?:\.\d+)?midi)/,method(t){return"midi"===this.defaultUnits?t:FrequencyClass.mtof(t)}},note:{regexp:/^([a-g]{1}(?:b|#|##|x|bb|###|#x|x#|bbb)?)(-?[0-9]+)/i,method(t,e){const s=Mn[t.toLowerCase()]+12*(parseInt(e,10)+1);return"midi"===this.defaultUnits?s:FrequencyClass.mtof(s)}},tr:{regexp:/^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/,method(t,e,s){let n=1;return t&&"0"!==t&&(n*=this._beatsToUnits(this._getTimeSignature()*parseFloat(t))),e&&"0"!==e&&(n*=this._beatsToUnits(parseFloat(e))),s&&"0"!==s&&(n*=this._beatsToUnits(parseFloat(s)/4)),n}}})}transpose(t){return new FrequencyClass(this.context,this.valueOf()*intervalToFrequencyRatio(t))}harmonize(t){return t.map(t=>this.transpose(t))}toMidi(){return ftom(this.valueOf())}toNote(){const t=this.toFrequency(),e=Math.log2(t/FrequencyClass.A4);let s=Math.round(12*e)+57;const n=Math.floor(s/12);n<0&&(s+=-12*n);return Dn[s%12]+n.toString()}toSeconds(){return 1/super.toSeconds()}toTicks(){const t=this._beatsToUnits(1),e=this.valueOf()/t;return Math.floor(e*this._getPPQ())}_noArg(){return 0}_frequencyToUnits(t){return t}_ticksToUnits(t){return 1/(60*t/(this._getBpm()*this._getPPQ()))}_beatsToUnits(t){return 1/super._beatsToUnits(t)}_secondsToUnits(t){return 1/t}static mtof(t){return mtof(t)}static ftom(t){return ftom(t)}}const Mn={cbbb:-3,cbb:-2,cb:-1,c:0,"c#":1,cx:2,"c##":2,"c###":3,"cx#":3,"c#x":3,dbbb:-1,dbb:0,db:1,d:2,"d#":3,dx:4,"d##":4,"d###":5,"dx#":5,"d#x":5,ebbb:1,ebb:2,eb:3,e:4,"e#":5,ex:6,"e##":6,"e###":7,"ex#":7,"e#x":7,fbbb:2,fbb:3,fb:4,f:5,"f#":6,fx:7,"f##":7,"f###":8,"fx#":8,"f#x":8,gbbb:4,gbb:5,gb:6,g:7,"g#":8,gx:9,"g##":9,"g###":10,"gx#":10,"g#x":10,abbb:6,abb:7,ab:8,a:9,"a#":10,ax:11,"a##":11,"a###":12,"ax#":12,"a#x":12,bbbb:8,bbb:9,bb:10,b:11,"b#":12,bx:13,"b##":13,"b###":14,"bx#":14,"b#x":14},Dn=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"];class TransportTimeClass extends TimeClass{constructor(){super(...arguments),this.name="TransportTime"}_now(){return this.context.transport.seconds}}class ToneWithContext extends Tn{constructor(){super();const t=optionsFromArguments(ToneWithContext.getDefaults(),arguments,["context"]);this.defaultContext?this.context=this.defaultContext:this.context=t.context}static getDefaults(){return{context:getContext()}}now(){return this.context.currentTime+this.context.lookAhead}immediate(){return this.context.currentTime}get sampleTime(){return 1/this.context.sampleRate}get blockTime(){return 128/this.context.sampleRate}toSeconds(t){return assertUsedScheduleTime(t),new TimeClass(this.context,t).toSeconds()}toFrequency(t){return new FrequencyClass(this.context,t).toFrequency()}toTicks(t){return new TransportTimeClass(this.context,t).toTicks()}_getPartialProperties(t){const e=this.get();return Object.keys(e).forEach(s=>{isUndef(t[s])&&delete e[s]}),e}get(){const t=function getDefaultsFromInstance(t){return t.constructor.getDefaults()}(this);return Object.keys(t).forEach(e=>{if(Reflect.has(this,e)){const s=this[e];isDefined(s)&&isDefined(s.value)&&isDefined(s.setValueAtTime)?t[e]=s.value:s instanceof ToneWithContext?t[e]=s._getPartialProperties(t[e]):isArray(s)||isNumber(s)||isString(s)||isBoolean(s)?t[e]=s:delete t[e]}}),t}set(t){return Object.keys(t).forEach(e=>{Reflect.has(this,e)&&isDefined(this[e])&&(this[e]&&isDefined(this[e].value)&&isDefined(this[e].setValueAtTime)?this[e].value!==t[e]&&(this[e].value=t[e]):this[e]instanceof ToneWithContext?this[e].set(t[e]):this[e]=t[e])}),this}}class StateTimeline extends Timeline{constructor(t="stopped"){super(),this.name="StateTimeline",this._initial=t,this.setStateAtTime(this._initial,0)}getValueAtTime(t){const e=this.get(t);return null!==e?e.state:this._initial}setStateAtTime(t,e,s){return assertRange(e,0),this.add(Object.assign({},s,{state:t,time:e})),this}getLastState(t,e){for(let s=this._search(e);s>=0;s--){const e=this._timeline[s];if(e.state===t)return e}}getNextState(t,e){const s=this._search(e);if(-1!==s)for(let n=s;n<this._timeline.length;n++){const e=this._timeline[n];if(e.state===t)return e}}}class Param extends ToneWithContext{constructor(){const t=optionsFromArguments(Param.getDefaults(),arguments,["param","units","convert"]);for(super(t),this.name="Param",this.overridden=!1,this._minOutput=1e-7,assert(isDefined(t.param)&&(isAudioParam(t.param)||t.param instanceof Param),"param must be an AudioParam");!isAudioParam(t.param);)t.param=t.param._param;this._swappable=!!isDefined(t.swappable)&&t.swappable,this._swappable?(this.input=this.context.createGain(),this._param=t.param,this.input.connect(this._param)):this._param=this.input=t.param,this._events=new Timeline(1e3),this._initialValue=this._param.defaultValue,this.units=t.units,this.convert=t.convert,this._minValue=t.minValue,this._maxValue=t.maxValue,isDefined(t.value)&&t.value!==this._toType(this._initialValue)&&this.setValueAtTime(t.value,0)}static getDefaults(){return Object.assign(ToneWithContext.getDefaults(),{convert:!0,units:"number"})}get value(){const t=this.now();return this.getValueAtTime(t)}set value(t){this.cancelScheduledValues(this.now()),this.setValueAtTime(t,this.now())}get minValue(){return isDefined(this._minValue)?this._minValue:"time"===this.units||"frequency"===this.units||"normalRange"===this.units||"positive"===this.units||"transportTime"===this.units||"ticks"===this.units||"bpm"===this.units||"hertz"===this.units||"samples"===this.units?0:"audioRange"===this.units?-1:"decibels"===this.units?-1/0:this._param.minValue}get maxValue(){return isDefined(this._maxValue)?this._maxValue:"normalRange"===this.units||"audioRange"===this.units?1:this._param.maxValue}_is(t,e){return this.units===e}_assertRange(t){return isDefined(this.maxValue)&&isDefined(this.minValue)&&assertRange(t,this._fromType(this.minValue),this._fromType(this.maxValue)),t}_fromType(t){return this.convert&&!this.overridden?this._is(t,"time")?this.toSeconds(t):this._is(t,"decibels")?dbToGain(t):this._is(t,"frequency")?this.toFrequency(t):t:this.overridden?0:t}_toType(t){return this.convert&&"decibels"===this.units?gainToDb(t):t}setValueAtTime(t,e){const s=this.toSeconds(e),n=this._fromType(t);return assert(isFinite(n)&&isFinite(s),`Invalid argument(s) to setValueAtTime: ${JSON.stringify(t)}, ${JSON.stringify(e)}`),this._assertRange(n),this.log(this.units,"setValueAtTime",t,s),this._events.add({time:s,type:"setValueAtTime",value:n}),this._param.setValueAtTime(n,s),this}getValueAtTime(t){const e=Math.max(this.toSeconds(t),0),s=this._events.getAfter(e),n=this._events.get(e);let i=this._initialValue;if(null===n)i=this._initialValue;else if("setTargetAtTime"!==n.type||null!==s&&"setValueAtTime"!==s.type)if(null===s)i=n.value;else if("linearRampToValueAtTime"===s.type||"exponentialRampToValueAtTime"===s.type){let t=n.value;if("setTargetAtTime"===n.type){const e=this._events.getBefore(n.time);t=null===e?this._initialValue:e.value}i="linearRampToValueAtTime"===s.type?this._linearInterpolate(n.time,t,s.time,s.value,e):this._exponentialInterpolate(n.time,t,s.time,s.value,e)}else i=n.value;else{const t=this._events.getBefore(n.time);let s;s=null===t?this._initialValue:t.value,"setTargetAtTime"===n.type&&(i=this._exponentialApproach(n.time,s,n.value,n.constant,e))}return this._toType(i)}setRampPoint(t){t=this.toSeconds(t);let e=this.getValueAtTime(t);return this.cancelAndHoldAtTime(t),0===this._fromType(e)&&(e=this._toType(this._minOutput)),this.setValueAtTime(e,t),this}linearRampToValueAtTime(t,e){const s=this._fromType(t),n=this.toSeconds(e);return assert(isFinite(s)&&isFinite(n),`Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(t)}, ${JSON.stringify(e)}`),this._assertRange(s),this._events.add({time:n,type:"linearRampToValueAtTime",value:s}),this.log(this.units,"linearRampToValueAtTime",t,n),this._param.linearRampToValueAtTime(s,n),this}exponentialRampToValueAtTime(t,e){let s=this._fromType(t);s=EQ(s,0)?this._minOutput:s,this._assertRange(s);const n=this.toSeconds(e);return assert(isFinite(s)&&isFinite(n),`Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(t)}, ${JSON.stringify(e)}`),this._events.add({time:n,type:"exponentialRampToValueAtTime",value:s}),this.log(this.units,"exponentialRampToValueAtTime",t,n),this._param.exponentialRampToValueAtTime(s,n),this}exponentialRampTo(t,e,s){return s=this.toSeconds(s),this.setRampPoint(s),this.exponentialRampToValueAtTime(t,s+this.toSeconds(e)),this}linearRampTo(t,e,s){return s=this.toSeconds(s),this.setRampPoint(s),this.linearRampToValueAtTime(t,s+this.toSeconds(e)),this}targetRampTo(t,e,s){return s=this.toSeconds(s),this.setRampPoint(s),this.exponentialApproachValueAtTime(t,s,e),this}exponentialApproachValueAtTime(t,e,s){e=this.toSeconds(e),s=this.toSeconds(s);const n=Math.log(s+1)/Math.log(200);return this.setTargetAtTime(t,e,n),this.cancelAndHoldAtTime(e+.9*s),this.linearRampToValueAtTime(t,e+s),this}setTargetAtTime(t,e,s){const n=this._fromType(t);assert(isFinite(s)&&s>0,"timeConstant must be a number greater than 0");const i=this.toSeconds(e);return this._assertRange(n),assert(isFinite(n)&&isFinite(i),`Invalid argument(s) to setTargetAtTime: ${JSON.stringify(t)}, ${JSON.stringify(e)}`),this._events.add({constant:s,time:i,type:"setTargetAtTime",value:n}),this.log(this.units,"setTargetAtTime",t,i,s),this._param.setTargetAtTime(n,i,s),this}setValueCurveAtTime(t,e,s,n=1){s=this.toSeconds(s),e=this.toSeconds(e);const i=this._fromType(t[0])*n;this.setValueAtTime(this._toType(i),e);const o=s/(t.length-1);for(let r=1;r<t.length;r++){const s=this._fromType(t[r])*n;this.linearRampToValueAtTime(this._toType(s),e+r*o)}return this}cancelScheduledValues(t){const e=this.toSeconds(t);return assert(isFinite(e),`Invalid argument to cancelScheduledValues: ${JSON.stringify(t)}`),this._events.cancel(e),this._param.cancelScheduledValues(e),this.log(this.units,"cancelScheduledValues",e),this}cancelAndHoldAtTime(t){const e=this.toSeconds(t),s=this._fromType(this.getValueAtTime(e));assert(isFinite(e),`Invalid argument to cancelAndHoldAtTime: ${JSON.stringify(t)}`),this.log(this.units,"cancelAndHoldAtTime",e,"value="+s);const n=this._events.get(e),i=this._events.getAfter(e);return n&&EQ(n.time,e)?i?(this._param.cancelScheduledValues(i.time),this._events.cancel(i.time)):(this._param.cancelAndHoldAtTime(e),this._events.cancel(e+this.sampleTime)):i&&(this._param.cancelScheduledValues(i.time),this._events.cancel(i.time),"linearRampToValueAtTime"===i.type?this.linearRampToValueAtTime(this._toType(s),e):"exponentialRampToValueAtTime"===i.type&&this.exponentialRampToValueAtTime(this._toType(s),e)),this._events.add({time:e,type:"setValueAtTime",value:s}),this._param.setValueAtTime(s,e),this}rampTo(t,e=.1,s){return"frequency"===this.units||"bpm"===this.units||"decibels"===this.units?this.exponentialRampTo(t,e,s):this.linearRampTo(t,e,s),this}apply(t){const e=this.context.currentTime;t.setValueAtTime(this.getValueAtTime(e),e);const s=this._events.get(e);if(s&&"setTargetAtTime"===s.type){const n=this._events.getAfter(s.time),i=n?n.time:e+2,o=(i-e)/10;for(let s=e;s<i;s+=o)t.linearRampToValueAtTime(this.getValueAtTime(s),s)}return this._events.forEachAfter(this.context.currentTime,e=>{"cancelScheduledValues"===e.type?t.cancelScheduledValues(e.time):"setTargetAtTime"===e.type?t.setTargetAtTime(e.value,e.time,e.constant):t[e.type](e.value,e.time)}),this}setParam(t){assert(this._swappable,"The Param must be assigned as 'swappable' in the constructor");const e=this.input;return e.disconnect(this._param),this.apply(t),this._param=t,e.connect(this._param),this}dispose(){return super.dispose(),this._events.dispose(),this}get defaultValue(){return this._toType(this._param.defaultValue)}_exponentialApproach(t,e,s,n,i){return s+(e-s)*Math.exp(-(i-t)/n)}_linearInterpolate(t,e,s,n,i){return e+(i-t)/(s-t)*(n-e)}_exponentialInterpolate(t,e,s,n,i){return e*Math.pow(n/e,(i-t)/(s-t))}}class ToneAudioNode extends ToneWithContext{constructor(){super(...arguments),this._internalChannels=[]}get numberOfInputs(){return isDefined(this.input)?isAudioParam(this.input)||this.input instanceof Param?1:this.input.numberOfInputs:0}get numberOfOutputs(){return isDefined(this.output)?this.output.numberOfOutputs:0}_isAudioNode(t){return isDefined(t)&&(t instanceof ToneAudioNode||isAudioNode(t))}_getInternalNodes(){const t=this._internalChannels.slice(0);return this._isAudioNode(this.input)&&t.push(this.input),this._isAudioNode(this.output)&&this.input!==this.output&&t.push(this.output),t}_setChannelProperties(t){this._getInternalNodes().forEach(e=>{e.channelCount=t.channelCount,e.channelCountMode=t.channelCountMode,e.channelInterpretation=t.channelInterpretation})}_getChannelProperties(){const t=this._getInternalNodes();assert(t.length>0,"ToneAudioNode does not have any internal nodes");const e=t[0];return{channelCount:e.channelCount,channelCountMode:e.channelCountMode,channelInterpretation:e.channelInterpretation}}get channelCount(){return this._getChannelProperties().channelCount}set channelCount(t){const e=this._getChannelProperties();this._setChannelProperties(Object.assign(e,{channelCount:t}))}get channelCountMode(){return this._getChannelProperties().channelCountMode}set channelCountMode(t){const e=this._getChannelProperties();this._setChannelProperties(Object.assign(e,{channelCountMode:t}))}get channelInterpretation(){return this._getChannelProperties().channelInterpretation}set channelInterpretation(t){const e=this._getChannelProperties();this._setChannelProperties(Object.assign(e,{channelInterpretation:t}))}connect(t,e=0,s=0){return connect(this,t,e,s),this}toDestination(){return this.connect(this.context.destination),this}toMaster(){return warn("toMaster() has been renamed toDestination()"),this.toDestination()}disconnect(t,e=0,s=0){return disconnect(this,t,e,s),this}chain(...t){return connectSeries(this,...t),this}fan(...t){return t.forEach(t=>this.connect(t)),this}dispose(){return super.dispose(),isDefined(this.input)&&(this.input instanceof ToneAudioNode?this.input.dispose():isAudioNode(this.input)&&this.input.disconnect()),isDefined(this.output)&&(this.output instanceof ToneAudioNode?this.output.dispose():isAudioNode(this.output)&&this.output.disconnect()),this._internalChannels=[],this}}function connectSeries(...t){const e=t.shift();t.reduce((t,e)=>(t instanceof ToneAudioNode?t.connect(e):isAudioNode(t)&&connect(t,e),e),e)}function connect(t,e,s=0,n=0){for(assert(isDefined(t),"Cannot connect from undefined node"),assert(isDefined(e),"Cannot connect to undefined node"),(e instanceof ToneAudioNode||isAudioNode(e))&&assert(e.numberOfInputs>0,"Cannot connect to node with no inputs"),assert(t.numberOfOutputs>0,"Cannot connect from node with no outputs");e instanceof ToneAudioNode||e instanceof Param;)isDefined(e.input)&&(e=e.input);for(;t instanceof ToneAudioNode;)isDefined(t.output)&&(t=t.output);isAudioParam(e)?t.connect(e,s):t.connect(e,s,n)}function disconnect(t,e,s=0,n=0){if(isDefined(e))for(;e instanceof ToneAudioNode;)e=e.input;for(;!isAudioNode(t);)isDefined(t.output)&&(t=t.output);isAudioParam(e)?t.disconnect(e,s):isAudioNode(e)?t.disconnect(e,s,n):t.disconnect()}class Gain extends ToneAudioNode{constructor(){const t=optionsFromArguments(Gain.getDefaults(),arguments,["gain","units"]);super(t),this.name="Gain",this._gainNode=this.context.createGain(),this.input=this._gainNode,this.output=this._gainNode,this.gain=new Param({context:this.context,convert:t.convert,param:this._gainNode.gain,units:t.units,value:t.gain,minValue:t.minValue,maxValue:t.maxValue}),readOnly(this,"gain")}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{convert:!0,gain:1,units:"gain"})}dispose(){return super.dispose(),this._gainNode.disconnect(),this.gain.dispose(),this}}class OneShotSource extends ToneAudioNode{constructor(t){super(t),this.onended=noOp,this._startTime=-1,this._stopTime=-1,this._timeout=-1,this.output=new Gain({context:this.context,gain:0}),this._gainNode=this.output,this.getStateAtTime=function(t){const e=this.toSeconds(t);return-1!==this._startTime&&e>=this._startTime&&(-1===this._stopTime||e<=this._stopTime)?"started":"stopped"},this._fadeIn=t.fadeIn,this._fadeOut=t.fadeOut,this._curve=t.curve,this.onended=t.onended}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{curve:"linear",fadeIn:0,fadeOut:0,onended:noOp})}_startGain(t,e=1){assert(-1===this._startTime,"Source cannot be started more than once");const s=this.toSeconds(this._fadeIn);return this._startTime=t+s,this._startTime=Math.max(this._startTime,this.context.currentTime),s>0?(this._gainNode.gain.setValueAtTime(0,t),"linear"===this._curve?this._gainNode.gain.linearRampToValueAtTime(e,t+s):this._gainNode.gain.exponentialApproachValueAtTime(e,t,s)):this._gainNode.gain.setValueAtTime(e,t),this}stop(t){return this.log("stop",t),this._stopGain(this.toSeconds(t)),this}_stopGain(t){assert(-1!==this._startTime,"'start' must be called before 'stop'"),this.cancelStop();const e=this.toSeconds(this._fadeOut);return this._stopTime=this.toSeconds(t)+e,this._stopTime=Math.max(this._stopTime,this.now()),e>0?"linear"===this._curve?this._gainNode.gain.linearRampTo(0,e,t):this._gainNode.gain.targetRampTo(0,e,t):(this._gainNode.gain.cancelAndHoldAtTime(t),this._gainNode.gain.setValueAtTime(0,t)),this.context.clearTimeout(this._timeout),this._timeout=this.context.setTimeout(()=>{const t="exponential"===this._curve?2*e:0;this._stopSource(this.now()+t),this._onended()},this._stopTime-this.context.currentTime),this}_onended(){if(this.onended!==noOp&&(this.onended(this),this.onended=noOp,!this.context.isOffline)){const disposeCallback=()=>this.dispose();"undefined"!=typeof requestIdleCallback?requestIdleCallback(disposeCallback):setTimeout(disposeCallback,10)}}get state(){return this.getStateAtTime(this.now())}cancelStop(){return this.log("cancelStop"),assert(-1!==this._startTime,"Source is not started"),this._gainNode.gain.cancelScheduledValues(this._startTime+this.sampleTime),this.context.clearTimeout(this._timeout),this._stopTime=-1,this}dispose(){return super.dispose(),this._gainNode.dispose(),this.onended=noOp,this}}class ToneConstantSource extends OneShotSource{constructor(){const t=optionsFromArguments(ToneConstantSource.getDefaults(),arguments,["offset"]);super(t),this.name="ToneConstantSource",this._source=this.context.createConstantSource(),connect(this._source,this._gainNode),this.offset=new Param({context:this.context,convert:t.convert,param:this._source.offset,units:t.units,value:t.offset,minValue:t.minValue,maxValue:t.maxValue})}static getDefaults(){return Object.assign(OneShotSource.getDefaults(),{convert:!0,offset:1,units:"number"})}start(t){const e=this.toSeconds(t);return this.log("start",e),this._startGain(e),this._source.start(e),this}_stopSource(t){this._source.stop(t)}dispose(){return super.dispose(),"started"===this.state&&this.stop(),this._source.disconnect(),this.offset.dispose(),this}}class Signal extends ToneAudioNode{constructor(){const t=optionsFromArguments(Signal.getDefaults(),arguments,["value","units"]);super(t),this.name="Signal",this.override=!0,this.output=this._constantSource=new ToneConstantSource({context:this.context,convert:t.convert,offset:t.value,units:t.units,minValue:t.minValue,maxValue:t.maxValue}),this._constantSource.start(0),this.input=this._param=this._constantSource.offset}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{convert:!0,units:"number",value:0})}connect(t,e=0,s=0){return connectSignal(this,t,e,s),this}dispose(){return super.dispose(),this._param.dispose(),this._constantSource.dispose(),this}setValueAtTime(t,e){return this._param.setValueAtTime(t,e),this}getValueAtTime(t){return this._param.getValueAtTime(t)}setRampPoint(t){return this._param.setRampPoint(t),this}linearRampToValueAtTime(t,e){return this._param.linearRampToValueAtTime(t,e),this}exponentialRampToValueAtTime(t,e){return this._param.exponentialRampToValueAtTime(t,e),this}exponentialRampTo(t,e,s){return this._param.exponentialRampTo(t,e,s),this}linearRampTo(t,e,s){return this._param.linearRampTo(t,e,s),this}targetRampTo(t,e,s){return this._param.targetRampTo(t,e,s),this}exponentialApproachValueAtTime(t,e,s){return this._param.exponentialApproachValueAtTime(t,e,s),this}setTargetAtTime(t,e,s){return this._param.setTargetAtTime(t,e,s),this}setValueCurveAtTime(t,e,s,n){return this._param.setValueCurveAtTime(t,e,s,n),this}cancelScheduledValues(t){return this._param.cancelScheduledValues(t),this}cancelAndHoldAtTime(t){return this._param.cancelAndHoldAtTime(t),this}rampTo(t,e,s){return this._param.rampTo(t,e,s),this}get value(){return this._param.value}set value(t){this._param.value=t}get convert(){return this._param.convert}set convert(t){this._param.convert=t}get units(){return this._param.units}get overridden(){return this._param.overridden}set overridden(t){this._param.overridden=t}get maxValue(){return this._param.maxValue}get minValue(){return this._param.minValue}apply(t){return this._param.apply(t),this}}function connectSignal(t,e,s,n){(e instanceof Param||isAudioParam(e)||e instanceof Signal&&e.override)&&(e.cancelScheduledValues(0),e.setValueAtTime(0,0),e instanceof Signal&&(e.overridden=!0)),connect(t,e,s,n)}class TickParam extends Param{constructor(){const t=optionsFromArguments(TickParam.getDefaults(),arguments,["value"]);super(t),this.name="TickParam",this._events=new Timeline(1/0),this._multiplier=1,this._multiplier=t.multiplier,this._events.cancel(0),this._events.add({ticks:0,time:0,type:"setValueAtTime",value:this._fromType(t.value)}),this.setValueAtTime(t.value,0)}static getDefaults(){return Object.assign(Param.getDefaults(),{multiplier:1,units:"hertz",value:1})}setTargetAtTime(t,e,s){e=this.toSeconds(e),this.setRampPoint(e);const n=this._fromType(t),i=this._events.get(e),o=Math.round(Math.max(1/s,1));for(let r=0;r<=o;r++){const t=s*r+e,o=this._exponentialApproach(i.time,i.value,n,s,t);this.linearRampToValueAtTime(this._toType(o),t)}return this}setValueAtTime(t,e){const s=this.toSeconds(e);super.setValueAtTime(t,e);const n=this._events.get(s),i=this._events.previousEvent(n),o=this._getTicksUntilEvent(i,s);return n.ticks=Math.max(o,0),this}linearRampToValueAtTime(t,e){const s=this.toSeconds(e);super.linearRampToValueAtTime(t,e);const n=this._events.get(s),i=this._events.previousEvent(n),o=this._getTicksUntilEvent(i,s);return n.ticks=Math.max(o,0),this}exponentialRampToValueAtTime(t,e){e=this.toSeconds(e);const s=this._fromType(t),n=this._events.get(e),i=Math.round(Math.max(10*(e-n.time),1)),o=(e-n.time)/i;for(let r=0;r<=i;r++){const t=o*r+n.time,i=this._exponentialInterpolate(n.time,n.value,e,s,t);this.linearRampToValueAtTime(this._toType(i),t)}return this}_getTicksUntilEvent(t,e){if(null===t)t={ticks:0,time:0,type:"setValueAtTime",value:0};else if(isUndef(t.ticks)){const e=this._events.previousEvent(t);t.ticks=this._getTicksUntilEvent(e,t.time)}const s=this._fromType(this.getValueAtTime(t.time));let n=this._fromType(this.getValueAtTime(e));const i=this._events.get(e);return i&&i.time===e&&"setValueAtTime"===i.type&&(n=this._fromType(this.getValueAtTime(e-this.sampleTime))),.5*(e-t.time)*(s+n)+t.ticks}getTicksAtTime(t){const e=this.toSeconds(t),s=this._events.get(e);return Math.max(this._getTicksUntilEvent(s,e),0)}getDurationOfTicks(t,e){const s=this.toSeconds(e),n=this.getTicksAtTime(e);return this.getTimeOfTick(n+t)-s}getTimeOfTick(t){const e=this._events.get(t,"ticks"),s=this._events.getAfter(t,"ticks");if(e&&e.ticks===t)return e.time;if(e&&s&&"linearRampToValueAtTime"===s.type&&e.value!==s.value){const n=this._fromType(this.getValueAtTime(e.time)),i=(this._fromType(this.getValueAtTime(s.time))-n)/(s.time-e.time),o=Math.sqrt(Math.pow(n,2)-2*i*(e.ticks-t)),r=(-n+o)/i;return(r>0?r:(-n-o)/i)+e.time}return e?0===e.value?1/0:e.time+(t-e.ticks)/e.value:t/this._initialValue}ticksToTime(t,e){return this.getDurationOfTicks(t,e)}timeToTicks(t,e){const s=this.toSeconds(e),n=this.toSeconds(t),i=this.getTicksAtTime(s);return this.getTicksAtTime(s+n)-i}_fromType(t){return"bpm"===this.units&&this.multiplier?1/(60/t/this.multiplier):super._fromType(t)}_toType(t){return"bpm"===this.units&&this.multiplier?t/this.multiplier*60:super._toType(t)}get multiplier(){return this._multiplier}set multiplier(t){const e=this.value;this._multiplier=t,this.cancelScheduledValues(0),this.setValueAtTime(e,0)}}class TickSignal extends Signal{constructor(){const t=optionsFromArguments(TickSignal.getDefaults(),arguments,["value"]);super(t),this.name="TickSignal",this.input=this._param=new TickParam({context:this.context,convert:t.convert,multiplier:t.multiplier,param:this._constantSource.offset,units:t.units,value:t.value})}static getDefaults(){return Object.assign(Signal.getDefaults(),{multiplier:1,units:"hertz",value:1})}ticksToTime(t,e){return this._param.ticksToTime(t,e)}timeToTicks(t,e){return this._param.timeToTicks(t,e)}getTimeOfTick(t){return this._param.getTimeOfTick(t)}getDurationOfTicks(t,e){return this._param.getDurationOfTicks(t,e)}getTicksAtTime(t){return this._param.getTicksAtTime(t)}get multiplier(){return this._param.multiplier}set multiplier(t){this._param.multiplier=t}dispose(){return super.dispose(),this._param.dispose(),this}}class TickSource extends ToneWithContext{constructor(){const t=optionsFromArguments(TickSource.getDefaults(),arguments,["frequency"]);super(t),this.name="TickSource",this._state=new StateTimeline,this._tickOffset=new Timeline,this._ticksAtTime=new Timeline,this._secondsAtTime=new Timeline,this.frequency=new TickSignal({context:this.context,units:t.units,value:t.frequency}),readOnly(this,"frequency"),this._state.setStateAtTime("stopped",0),this.setTicksAtTime(0,0)}static getDefaults(){return Object.assign({frequency:1,units:"hertz"},ToneWithContext.getDefaults())}get state(){return this.getStateAtTime(this.now())}start(t,e){const s=this.toSeconds(t);return"started"!==this._state.getValueAtTime(s)&&(this._state.setStateAtTime("started",s),isDefined(e)&&this.setTicksAtTime(e,s),this._ticksAtTime.cancel(s),this._secondsAtTime.cancel(s)),this}stop(t){const e=this.toSeconds(t);if("stopped"===this._state.getValueAtTime(e)){const t=this._state.get(e);t&&t.time>0&&(this._tickOffset.cancel(t.time),this._state.cancel(t.time))}return this._state.cancel(e),this._state.setStateAtTime("stopped",e),this.setTicksAtTime(0,e),this._ticksAtTime.cancel(e),this._secondsAtTime.cancel(e),this}pause(t){const e=this.toSeconds(t);return"started"===this._state.getValueAtTime(e)&&(this._state.setStateAtTime("paused",e),this._ticksAtTime.cancel(e),this._secondsAtTime.cancel(e)),this}cancel(t){return t=this.toSeconds(t),this._state.cancel(t),this._tickOffset.cancel(t),this._ticksAtTime.cancel(t),this._secondsAtTime.cancel(t),this}getTicksAtTime(t){const e=this.toSeconds(t),s=this._state.getLastState("stopped",e),n=this._ticksAtTime.get(e),i={state:"paused",time:e};this._state.add(i);let o=n||s,r=n?n.ticks:0,a=null;return this._state.forEachBetween(o.time,e+this.sampleTime,t=>{let e=o.time;const s=this._tickOffset.get(t.time);s&&s.time>=o.time&&(r=s.ticks,e=s.time),"started"===o.state&&"started"!==t.state&&(r+=this.frequency.getTicksAtTime(t.time)-this.frequency.getTicksAtTime(e),t.time!==i.time&&(a={state:t.state,time:t.time,ticks:r})),o=t}),this._state.remove(i),a&&this._ticksAtTime.add(a),r}get ticks(){return this.getTicksAtTime(this.now())}set ticks(t){this.setTicksAtTime(t,this.now())}get seconds(){return this.getSecondsAtTime(this.now())}set seconds(t){const e=this.now(),s=this.frequency.timeToTicks(t,e);this.setTicksAtTime(s,e)}getSecondsAtTime(t){t=this.toSeconds(t);const e=this._state.getLastState("stopped",t),s={state:"paused",time:t};this._state.add(s);const n=this._secondsAtTime.get(t);let i=n||e,o=n?n.seconds:0,r=null;return this._state.forEachBetween(i.time,t+this.sampleTime,t=>{let e=i.time;const n=this._tickOffset.get(t.time);n&&n.time>=i.time&&(o=n.seconds,e=n.time),"started"===i.state&&"started"!==t.state&&(o+=t.time-e,t.time!==s.time&&(r={state:t.state,time:t.time,seconds:o})),i=t}),this._state.remove(s),r&&this._secondsAtTime.add(r),o}setTicksAtTime(t,e){return e=this.toSeconds(e),this._tickOffset.cancel(e),this._tickOffset.add({seconds:this.frequency.getDurationOfTicks(t,e),ticks:t,time:e}),this._ticksAtTime.cancel(e),this._secondsAtTime.cancel(e),this}getStateAtTime(t){return t=this.toSeconds(t),this._state.getValueAtTime(t)}getTimeOfTick(t,e=this.now()){const s=this._tickOffset.get(e),n=this._state.get(e),i=Math.max(s.time,n.time),o=this.frequency.getTicksAtTime(i)+t-s.ticks;return this.frequency.getTimeOfTick(o)}forEachTickBetween(t,e,s){let n=this._state.get(t);this._state.forEachBetween(t,e,e=>{n&&"started"===n.state&&"started"!==e.state&&this.forEachTickBetween(Math.max(n.time,t),e.time-this.sampleTime,s),n=e});let i=null;if(n&&"started"===n.state){const r=Math.max(n.time,t),a=this.frequency.getTicksAtTime(r),c=a-this.frequency.getTicksAtTime(n.time);let h=Math.ceil(c)-c;h=EQ(h,1)?0:h;let l=this.frequency.getTimeOfTick(a+h);for(;l<e;){try{s(l,Math.round(this.getTicksAtTime(l)))}catch(o){i=o;break}l+=this.frequency.getDurationOfTicks(1,l)}}if(i)throw i;return this}dispose(){return super.dispose(),this._state.dispose(),this._tickOffset.dispose(),this._ticksAtTime.dispose(),this._secondsAtTime.dispose(),this.frequency.dispose(),this}}class Clock extends ToneWithContext{constructor(){const t=optionsFromArguments(Clock.getDefaults(),arguments,["callback","frequency"]);super(t),this.name="Clock",this.callback=noOp,this._lastUpdate=0,this._state=new StateTimeline("stopped"),this._boundLoop=this._loop.bind(this),this.callback=t.callback,this._tickSource=new TickSource({context:this.context,frequency:t.frequency,units:t.units}),this._lastUpdate=0,this.frequency=this._tickSource.frequency,readOnly(this,"frequency"),this._state.setStateAtTime("stopped",0),this.context.on("tick",this._boundLoop)}static getDefaults(){return Object.assign(ToneWithContext.getDefaults(),{callback:noOp,frequency:1,units:"hertz"})}get state(){return this._state.getValueAtTime(this.now())}start(t,e){assertContextRunning(this.context);const s=this.toSeconds(t);return this.log("start",s),"started"!==this._state.getValueAtTime(s)&&(this._state.setStateAtTime("started",s),this._tickSource.start(s,e),s<this._lastUpdate&&this.emit("start",s,e)),this}stop(t){const e=this.toSeconds(t);return this.log("stop",e),this._state.cancel(e),this._state.setStateAtTime("stopped",e),this._tickSource.stop(e),e<this._lastUpdate&&this.emit("stop",e),this}pause(t){const e=this.toSeconds(t);return"started"===this._state.getValueAtTime(e)&&(this._state.setStateAtTime("paused",e),this._tickSource.pause(e),e<this._lastUpdate&&this.emit("pause",e)),this}get ticks(){return Math.ceil(this.getTicksAtTime(this.now()))}set ticks(t){this._tickSource.ticks=t}get seconds(){return this._tickSource.seconds}set seconds(t){this._tickSource.seconds=t}getSecondsAtTime(t){return this._tickSource.getSecondsAtTime(t)}setTicksAtTime(t,e){return this._tickSource.setTicksAtTime(t,e),this}getTimeOfTick(t,e=this.now()){return this._tickSource.getTimeOfTick(t,e)}getTicksAtTime(t){return this._tickSource.getTicksAtTime(t)}nextTickTime(t,e){const s=this.toSeconds(e),n=this.getTicksAtTime(s);return this._tickSource.getTimeOfTick(n+t,s)}_loop(){const t=this._lastUpdate,e=this.now();this._lastUpdate=e,this.log("loop",t,e),t!==e&&(this._state.forEachBetween(t,e,t=>{switch(t.state){case"started":const e=this._tickSource.getTicksAtTime(t.time);this.emit("start",t.time,e);break;case"stopped":0!==t.time&&this.emit("stop",t.time);break;case"paused":this.emit("pause",t.time)}}),this._tickSource.forEachTickBetween(t,e,(t,e)=>{this.callback(t,e)}))}getStateAtTime(t){const e=this.toSeconds(t);return this._state.getValueAtTime(e)}dispose(){return super.dispose(),this.context.off("tick",this._boundLoop),this._tickSource.dispose(),this._state.dispose(),this}}Emitter.mixin(Clock);class Delay extends ToneAudioNode{constructor(){const t=optionsFromArguments(Delay.getDefaults(),arguments,["delayTime","maxDelay"]);super(t),this.name="Delay";const e=this.toSeconds(t.maxDelay);this._maxDelay=Math.max(e,this.toSeconds(t.delayTime)),this._delayNode=this.input=this.output=this.context.createDelay(e),this.delayTime=new Param({context:this.context,param:this._delayNode.delayTime,units:"time",value:t.delayTime,minValue:0,maxValue:this.maxDelay}),readOnly(this,"delayTime")}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{delayTime:0,maxDelay:1})}get maxDelay(){return this._maxDelay}dispose(){return super.dispose(),this._delayNode.disconnect(),this.delayTime.dispose(),this}}class Volume extends ToneAudioNode{constructor(){const t=optionsFromArguments(Volume.getDefaults(),arguments,["volume"]);super(t),this.name="Volume",this.input=this.output=new Gain({context:this.context,gain:t.volume,units:"decibels"}),this.volume=this.output.gain,readOnly(this,"volume"),this._unmutedVolume=t.volume,this.mute=t.mute}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{mute:!1,volume:0})}get mute(){return this.volume.value===-1/0}set mute(t){!this.mute&&t?(this._unmutedVolume=this.volume.value,this.volume.value=-1/0):this.mute&&!t&&(this.volume.value=this._unmutedVolume)}dispose(){return super.dispose(),this.input.dispose(),this.volume.dispose(),this}}class DestinationClass extends ToneAudioNode{constructor(){const t=optionsFromArguments(DestinationClass.getDefaults(),arguments);super(t),this.name="Destination",this.input=new Volume({context:this.context}),this.output=new Gain({context:this.context}),this.volume=this.input.volume,connectSeries(this.input,this.output,this.context.rawContext.destination),this.mute=t.mute,this._internalChannels=[this.input,this.context.rawContext.destination,this.output]}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{mute:!1,volume:0})}get mute(){return this.input.mute}set mute(t){this.input.mute=t}chain(...t){return this.input.disconnect(),t.unshift(this.input),t.push(this.output),connectSeries(...t),this}get maxChannelCount(){return this.context.rawContext.destination.maxChannelCount}dispose(){return super.dispose(),this.volume.dispose(),this}}onContextInit(t=>{t.destination=new DestinationClass({context:t})}),onContextClose(t=>{t.destination.dispose()});class ListenerClass extends ToneAudioNode{constructor(){super(...arguments),this.name="Listener",this.positionX=new Param({context:this.context,param:this.context.rawContext.listener.positionX}),this.positionY=new Param({context:this.context,param:this.context.rawContext.listener.positionY}),this.positionZ=new Param({context:this.context,param:this.context.rawContext.listener.positionZ}),this.forwardX=new Param({context:this.context,param:this.context.rawContext.listener.forwardX}),this.forwardY=new Param({context:this.context,param:this.context.rawContext.listener.forwardY}),this.forwardZ=new Param({context:this.context,param:this.context.rawContext.listener.forwardZ}),this.upX=new Param({context:this.context,param:this.context.rawContext.listener.upX}),this.upY=new Param({context:this.context,param:this.context.rawContext.listener.upY}),this.upZ=new Param({context:this.context,param:this.context.rawContext.listener.upZ})}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{positionX:0,positionY:0,positionZ:0,forwardX:0,forwardY:0,forwardZ:-1,upX:0,upY:1,upZ:0})}dispose(){return super.dispose(),this.positionX.dispose(),this.positionY.dispose(),this.positionZ.dispose(),this.forwardX.dispose(),this.forwardY.dispose(),this.forwardZ.dispose(),this.upX.dispose(),this.upY.dispose(),this.upZ.dispose(),this}}onContextInit(t=>{t.listener=new ListenerClass({context:t})}),onContextClose(t=>{t.listener.dispose()});class ToneAudioBuffers extends Tn{constructor(){super(),this.name="ToneAudioBuffers",this._buffers=new Map,this._loadingCount=0;const t=optionsFromArguments(ToneAudioBuffers.getDefaults(),arguments,["urls","onload","baseUrl"],"urls");this.baseUrl=t.baseUrl,Object.keys(t.urls).forEach(e=>{this._loadingCount++;const s=t.urls[e];this.add(e,s,this._bufferLoaded.bind(this,t.onload),t.onerror)})}static getDefaults(){return{baseUrl:"",onerror:noOp,onload:noOp,urls:{}}}has(t){return this._buffers.has(t.toString())}get(t){return assert(this.has(t),`ToneAudioBuffers has no buffer named: ${t}`),this._buffers.get(t.toString())}_bufferLoaded(t){this._loadingCount--,0===this._loadingCount&&t&&t()}get loaded(){return Array.from(this._buffers).every(([t,e])=>e.loaded)}add(t,e,s=noOp,n=noOp){return isString(e)?(this.baseUrl&&"data:audio/"===e.trim().substring(0,11).toLowerCase()&&(this.baseUrl=""),this._buffers.set(t.toString(),new ToneAudioBuffer(this.baseUrl+e,s,n))):this._buffers.set(t.toString(),new ToneAudioBuffer(e,s,n)),this}dispose(){return super.dispose(),this._buffers.forEach(t=>t.dispose()),this._buffers.clear(),this}}class MidiClass extends FrequencyClass{constructor(){super(...arguments),this.name="MidiClass",this.defaultUnits="midi"}_frequencyToUnits(t){return ftom(super._frequencyToUnits(t))}_ticksToUnits(t){return ftom(super._ticksToUnits(t))}_beatsToUnits(t){return ftom(super._beatsToUnits(t))}_secondsToUnits(t){return ftom(super._secondsToUnits(t))}toMidi(){return this.valueOf()}toFrequency(){return mtof(this.toMidi())}transpose(t){return new MidiClass(this.context,this.toMidi()+t)}}class TicksClass extends TransportTimeClass{constructor(){super(...arguments),this.name="Ticks",this.defaultUnits="i"}_now(){return this.context.transport.ticks}_beatsToUnits(t){return this._getPPQ()*t}_secondsToUnits(t){return Math.floor(t/(60/this._getBpm())*this._getPPQ())}_ticksToUnits(t){return t}toTicks(){return this.valueOf()}toSeconds(){return this.valueOf()/this._getPPQ()*(60/this._getBpm())}}class DrawClass extends ToneWithContext{constructor(){super(...arguments),this.name="Draw",this.expiration=.25,this.anticipation=.008,this._events=new Timeline,this._boundDrawLoop=this._drawLoop.bind(this),this._animationFrame=-1}schedule(t,e){return this._events.add({callback:t,time:this.toSeconds(e)}),1===this._events.length&&(this._animationFrame=requestAnimationFrame(this._boundDrawLoop)),this}cancel(t){return this._events.cancel(this.toSeconds(t)),this}_drawLoop(){const t=this.context.currentTime;this._events.forEachBefore(t+this.anticipation,e=>{t-e.time<=this.expiration&&e.callback(),this._events.remove(e)}),this._events.length>0&&(this._animationFrame=requestAnimationFrame(this._boundDrawLoop))}dispose(){return super.dispose(),this._events.dispose(),cancelAnimationFrame(this._animationFrame),this}}onContextInit(t=>{t.draw=new DrawClass({context:t})}),onContextClose(t=>{t.draw.dispose()});class IntervalTimeline extends Tn{constructor(){super(...arguments),this.name="IntervalTimeline",this._root=null,this._length=0}add(t){assert(isDefined(t.time),"Events must have a time property"),assert(isDefined(t.duration),"Events must have a duration parameter"),t.time=t.time.valueOf();let e=new IntervalNode(t.time,t.time+t.duration,t);for(null===this._root?this._root=e:this._root.insert(e),this._length++;null!==e;)e.updateHeight(),e.updateMax(),this._rebalance(e),e=e.parent;return this}remove(t){if(null!==this._root){const e=[];this._root.search(t.time,e);for(const s of e)if(s.event===t){this._removeNode(s),this._length--;break}}return this}get length(){return this._length}cancel(t){return this.forEachFrom(t,t=>this.remove(t)),this}_setRoot(t){this._root=t,null!==this._root&&(this._root.parent=null)}_replaceNodeInParent(t,e){null!==t.parent?(t.isLeftChild()?t.parent.left=e:t.parent.right=e,this._rebalance(t.parent)):this._setRoot(e)}_removeNode(t){if(null===t.left&&null===t.right)this._replaceNodeInParent(t,null);else if(null===t.right)this._replaceNodeInParent(t,t.left);else if(null===t.left)this._replaceNodeInParent(t,t.right);else{let e,s=null;if(t.getBalance()>0)if(null===t.left.right)e=t.left,e.right=t.right,s=e;else{for(e=t.left.right;null!==e.right;)e=e.right;e.parent&&(e.parent.right=e.left,s=e.parent,e.left=t.left,e.right=t.right)}else if(null===t.right.left)e=t.right,e.left=t.left,s=e;else{for(e=t.right.left;null!==e.left;)e=e.left;e.parent&&(e.parent.left=e.right,s=e.parent,e.left=t.left,e.right=t.right)}null!==t.parent?t.isLeftChild()?t.parent.left=e:t.parent.right=e:this._setRoot(e),s&&this._rebalance(s)}t.dispose()}_rotateLeft(t){const e=t.parent,s=t.isLeftChild(),n=t.right;n&&(t.right=n.left,n.left=t),null!==e?s?e.left=n:e.right=n:this._setRoot(n)}_rotateRight(t){const e=t.parent,s=t.isLeftChild(),n=t.left;n&&(t.left=n.right,n.right=t),null!==e?s?e.left=n:e.right=n:this._setRoot(n)}_rebalance(t){const e=t.getBalance();e>1&&t.left?t.left.getBalance()<0?this._rotateLeft(t.left):this._rotateRight(t):e<-1&&t.right&&(t.right.getBalance()>0?this._rotateRight(t.right):this._rotateLeft(t))}get(t){if(null!==this._root){const e=[];if(this._root.search(t,e),e.length>0){let t=e[0];for(let s=1;s<e.length;s++)e[s].low>t.low&&(t=e[s]);return t.event}}return null}forEach(t){if(null!==this._root){const e=[];this._root.traverse(t=>e.push(t)),e.forEach(e=>{e.event&&t(e.event)})}return this}forEachAtTime(t,e){if(null!==this._root){const s=[];this._root.search(t,s),s.forEach(t=>{t.event&&e(t.event)})}return this}forEachFrom(t,e){if(null!==this._root){const s=[];this._root.searchAfter(t,s),s.forEach(t=>{t.event&&e(t.event)})}return this}dispose(){return super.dispose(),null!==this._root&&this._root.traverse(t=>t.dispose()),this._root=null,this}}class IntervalNode{constructor(t,e,s){this._left=null,this._right=null,this.parent=null,this.height=0,this.event=s,this.low=t,this.high=e,this.max=this.high}insert(t){t.low<=this.low?null===this.left?this.left=t:this.left.insert(t):null===this.right?this.right=t:this.right.insert(t)}search(t,e){t>this.max||(null!==this.left&&this.left.search(t,e),this.low<=t&&this.high>t&&e.push(this),this.low>t||null!==this.right&&this.right.search(t,e))}searchAfter(t,e){this.low>=t&&(e.push(this),null!==this.left&&this.left.searchAfter(t,e)),null!==this.right&&this.right.searchAfter(t,e)}traverse(t){t(this),null!==this.left&&this.left.traverse(t),null!==this.right&&this.right.traverse(t)}updateHeight(){null!==this.left&&null!==this.right?this.height=Math.max(this.left.height,this.right.height)+1:null!==this.right?this.height=this.right.height+1:null!==this.left?this.height=this.left.height+1:this.height=0}updateMax(){this.max=this.high,null!==this.left&&(this.max=Math.max(this.max,this.left.max)),null!==this.right&&(this.max=Math.max(this.max,this.right.max))}getBalance(){let t=0;return null!==this.left&&null!==this.right?t=this.left.height-this.right.height:null!==this.left?t=this.left.height+1:null!==this.right&&(t=-(this.right.height+1)),t}isLeftChild(){return null!==this.parent&&this.parent.left===this}get left(){return this._left}set left(t){this._left=t,null!==t&&(t.parent=this),this.updateHeight(),this.updateMax()}get right(){return this._right}set right(t){this._right=t,null!==t&&(t.parent=this),this.updateHeight(),this.updateMax()}dispose(){this.parent=null,this._left=null,this._right=null,this.event=null}}const Fn=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"}));class TimelineValue extends Tn{constructor(t){super(),this.name="TimelineValue",this._timeline=new Timeline({memory:10}),this._initialValue=t}set(t,e){return this._timeline.add({value:t,time:e}),this}get(t){const e=this._timeline.get(t);return e?e.value:this._initialValue}}class SignalOperator extends ToneAudioNode{constructor(){super(optionsFromArguments(SignalOperator.getDefaults(),arguments,["context"]))}connect(t,e=0,s=0){return connectSignal(this,t,e,s),this}}class WaveShaper extends SignalOperator{constructor(){const t=optionsFromArguments(WaveShaper.getDefaults(),arguments,["mapping","length"]);super(t),this.name="WaveShaper",this._shaper=this.context.createWaveShaper(),this.input=this._shaper,this.output=this._shaper,isArray(t.mapping)||t.mapping instanceof Float32Array?this.curve=Float32Array.from(t.mapping):isFunction(t.mapping)&&this.setMap(t.mapping,t.length)}static getDefaults(){return Object.assign(Signal.getDefaults(),{length:1024})}setMap(t,e=1024){const s=new Float32Array(e);for(let n=0,i=e;n<i;n++){const e=n/(i-1)*2-1;s[n]=t(e,n)}return this.curve=s,this}get curve(){return this._shaper.curve}set curve(t){this._shaper.curve=t}get oversample(){return this._shaper.oversample}set oversample(t){assert(["none","2x","4x"].some(e=>e.includes(t)),"oversampling must be either 'none', '2x', or '4x'"),this._shaper.oversample=t}dispose(){return super.dispose(),this._shaper.disconnect(),this}}class Pow extends SignalOperator{constructor(){const t=optionsFromArguments(Pow.getDefaults(),arguments,["value"]);super(t),this.name="Pow",this._exponentScaler=this.input=this.output=new WaveShaper({context:this.context,mapping:this._expFunc(t.value),length:8192}),this._exponent=t.value}static getDefaults(){return Object.assign(SignalOperator.getDefaults(),{value:1})}_expFunc(t){return e=>Math.pow(Math.abs(e),t)}get value(){return this._exponent}set value(t){this._exponent=t,this._exponentScaler.setMap(this._expFunc(this._exponent))}dispose(){return super.dispose(),this._exponentScaler.dispose(),this}}class TransportEvent{constructor(t,e){this.id=TransportEvent._eventId++,this._remainderTime=0;const s=Object.assign(TransportEvent.getDefaults(),e);this.transport=t,this.callback=s.callback,this._once=s.once,this.time=Math.floor(s.time),this._remainderTime=s.time-this.time}static getDefaults(){return{callback:noOp,once:!1,time:0}}get floatTime(){return this.time+this._remainderTime}invoke(t){if(this.callback){const e=this.transport.bpm.getDurationOfTicks(1,t);this.callback(t+this._remainderTime*e),this._once&&this.transport.clear(this.id)}}dispose(){return this.callback=void 0,this}}TransportEvent._eventId=0;class TransportRepeatEvent extends TransportEvent{constructor(t,e){super(t,e),this._currentId=-1,this._nextId=-1,this._nextTick=this.time,this._boundRestart=this._restart.bind(this);const s=Object.assign(TransportRepeatEvent.getDefaults(),e);this.duration=s.duration,this._interval=s.interval,this._nextTick=s.time,this.transport.on("start",this._boundRestart),this.transport.on("loopStart",this._boundRestart),this.transport.on("ticks",this._boundRestart),this.context=this.transport.context,this._restart()}static getDefaults(){return Object.assign({},TransportEvent.getDefaults(),{duration:1/0,interval:1,once:!1})}invoke(t){this._createEvents(t),super.invoke(t)}_createEvent(){return LT(this._nextTick,this.floatTime+this.duration)?this.transport.scheduleOnce(this.invoke.bind(this),new TicksClass(this.context,this._nextTick).toSeconds()):-1}_createEvents(t){LT(this._nextTick+this._interval,this.floatTime+this.duration)&&(this._nextTick+=this._interval,this._currentId=this._nextId,this._nextId=this.transport.scheduleOnce(this.invoke.bind(this),new TicksClass(this.context,this._nextTick).toSeconds()))}_restart(t){this.transport.clear(this._currentId),this.transport.clear(this._nextId),this._nextTick=this.floatTime;const e=this.transport.getTicksAtTime(t);GT(e,this.time)&&(this._nextTick=this.floatTime+Math.ceil((e-this.floatTime)/this._interval)*this._interval),this._currentId=this._createEvent(),this._nextTick+=this._interval,this._nextId=this._createEvent()}dispose(){return super.dispose(),this.transport.clear(this._currentId),this.transport.clear(this._nextId),this.transport.off("start",this._boundRestart),this.transport.off("loopStart",this._boundRestart),this.transport.off("ticks",this._boundRestart),this}}class TransportClass extends ToneWithContext{constructor(){const t=optionsFromArguments(TransportClass.getDefaults(),arguments);super(t),this.name="Transport",this._loop=new TimelineValue(!1),this._loopStart=0,this._loopEnd=0,this._scheduledEvents={},this._timeline=new Timeline,this._repeatedEvents=new IntervalTimeline,this._syncedSignals=[],this._swingAmount=0,this._ppq=t.ppq,this._clock=new Clock({callback:this._processTick.bind(this),context:this.context,frequency:0,units:"bpm"}),this._bindClockEvents(),this.bpm=this._clock.frequency,this._clock.frequency.multiplier=t.ppq,this.bpm.setValueAtTime(t.bpm,0),readOnly(this,"bpm"),this._timeSignature=t.timeSignature,this._swingTicks=t.ppq/2}static getDefaults(){return Object.assign(ToneWithContext.getDefaults(),{bpm:120,loopEnd:"4m",loopStart:0,ppq:192,swing:0,swingSubdivision:"8n",timeSignature:4})}_processTick(t,e){if(this._loop.get(t)&&e>=this._loopEnd&&(this.emit("loopEnd",t),this._clock.setTicksAtTime(this._loopStart,t),e=this._loopStart,this.emit("loopStart",t,this._clock.getSecondsAtTime(t)),this.emit("loop",t)),this._swingAmount>0&&e%this._ppq!==0&&e%(2*this._swingTicks)!=0){const s=e%(2*this._swingTicks)/(2*this._swingTicks),n=Math.sin(s*Math.PI)*this._swingAmount;t+=new TicksClass(this.context,2*this._swingTicks/3).toSeconds()*n}enterScheduledCallback(!0),this._timeline.forEachAtTime(e,e=>e.invoke(t)),enterScheduledCallback(!1)}schedule(t,e){const s=new TransportEvent(this,{callback:t,time:new TransportTimeClass(this.context,e).toTicks()});return this._addEvent(s,this._timeline)}scheduleRepeat(t,e,s,n=1/0){const i=new TransportRepeatEvent(this,{callback:t,duration:new TimeClass(this.context,n).toTicks(),interval:new TimeClass(this.context,e).toTicks(),time:new TransportTimeClass(this.context,s).toTicks()});return this._addEvent(i,this._repeatedEvents)}scheduleOnce(t,e){const s=new TransportEvent(this,{callback:t,once:!0,time:new TransportTimeClass(this.context,e).toTicks()});return this._addEvent(s,this._timeline)}clear(t){if(this._scheduledEvents.hasOwnProperty(t)){const e=this._scheduledEvents[t.toString()];e.timeline.remove(e.event),e.event.dispose(),delete this._scheduledEvents[t.toString()]}return this}_addEvent(t,e){return this._scheduledEvents[t.id.toString()]={event:t,timeline:e},e.add(t),t.id}cancel(t=0){const e=this.toTicks(t);return this._timeline.forEachFrom(e,t=>this.clear(t.id)),this._repeatedEvents.forEachFrom(e,t=>this.clear(t.id)),this}_bindClockEvents(){this._clock.on("start",(t,e)=>{e=new TicksClass(this.context,e).toSeconds(),this.emit("start",t,e)}),this._clock.on("stop",t=>{this.emit("stop",t)}),this._clock.on("pause",t=>{this.emit("pause",t)})}get state(){return this._clock.getStateAtTime(this.now())}start(t,e){let s;return this.context.resume(),isDefined(e)&&(s=this.toTicks(e)),this._clock.start(t,s),this}stop(t){return this._clock.stop(t),this}pause(t){return this._clock.pause(t),this}toggle(t){return t=this.toSeconds(t),"started"!==this._clock.getStateAtTime(t)?this.start(t):this.stop(t),this}get timeSignature(){return this._timeSignature}set timeSignature(t){isArray(t)&&(t=t[0]/t[1]*4),this._timeSignature=t}get loopStart(){return new TimeClass(this.context,this._loopStart,"i").toSeconds()}set loopStart(t){this._loopStart=this.toTicks(t)}get loopEnd(){return new TimeClass(this.context,this._loopEnd,"i").toSeconds()}set loopEnd(t){this._loopEnd=this.toTicks(t)}get loop(){return this._loop.get(this.now())}set loop(t){this._loop.set(t,this.now())}setLoopPoints(t,e){return this.loopStart=t,this.loopEnd=e,this}get swing(){return this._swingAmount}set swing(t){this._swingAmount=t}get swingSubdivision(){return new TicksClass(this.context,this._swingTicks).toNotation()}set swingSubdivision(t){this._swingTicks=this.toTicks(t)}get position(){const t=this.now(),e=this._clock.getTicksAtTime(t);return new TicksClass(this.context,e).toBarsBeatsSixteenths()}set position(t){const e=this.toTicks(t);this.ticks=e}get seconds(){return this._clock.seconds}set seconds(t){const e=this.now(),s=this._clock.frequency.timeToTicks(t,e);this.ticks=s}get progress(){if(this.loop){const t=this.now();return(this._clock.getTicksAtTime(t)-this._loopStart)/(this._loopEnd-this._loopStart)}return 0}get ticks(){return this._clock.ticks}set ticks(t){if(this._clock.ticks!==t){const e=this.now();if("started"===this.state){const s=this._clock.getTicksAtTime(e),n=e+this._clock.frequency.getDurationOfTicks(Math.ceil(s)-s,e);this.emit("stop",n),this._clock.setTicksAtTime(t,n),this.emit("start",n,this._clock.getSecondsAtTime(n))}else this.emit("ticks",e),this._clock.setTicksAtTime(t,e)}}getTicksAtTime(t){return this._clock.getTicksAtTime(t)}getSecondsAtTime(t){return this._clock.getSecondsAtTime(t)}get PPQ(){return this._clock.frequency.multiplier}set PPQ(t){this._clock.frequency.multiplier=t}nextSubdivision(t){if(t=this.toTicks(t),"started"!==this.state)return 0;{const e=this.now(),s=t-this.getTicksAtTime(e)%t;return this._clock.nextTickTime(s,e)}}syncSignal(t,e){const s=this.now();let n=this.bpm,i=1/(60/n.getValueAtTime(s)/this.PPQ),o=[];if("time"===t.units){const t=1/64/i,e=new Gain(t),s=new Pow(-1),r=new Gain(t);n.chain(e,s,r),n=r,i=1/i,o=[e,s,r]}e||(e=0!==t.getValueAtTime(s)?t.getValueAtTime(s)/i:0);const r=new Gain(e);return n.connect(r),r.connect(t._param),o.push(r),this._syncedSignals.push({initial:t.value,nodes:o,signal:t}),t.value=0,this}unsyncSignal(t){for(let e=this._syncedSignals.length-1;e>=0;e--){const s=this._syncedSignals[e];s.signal===t&&(s.nodes.forEach(t=>t.dispose()),s.signal.value=s.initial,this._syncedSignals.splice(e,1))}return this}dispose(){return super.dispose(),this._clock.dispose(),writable(this,"bpm"),this._timeline.dispose(),this._repeatedEvents.dispose(),this}}Emitter.mixin(TransportClass),onContextInit(t=>{t.transport=new TransportClass({context:t})}),onContextClose(t=>{t.transport.dispose()});class Source extends ToneAudioNode{constructor(t){super(t),this.input=void 0,this._state=new StateTimeline("stopped"),this._synced=!1,this._scheduled=[],this._syncedStart=noOp,this._syncedStop=noOp,this._state.memory=100,this._state.increasing=!0,this._volume=this.output=new Volume({context:this.context,mute:t.mute,volume:t.volume}),this.volume=this._volume.volume,readOnly(this,"volume"),this.onstop=t.onstop}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{mute:!1,onstop:noOp,volume:0})}get state(){return this._synced?"started"===this.context.transport.state?this._state.getValueAtTime(this.context.transport.seconds):"stopped":this._state.getValueAtTime(this.now())}get mute(){return this._volume.mute}set mute(t){this._volume.mute=t}_clampToCurrentTime(t){return this._synced?t:Math.max(t,this.context.currentTime)}start(t,e,s){let n=isUndef(t)&&this._synced?this.context.transport.seconds:this.toSeconds(t);if(n=this._clampToCurrentTime(n),this._synced||"started"!==this._state.getValueAtTime(n))if(this.log("start",n),this._state.setStateAtTime("started",n),this._synced){const t=this._state.get(n);t&&(t.offset=this.toSeconds(defaultArg(e,0)),t.duration=s?this.toSeconds(s):void 0);const i=this.context.transport.schedule(t=>{this._start(t,e,s)},n);this._scheduled.push(i),"started"===this.context.transport.state&&this.context.transport.getSecondsAtTime(this.immediate())>n&&this._syncedStart(this.now(),this.context.transport.seconds)}else assertContextRunning(this.context),this._start(n,e,s);else assert(GT(n,this._state.get(n).time),"Start time must be strictly greater than previous start time"),this._state.cancel(n),this._state.setStateAtTime("started",n),this.log("restart",n),this.restart(n,e,s);return this}stop(t){let e=isUndef(t)&&this._synced?this.context.transport.seconds:this.toSeconds(t);if(e=this._clampToCurrentTime(e),"started"===this._state.getValueAtTime(e)||isDefined(this._state.getNextState("started",e))){if(this.log("stop",e),this._synced){const t=this.context.transport.schedule(this._stop.bind(this),e);this._scheduled.push(t)}else this._stop(e);this._state.cancel(e),this._state.setStateAtTime("stopped",e)}return this}restart(t,e,s){return t=this.toSeconds(t),"started"===this._state.getValueAtTime(t)&&(this._state.cancel(t),this._restart(t,e,s)),this}sync(){return this._synced||(this._synced=!0,this._syncedStart=(t,e)=>{if(GT(e,0)){const s=this._state.get(e);if(s&&"started"===s.state&&s.time!==e){const n=e-this.toSeconds(s.time);let i;s.duration&&(i=this.toSeconds(s.duration)-n),this._start(t,this.toSeconds(s.offset)+n,i)}}},this._syncedStop=t=>{const e=this.context.transport.getSecondsAtTime(Math.max(t-this.sampleTime,0));"started"===this._state.getValueAtTime(e)&&this._stop(t)},this.context.transport.on("start",this._syncedStart),this.context.transport.on("loopStart",this._syncedStart),this.context.transport.on("stop",this._syncedStop),this.context.transport.on("pause",this._syncedStop),this.context.transport.on("loopEnd",this._syncedStop)),this}unsync(){return this._synced&&(this.context.transport.off("stop",this._syncedStop),this.context.transport.off("pause",this._syncedStop),this.context.transport.off("loopEnd",this._syncedStop),this.context.transport.off("start",this._syncedStart),this.context.transport.off("loopStart",this._syncedStart)),this._synced=!1,this._scheduled.forEach(t=>this.context.transport.clear(t)),this._scheduled=[],this._state.cancel(0),this._stop(0),this}dispose(){return super.dispose(),this.onstop=noOp,this.unsync(),this._volume.dispose(),this._state.dispose(),this}}class ToneBufferSource extends OneShotSource{constructor(){const t=optionsFromArguments(ToneBufferSource.getDefaults(),arguments,["url","onload"]);super(t),this.name="ToneBufferSource",this._source=this.context.createBufferSource(),this._internalChannels=[this._source],this._sourceStarted=!1,this._sourceStopped=!1,connect(this._source,this._gainNode),this._source.onended=()=>this._stopSource(),this.playbackRate=new Param({context:this.context,param:this._source.playbackRate,units:"positive",value:t.playbackRate}),this.loop=t.loop,this.loopStart=t.loopStart,this.loopEnd=t.loopEnd,this._buffer=new ToneAudioBuffer(t.url,t.onload,t.onerror),this._internalChannels.push(this._source)}static getDefaults(){return Object.assign(OneShotSource.getDefaults(),{url:new ToneAudioBuffer,loop:!1,loopEnd:0,loopStart:0,onload:noOp,onerror:noOp,playbackRate:1})}get fadeIn(){return this._fadeIn}set fadeIn(t){this._fadeIn=t}get fadeOut(){return this._fadeOut}set fadeOut(t){this._fadeOut=t}get curve(){return this._curve}set curve(t){this._curve=t}start(t,e,s,n=1){assert(this.buffer.loaded,"buffer is either not set or not loaded");const i=this.toSeconds(t);this._startGain(i,n),e=this.loop?defaultArg(e,this.loopStart):defaultArg(e,0);let o=Math.max(this.toSeconds(e),0);if(this.loop){const t=this.toSeconds(this.loopEnd)||this.buffer.duration,e=this.toSeconds(this.loopStart),s=t-e;GTE(o,t)&&(o=(o-e)%s+e),EQ(o,this.buffer.duration)&&(o=0)}if(this._source.buffer=this.buffer.get(),this._source.loopEnd=this.toSeconds(this.loopEnd)||this.buffer.duration,LT(o,this.buffer.duration)&&(this._sourceStarted=!0,this._source.start(i,o)),isDefined(s)){let t=this.toSeconds(s);t=Math.max(t,0),this.stop(i+t)}return this}_stopSource(t){!this._sourceStopped&&this._sourceStarted&&(this._sourceStopped=!0,this._source.stop(this.toSeconds(t)),this._onended())}get loopStart(){return this._source.loopStart}set loopStart(t){this._source.loopStart=this.toSeconds(t)}get loopEnd(){return this._source.loopEnd}set loopEnd(t){this._source.loopEnd=this.toSeconds(t)}get buffer(){return this._buffer}set buffer(t){this._buffer.set(t)}get loop(){return this._source.loop}set loop(t){this._source.loop=t,this._sourceStarted&&this.cancelStop()}dispose(){return super.dispose(),this._source.onended=null,this._source.disconnect(),this._buffer.dispose(),this.playbackRate.dispose(),this}}class Noise extends Source{constructor(){const t=optionsFromArguments(Noise.getDefaults(),arguments,["type"]);super(t),this.name="Noise",this._source=null,this._playbackRate=t.playbackRate,this.type=t.type,this._fadeIn=t.fadeIn,this._fadeOut=t.fadeOut}static getDefaults(){return Object.assign(Source.getDefaults(),{fadeIn:0,fadeOut:0,playbackRate:1,type:"white"})}get type(){return this._type}set type(t){if(assert(t in qn,"Noise: invalid type: "+t),this._type!==t&&(this._type=t,"started"===this.state)){const t=this.now();this._stop(t),this._start(t)}}get playbackRate(){return this._playbackRate}set playbackRate(t){this._playbackRate=t,this._source&&(this._source.playbackRate.value=t)}_start(t){const e=qn[this._type];this._source=new ToneBufferSource({url:e,context:this.context,fadeIn:this._fadeIn,fadeOut:this._fadeOut,loop:!0,onended:()=>this.onstop(this),playbackRate:this._playbackRate}).connect(this.output),this._source.start(this.toSeconds(t),Math.random()*(e.duration-.001))}_stop(t){this._source&&(this._source.stop(this.toSeconds(t)),this._source=null)}get fadeIn(){return this._fadeIn}set fadeIn(t){this._fadeIn=t,this._source&&(this._source.fadeIn=this._fadeIn)}get fadeOut(){return this._fadeOut}set fadeOut(t){this._fadeOut=t,this._source&&(this._source.fadeOut=this._fadeOut)}_restart(t){this._stop(t),this._start(t)}dispose(){return super.dispose(),this._source&&this._source.disconnect(),this}}const En=220500,Rn={brown:null,pink:null,white:null},qn={get brown(){if(!Rn.brown){const t=[];for(let e=0;e<2;e++){const s=new Float32Array(En);t[e]=s;let n=0;for(let t=0;t<En;t++){const e=2*Math.random()-1;s[t]=(n+.02*e)/1.02,n=s[t],s[t]*=3.5}}Rn.brown=(new ToneAudioBuffer).fromArray(t)}return Rn.brown},get pink(){if(!Rn.pink){const t=[];for(let e=0;e<2;e++){const s=new Float32Array(En);let n,i,o,r,a,c,h;t[e]=s,n=i=o=r=a=c=h=0;for(let t=0;t<En;t++){const e=2*Math.random()-1;n=.99886*n+.0555179*e,i=.99332*i+.0750759*e,o=.969*o+.153852*e,r=.8665*r+.3104856*e,a=.55*a+.5329522*e,c=-.7616*c-.016898*e,s[t]=n+i+o+r+a+c+h+.5362*e,s[t]*=.11,h=.115926*e}}Rn.pink=(new ToneAudioBuffer).fromArray(t)}return Rn.pink},get white(){if(!Rn.white){const t=[];for(let e=0;e<2;e++){const s=new Float32Array(En);t[e]=s;for(let t=0;t<En;t++)s[t]=2*Math.random()-1}Rn.white=(new ToneAudioBuffer).fromArray(t)}return Rn.white}};class UserMedia extends ToneAudioNode{constructor(){const t=optionsFromArguments(UserMedia.getDefaults(),arguments,["volume"]);super(t),this.name="UserMedia",this._volume=this.output=new Volume({context:this.context,volume:t.volume}),this.volume=this._volume.volume,readOnly(this,"volume"),this.mute=t.mute}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{mute:!1,volume:0})}open(t){return e(this,void 0,void 0,function*(){assert(UserMedia.supported,"UserMedia is not supported"),"started"===this.state&&this.close();const e=yield UserMedia.enumerateDevices();isNumber(t)?this._device=e[t]:(this._device=e.find(e=>e.label===t||e.deviceId===t),!this._device&&e.length>0&&(this._device=e[0]),assert(isDefined(this._device),`No matching device ${t}`));const s={audio:{echoCancellation:!1,sampleRate:this.context.sampleRate,noiseSuppression:!1,mozNoiseSuppression:!1}};this._device&&(s.audio.deviceId=this._device.deviceId);const n=yield navigator.mediaDevices.getUserMedia(s);if(!this._stream){this._stream=n;const t=this.context.createMediaStreamSource(n);connect(t,this.output),this._mediaStream=t}return this})}close(){return this._stream&&this._mediaStream&&(this._stream.getAudioTracks().forEach(t=>{t.stop()}),this._stream=void 0,this._mediaStream.disconnect(),this._mediaStream=void 0),this._device=void 0,this}static enumerateDevices(){return e(this,void 0,void 0,function*(){return(yield navigator.mediaDevices.enumerateDevices()).filter(t=>"audioinput"===t.kind)})}get state(){return this._stream&&this._stream.active?"started":"stopped"}get deviceId(){return this._device?this._device.deviceId:void 0}get groupId(){return this._device?this._device.groupId:void 0}get label(){return this._device?this._device.label:void 0}get mute(){return this._volume.mute}set mute(t){this._volume.mute=t}dispose(){return super.dispose(),this.close(),this._volume.dispose(),this.volume.dispose(),this}static get supported(){return isDefined(navigator.mediaDevices)&&isDefined(navigator.mediaDevices.getUserMedia)}}function generateWaveform(t,s){return e(this,void 0,void 0,function*(){const e=s/t.context.sampleRate,n=new OfflineContext(1,e,t.context.sampleRate);new t.constructor(Object.assign(t.get(),{frequency:2/e,detune:0,context:n})).toDestination().start(0);return(yield n.render()).getChannelData(0)})}class ToneOscillatorNode extends OneShotSource{constructor(){const t=optionsFromArguments(ToneOscillatorNode.getDefaults(),arguments,["frequency","type"]);super(t),this.name="ToneOscillatorNode",this._oscillator=this.context.createOscillator(),this._internalChannels=[this._oscillator],connect(this._oscillator,this._gainNode),this.type=t.type,this.frequency=new Param({context:this.context,param:this._oscillator.frequency,units:"frequency",value:t.frequency}),this.detune=new Param({context:this.context,param:this._oscillator.detune,units:"cents",value:t.detune}),readOnly(this,["frequency","detune"])}static getDefaults(){return Object.assign(OneShotSource.getDefaults(),{detune:0,frequency:440,type:"sine"})}start(t){const e=this.toSeconds(t);return this.log("start",e),this._startGain(e),this._oscillator.start(e),this}_stopSource(t){this._oscillator.stop(t)}setPeriodicWave(t){return this._oscillator.setPeriodicWave(t),this}get type(){return this._oscillator.type}set type(t){this._oscillator.type=t}dispose(){return super.dispose(),"started"===this.state&&this.stop(),this._oscillator.disconnect(),this.frequency.dispose(),this.detune.dispose(),this}}class Oscillator extends Source{constructor(){const t=optionsFromArguments(Oscillator.getDefaults(),arguments,["frequency","type"]);super(t),this.name="Oscillator",this._oscillator=null,this.frequency=new Signal({context:this.context,units:"frequency",value:t.frequency}),readOnly(this,"frequency"),this.detune=new Signal({context:this.context,units:"cents",value:t.detune}),readOnly(this,"detune"),this._partials=t.partials,this._partialCount=t.partialCount,this._type=t.type,t.partialCount&&"custom"!==t.type&&(this._type=this.baseType+t.partialCount.toString()),this.phase=t.phase}static getDefaults(){return Object.assign(Source.getDefaults(),{detune:0,frequency:440,partialCount:0,partials:[],phase:0,type:"sine"})}_start(t){const e=this.toSeconds(t),s=new ToneOscillatorNode({context:this.context,onended:()=>this.onstop(this)});this._oscillator=s,this._wave?this._oscillator.setPeriodicWave(this._wave):this._oscillator.type=this._type,this._oscillator.connect(this.output),this.frequency.connect(this._oscillator.frequency),this.detune.connect(this._oscillator.detune),this._oscillator.start(e)}_stop(t){const e=this.toSeconds(t);this._oscillator&&this._oscillator.stop(e)}_restart(t){const e=this.toSeconds(t);return this.log("restart",e),this._oscillator&&this._oscillator.cancelStop(),this._state.cancel(e),this}syncFrequency(){return this.context.transport.syncSignal(this.frequency),this}unsyncFrequency(){return this.context.transport.unsyncSignal(this.frequency),this}_getCachedPeriodicWave(){if("custom"===this._type){return Oscillator._periodicWaveCache.find(t=>t.phase===this._phase&&function deepEquals(t,e){return t.length===e.length&&t.every((t,s)=>e[s]===t)}(t.partials,this._partials))}{const t=Oscillator._periodicWaveCache.find(t=>t.type===this._type&&t.phase===this._phase);return this._partialCount=t?t.partialCount:this._partialCount,t}}get type(){return this._type}set type(t){this._type=t;const e=-1!==["sine","square","sawtooth","triangle"].indexOf(t);if(0===this._phase&&e)this._wave=void 0,this._partialCount=0,null!==this._oscillator&&(this._oscillator.type=t);else{const e=this._getCachedPeriodicWave();if(isDefined(e)){const{partials:t,wave:s}=e;this._wave=s,this._partials=t,null!==this._oscillator&&this._oscillator.setPeriodicWave(this._wave)}else{const[e,s]=this._getRealImaginary(t,this._phase),n=this.context.createPeriodicWave(e,s);this._wave=n,null!==this._oscillator&&this._oscillator.setPeriodicWave(this._wave),Oscillator._periodicWaveCache.push({imag:s,partialCount:this._partialCount,partials:this._partials,phase:this._phase,real:e,type:this._type,wave:this._wave}),Oscillator._periodicWaveCache.length>100&&Oscillator._periodicWaveCache.shift()}}}get baseType(){return this._type.replace(this.partialCount.toString(),"")}set baseType(t){this.partialCount&&"custom"!==this._type&&"custom"!==t?this.type=t+this.partialCount:this.type=t}get partialCount(){return this._partialCount}set partialCount(t){assertRange(t,0);let e=this._type;const s=/^(sine|triangle|square|sawtooth)(\d+)$/.exec(this._type);if(s&&(e=s[1]),"custom"!==this._type)this.type=0===t?e:e+t.toString();else{const e=new Float32Array(t);this._partials.forEach((t,s)=>e[s]=t),this._partials=Array.from(e),this.type=this._type}}_getRealImaginary(t,e){let s=2048;const n=new Float32Array(s),i=new Float32Array(s);let o=1;if("custom"===t){if(o=this._partials.length+1,this._partialCount=this._partials.length,s=o,0===this._partials.length)return[n,i]}else{const e=/^(sine|triangle|square|sawtooth)(\d+)$/.exec(t);e?(o=parseInt(e[2],10)+1,this._partialCount=parseInt(e[2],10),t=e[1],o=Math.max(o,2),s=o):this._partialCount=0,this._partials=[]}for(let r=1;r<s;++r){const s=2/(r*Math.PI);let a;switch(t){case"sine":a=r<=o?1:0,this._partials[r-1]=a;break;case"square":a=1&r?2*s:0,this._partials[r-1]=a;break;case"sawtooth":a=s*(1&r?1:-1),this._partials[r-1]=a;break;case"triangle":a=1&r?s*s*2*(r-1>>1&1?-1:1):0,this._partials[r-1]=a;break;case"custom":a=this._partials[r-1];break;default:throw new TypeError("Oscillator: invalid type: "+t)}0!==a?(n[r]=-a*Math.sin(e*r),i[r]=a*Math.cos(e*r)):(n[r]=0,i[r]=0)}return[n,i]}_inverseFFT(t,e,s){let n=0;const i=t.length;for(let o=0;o<i;o++)n+=t[o]*Math.cos(o*s)+e[o]*Math.sin(o*s);return n}getInitialValue(){const[t,e]=this._getRealImaginary(this._type,0);let s=0;const n=2*Math.PI;for(let i=0;i<32;i++)s=Math.max(this._inverseFFT(t,e,i/32*n),s);return clamp(-this._inverseFFT(t,e,this._phase)/s,-1,1)}get partials(){return this._partials.slice(0,this.partialCount)}set partials(t){this._partials=t,this._partialCount=this._partials.length,t.length&&(this.type="custom")}get phase(){return this._phase*(180/Math.PI)}set phase(t){this._phase=t*Math.PI/180,this.type=this._type}asArray(){return e(this,arguments,void 0,function*(t=1024){return generateWaveform(this,t)})}dispose(){return super.dispose(),null!==this._oscillator&&this._oscillator.dispose(),this._wave=void 0,this.frequency.dispose(),this.detune.dispose(),this}}Oscillator._periodicWaveCache=[];class AudioToGain extends SignalOperator{constructor(){super(...arguments),this.name="AudioToGain",this._norm=new WaveShaper({context:this.context,mapping:t=>(t+1)/2}),this.input=this._norm,this.output=this._norm}dispose(){return super.dispose(),this._norm.dispose(),this}}class Multiply extends Signal{constructor(){const t=optionsFromArguments(Multiply.getDefaults(),arguments,["value"]);super(t),this.name="Multiply",this.override=!1,this._mult=this.input=this.output=new Gain({context:this.context,minValue:t.minValue,maxValue:t.maxValue}),this.factor=this._param=this._mult.gain,this.factor.setValueAtTime(t.value,0)}static getDefaults(){return Object.assign(Signal.getDefaults(),{value:0})}dispose(){return super.dispose(),this._mult.dispose(),this}}class AMOscillator extends Source{constructor(){const t=optionsFromArguments(AMOscillator.getDefaults(),arguments,["frequency","type","modulationType"]);super(t),this.name="AMOscillator",this._modulationScale=new AudioToGain({context:this.context}),this._modulationNode=new Gain({context:this.context}),this._carrier=new Oscillator({context:this.context,detune:t.detune,frequency:t.frequency,onstop:()=>this.onstop(this),phase:t.phase,type:t.type}),this.frequency=this._carrier.frequency,this.detune=this._carrier.detune,this._modulator=new Oscillator({context:this.context,phase:t.phase,type:t.modulationType}),this.harmonicity=new Multiply({context:this.context,units:"positive",value:t.harmonicity}),this.frequency.chain(this.harmonicity,this._modulator.frequency),this._modulator.chain(this._modulationScale,this._modulationNode.gain),this._carrier.chain(this._modulationNode,this.output),readOnly(this,["frequency","detune","harmonicity"])}static getDefaults(){return Object.assign(Oscillator.getDefaults(),{harmonicity:1,modulationType:"square"})}_start(t){this._modulator.start(t),this._carrier.start(t)}_stop(t){this._modulator.stop(t),this._carrier.stop(t)}_restart(t){this._modulator.restart(t),this._carrier.restart(t)}get type(){return this._carrier.type}set type(t){this._carrier.type=t}get baseType(){return this._carrier.baseType}set baseType(t){this._carrier.baseType=t}get partialCount(){return this._carrier.partialCount}set partialCount(t){this._carrier.partialCount=t}get modulationType(){return this._modulator.type}set modulationType(t){this._modulator.type=t}get phase(){return this._carrier.phase}set phase(t){this._carrier.phase=t,this._modulator.phase=t}get partials(){return this._carrier.partials}set partials(t){this._carrier.partials=t}asArray(){return e(this,arguments,void 0,function*(t=1024){return generateWaveform(this,t)})}dispose(){return super.dispose(),this.frequency.dispose(),this.detune.dispose(),this.harmonicity.dispose(),this._carrier.dispose(),this._modulator.dispose(),this._modulationNode.dispose(),this._modulationScale.dispose(),this}}class FMOscillator extends Source{constructor(){const t=optionsFromArguments(FMOscillator.getDefaults(),arguments,["frequency","type","modulationType"]);super(t),this.name="FMOscillator",this._modulationNode=new Gain({context:this.context,gain:0}),this._carrier=new Oscillator({context:this.context,detune:t.detune,frequency:0,onstop:()=>this.onstop(this),phase:t.phase,type:t.type}),this.detune=this._carrier.detune,this.frequency=new Signal({context:this.context,units:"frequency",value:t.frequency}),this._modulator=new Oscillator({context:this.context,phase:t.phase,type:t.modulationType}),this.harmonicity=new Multiply({context:this.context,units:"positive",value:t.harmonicity}),this.modulationIndex=new Multiply({context:this.context,units:"positive",value:t.modulationIndex}),this.frequency.connect(this._carrier.frequency),this.frequency.chain(this.harmonicity,this._modulator.frequency),this.frequency.chain(this.modulationIndex,this._modulationNode),this._modulator.connect(this._modulationNode.gain),this._modulationNode.connect(this._carrier.frequency),this._carrier.connect(this.output),this.detune.connect(this._modulator.detune),readOnly(this,["modulationIndex","frequency","detune","harmonicity"])}static getDefaults(){return Object.assign(Oscillator.getDefaults(),{harmonicity:1,modulationIndex:2,modulationType:"square"})}_start(t){this._modulator.start(t),this._carrier.start(t)}_stop(t){this._modulator.stop(t),this._carrier.stop(t)}_restart(t){return this._modulator.restart(t),this._carrier.restart(t),this}get type(){return this._carrier.type}set type(t){this._carrier.type=t}get baseType(){return this._carrier.baseType}set baseType(t){this._carrier.baseType=t}get partialCount(){return this._carrier.partialCount}set partialCount(t){this._carrier.partialCount=t}get modulationType(){return this._modulator.type}set modulationType(t){this._modulator.type=t}get phase(){return this._carrier.phase}set phase(t){this._carrier.phase=t,this._modulator.phase=t}get partials(){return this._carrier.partials}set partials(t){this._carrier.partials=t}asArray(){return e(this,arguments,void 0,function*(t=1024){return generateWaveform(this,t)})}dispose(){return super.dispose(),this.frequency.dispose(),this.harmonicity.dispose(),this._carrier.dispose(),this._modulator.dispose(),this._modulationNode.dispose(),this.modulationIndex.dispose(),this}}class PulseOscillator extends Source{constructor(){const t=optionsFromArguments(PulseOscillator.getDefaults(),arguments,["frequency","width"]);super(t),this.name="PulseOscillator",this._widthGate=new Gain({context:this.context,gain:0}),this._thresh=new WaveShaper({context:this.context,mapping:t=>t<=0?-1:1}),this.width=new Signal({context:this.context,units:"audioRange",value:t.width}),this._triangle=new Oscillator({context:this.context,detune:t.detune,frequency:t.frequency,onstop:()=>this.onstop(this),phase:t.phase,type:"triangle"}),this.frequency=this._triangle.frequency,this.detune=this._triangle.detune,this._triangle.chain(this._thresh,this.output),this.width.chain(this._widthGate,this._thresh),readOnly(this,["width","frequency","detune"])}static getDefaults(){return Object.assign(Source.getDefaults(),{detune:0,frequency:440,phase:0,type:"pulse",width:.2})}_start(t){t=this.toSeconds(t),this._triangle.start(t),this._widthGate.gain.setValueAtTime(1,t)}_stop(t){t=this.toSeconds(t),this._triangle.stop(t),this._widthGate.gain.cancelScheduledValues(t),this._widthGate.gain.setValueAtTime(0,t)}_restart(t){this._triangle.restart(t),this._widthGate.gain.cancelScheduledValues(t),this._widthGate.gain.setValueAtTime(1,t)}get phase(){return this._triangle.phase}set phase(t){this._triangle.phase=t}get type(){return"pulse"}get baseType(){return"pulse"}get partials(){return[]}get partialCount(){return 0}set carrierType(t){this._triangle.type=t}asArray(){return e(this,arguments,void 0,function*(t=1024){return generateWaveform(this,t)})}dispose(){return super.dispose(),this._triangle.dispose(),this.width.dispose(),this._widthGate.dispose(),this._thresh.dispose(),this}}class FatOscillator extends Source{constructor(){const t=optionsFromArguments(FatOscillator.getDefaults(),arguments,["frequency","type","spread"]);super(t),this.name="FatOscillator",this._oscillators=[],this.frequency=new Signal({context:this.context,units:"frequency",value:t.frequency}),this.detune=new Signal({context:this.context,units:"cents",value:t.detune}),this._spread=t.spread,this._type=t.type,this._phase=t.phase,this._partials=t.partials,this._partialCount=t.partialCount,this.count=t.count,readOnly(this,["frequency","detune"])}static getDefaults(){return Object.assign(Oscillator.getDefaults(),{count:3,spread:20,type:"sawtooth"})}_start(t){t=this.toSeconds(t),this._forEach(e=>e.start(t))}_stop(t){t=this.toSeconds(t),this._forEach(e=>e.stop(t))}_restart(t){this._forEach(e=>e.restart(t))}_forEach(t){for(let e=0;e<this._oscillators.length;e++)t(this._oscillators[e],e)}get type(){return this._type}set type(t){this._type=t,this._forEach(e=>e.type=t)}get spread(){return this._spread}set spread(t){if(this._spread=t,this._oscillators.length>1){const e=-t/2,s=t/(this._oscillators.length-1);this._forEach((t,n)=>t.detune.value=e+s*n)}}get count(){return this._oscillators.length}set count(t){if(assertRange(t,1),this._oscillators.length!==t){this._forEach(t=>t.dispose()),this._oscillators=[];for(let e=0;e<t;e++){const s=new Oscillator({context:this.context,volume:-6-1.1*t,type:this._type,phase:this._phase+e/t*360,partialCount:this._partialCount,onstop:0===e?()=>this.onstop(this):noOp});"custom"===this.type&&(s.partials=this._partials),this.frequency.connect(s.frequency),this.detune.connect(s.detune),s.detune.overridden=!1,s.connect(this.output),this._oscillators[e]=s}this.spread=this._spread,"started"===this.state&&this._forEach(t=>t.start())}}get phase(){return this._phase}set phase(t){this._phase=t,this._forEach((t,e)=>t.phase=this._phase+e/this.count*360)}get baseType(){return this._oscillators[0].baseType}set baseType(t){this._forEach(e=>e.baseType=t),this._type=this._oscillators[0].type}get partials(){return this._oscillators[0].partials}set partials(t){this._partials=t,this._partialCount=this._partials.length,t.length&&(this._type="custom",this._forEach(e=>e.partials=t))}get partialCount(){return this._oscillators[0].partialCount}set partialCount(t){this._partialCount=t,this._forEach(e=>e.partialCount=t),this._type=this._oscillators[0].type}asArray(){return e(this,arguments,void 0,function*(t=1024){return generateWaveform(this,t)})}dispose(){return super.dispose(),this.frequency.dispose(),this.detune.dispose(),this._forEach(t=>t.dispose()),this}}class PWMOscillator extends Source{constructor(){const t=optionsFromArguments(PWMOscillator.getDefaults(),arguments,["frequency","modulationFrequency"]);super(t),this.name="PWMOscillator",this.sourceType="pwm",this._scale=new Multiply({context:this.context,value:2}),this._pulse=new PulseOscillator({context:this.context,frequency:t.modulationFrequency}),this._pulse.carrierType="sine",this.modulationFrequency=this._pulse.frequency,this._modulator=new Oscillator({context:this.context,detune:t.detune,frequency:t.frequency,onstop:()=>this.onstop(this),phase:t.phase}),this.frequency=this._modulator.frequency,this.detune=this._modulator.detune,this._modulator.chain(this._scale,this._pulse.width),this._pulse.connect(this.output),readOnly(this,["modulationFrequency","frequency","detune"])}static getDefaults(){return Object.assign(Source.getDefaults(),{detune:0,frequency:440,modulationFrequency:.4,phase:0,type:"pwm"})}_start(t){t=this.toSeconds(t),this._modulator.start(t),this._pulse.start(t)}_stop(t){t=this.toSeconds(t),this._modulator.stop(t),this._pulse.stop(t)}_restart(t){this._modulator.restart(t),this._pulse.restart(t)}get type(){return"pwm"}get baseType(){return"pwm"}get partials(){return[]}get partialCount(){return 0}get phase(){return this._modulator.phase}set phase(t){this._modulator.phase=t}asArray(){return e(this,arguments,void 0,function*(t=1024){return generateWaveform(this,t)})}dispose(){return super.dispose(),this._pulse.dispose(),this._scale.dispose(),this._modulator.dispose(),this}}const Nn={am:AMOscillator,fat:FatOscillator,fm:FMOscillator,oscillator:Oscillator,pulse:PulseOscillator,pwm:PWMOscillator};class OmniOscillator extends Source{constructor(){const t=optionsFromArguments(OmniOscillator.getDefaults(),arguments,["frequency","type"]);super(t),this.name="OmniOscillator",this.frequency=new Signal({context:this.context,units:"frequency",value:t.frequency}),this.detune=new Signal({context:this.context,units:"cents",value:t.detune}),readOnly(this,["frequency","detune"]),this.set(t)}static getDefaults(){return Object.assign(Oscillator.getDefaults(),FMOscillator.getDefaults(),AMOscillator.getDefaults(),FatOscillator.getDefaults(),PulseOscillator.getDefaults(),PWMOscillator.getDefaults())}_start(t){this._oscillator.start(t)}_stop(t){this._oscillator.stop(t)}_restart(t){return this._oscillator.restart(t),this}get type(){let t="";return["am","fm","fat"].some(t=>this._sourceType===t)&&(t=this._sourceType),t+this._oscillator.type}set type(t){"fm"===t.substr(0,2)?(this._createNewOscillator("fm"),this._oscillator=this._oscillator,this._oscillator.type=t.substr(2)):"am"===t.substr(0,2)?(this._createNewOscillator("am"),this._oscillator=this._oscillator,this._oscillator.type=t.substr(2)):"fat"===t.substr(0,3)?(this._createNewOscillator("fat"),this._oscillator=this._oscillator,this._oscillator.type=t.substr(3)):"pwm"===t?(this._createNewOscillator("pwm"),this._oscillator=this._oscillator):"pulse"===t?this._createNewOscillator("pulse"):(this._createNewOscillator("oscillator"),this._oscillator=this._oscillator,this._oscillator.type=t)}get partials(){return this._oscillator.partials}set partials(t){this._getOscType(this._oscillator,"pulse")||this._getOscType(this._oscillator,"pwm")||(this._oscillator.partials=t)}get partialCount(){return this._oscillator.partialCount}set partialCount(t){this._getOscType(this._oscillator,"pulse")||this._getOscType(this._oscillator,"pwm")||(this._oscillator.partialCount=t)}set(t){return Reflect.has(t,"type")&&t.type&&(this.type=t.type),super.set(t),this}_createNewOscillator(t){if(t!==this._sourceType){this._sourceType=t;const e=Nn[t],s=this.now();if(this._oscillator){const t=this._oscillator;t.stop(s),this.context.setTimeout(()=>t.dispose(),this.blockTime)}this._oscillator=new e({context:this.context}),this.frequency.connect(this._oscillator.frequency),this.detune.connect(this._oscillator.detune),this._oscillator.connect(this.output),this._oscillator.onstop=()=>this.onstop(this),"started"===this.state&&this._oscillator.start(s)}}get phase(){return this._oscillator.phase}set phase(t){this._oscillator.phase=t}get sourceType(){return this._sourceType}set sourceType(t){let e="sine";"pwm"!==this._oscillator.type&&"pulse"!==this._oscillator.type&&(e=this._oscillator.type),"fm"===t?this.type="fm"+e:"am"===t?this.type="am"+e:"fat"===t?this.type="fat"+e:"oscillator"===t?this.type=e:"pulse"===t?this.type="pulse":"pwm"===t&&(this.type="pwm")}_getOscType(t,e){return t instanceof Nn[e]}get baseType(){return this._oscillator.baseType}set baseType(t){this._getOscType(this._oscillator,"pulse")||this._getOscType(this._oscillator,"pwm")||"pulse"===t||"pwm"===t||(this._oscillator.baseType=t)}get width(){return this._getOscType(this._oscillator,"pulse")?this._oscillator.width:void 0}get count(){return this._getOscType(this._oscillator,"fat")?this._oscillator.count:void 0}set count(t){this._getOscType(this._oscillator,"fat")&&isNumber(t)&&(this._oscillator.count=t)}get spread(){return this._getOscType(this._oscillator,"fat")?this._oscillator.spread:void 0}set spread(t){this._getOscType(this._oscillator,"fat")&&isNumber(t)&&(this._oscillator.spread=t)}get modulationType(){return this._getOscType(this._oscillator,"fm")||this._getOscType(this._oscillator,"am")?this._oscillator.modulationType:void 0}set modulationType(t){(this._getOscType(this._oscillator,"fm")||this._getOscType(this._oscillator,"am"))&&isString(t)&&(this._oscillator.modulationType=t)}get modulationIndex(){return this._getOscType(this._oscillator,"fm")?this._oscillator.modulationIndex:void 0}get harmonicity(){return this._getOscType(this._oscillator,"fm")||this._getOscType(this._oscillator,"am")?this._oscillator.harmonicity:void 0}get modulationFrequency(){return this._getOscType(this._oscillator,"pwm")?this._oscillator.modulationFrequency:void 0}asArray(){return e(this,arguments,void 0,function*(t=1024){return generateWaveform(this,t)})}dispose(){return super.dispose(),this.detune.dispose(),this.frequency.dispose(),this._oscillator.dispose(),this}}class Add extends Signal{constructor(){super(optionsFromArguments(Add.getDefaults(),arguments,["value"])),this.override=!1,this.name="Add",this._sum=new Gain({context:this.context}),this.input=this._sum,this.output=this._sum,this.addend=this._param,connectSeries(this._constantSource,this._sum)}static getDefaults(){return Object.assign(Signal.getDefaults(),{value:0})}dispose(){return super.dispose(),this._sum.dispose(),this}}class Scale extends SignalOperator{constructor(){const t=optionsFromArguments(Scale.getDefaults(),arguments,["min","max"]);super(t),this.name="Scale",this._mult=this.input=new Multiply({context:this.context,value:t.max-t.min}),this._add=this.output=new Add({context:this.context,value:t.min}),this._min=t.min,this._max=t.max,this.input.connect(this.output)}static getDefaults(){return Object.assign(SignalOperator.getDefaults(),{max:1,min:0})}get min(){return this._min}set min(t){this._min=t,this._setRange()}get max(){return this._max}set max(t){this._max=t,this._setRange()}_setRange(){this._add.value=this._min,this._mult.value=this._max-this._min}dispose(){return super.dispose(),this._add.dispose(),this._mult.dispose(),this}}class Zero extends SignalOperator{constructor(){super(optionsFromArguments(Zero.getDefaults(),arguments)),this.name="Zero",this._gain=new Gain({context:this.context}),this.output=this._gain,this.input=void 0,connect(this.context.getConstant(0),this._gain)}dispose(){return super.dispose(),disconnect(this.context.getConstant(0),this._gain),this}}class LFO extends ToneAudioNode{constructor(){const t=optionsFromArguments(LFO.getDefaults(),arguments,["frequency","min","max"]);super(t),this.name="LFO",this._stoppedValue=0,this._units="number",this.convert=!0,this._fromType=Param.prototype._fromType,this._toType=Param.prototype._toType,this._is=Param.prototype._is,this._clampValue=Param.prototype._clampValue,this._oscillator=new Oscillator(t),this.frequency=this._oscillator.frequency,this._amplitudeGain=new Gain({context:this.context,gain:t.amplitude,units:"normalRange"}),this.amplitude=this._amplitudeGain.gain,this._stoppedSignal=new Signal({context:this.context,units:"audioRange",value:0}),this._zeros=new Zero({context:this.context}),this._a2g=new AudioToGain({context:this.context}),this._scaler=this.output=new Scale({context:this.context,max:t.max,min:t.min}),this.units=t.units,this.min=t.min,this.max=t.max,this._oscillator.chain(this._amplitudeGain,this._a2g,this._scaler),this._zeros.connect(this._a2g),this._stoppedSignal.connect(this._a2g),readOnly(this,["amplitude","frequency"]),this.phase=t.phase}static getDefaults(){return Object.assign(Oscillator.getDefaults(),{amplitude:1,frequency:"4n",max:1,min:0,type:"sine",units:"number"})}start(t){return t=this.toSeconds(t),this._stoppedSignal.setValueAtTime(0,t),this._oscillator.start(t),this}stop(t){return t=this.toSeconds(t),this._stoppedSignal.setValueAtTime(this._stoppedValue,t),this._oscillator.stop(t),this}sync(){return this._oscillator.sync(),this._oscillator.syncFrequency(),this}unsync(){return this._oscillator.unsync(),this._oscillator.unsyncFrequency(),this}_setStoppedValue(){this._stoppedValue=this._oscillator.getInitialValue(),this._stoppedSignal.value=this._stoppedValue}get min(){return this._toType(this._scaler.min)}set min(t){t=this._fromType(t),this._scaler.min=t}get max(){return this._toType(this._scaler.max)}set max(t){t=this._fromType(t),this._scaler.max=t}get type(){return this._oscillator.type}set type(t){this._oscillator.type=t,this._setStoppedValue()}get partials(){return this._oscillator.partials}set partials(t){this._oscillator.partials=t,this._setStoppedValue()}get phase(){return this._oscillator.phase}set phase(t){this._oscillator.phase=t,this._setStoppedValue()}get units(){return this._units}set units(t){const e=this.min,s=this.max;this._units=t,this.min=e,this.max=s}get state(){return this._oscillator.state}connect(t,e,s){return(t instanceof Param||t instanceof Signal)&&(this.convert=t.convert,this.units=t.units),connectSignal(this,t,e,s),this}dispose(){return super.dispose(),this._oscillator.dispose(),this._stoppedSignal.dispose(),this._zeros.dispose(),this._scaler.dispose(),this._a2g.dispose(),this._amplitudeGain.dispose(),this.amplitude.dispose(),this}}function range(t,e=1/0){const s=new WeakMap;return function(n,i){Reflect.defineProperty(n,i,{configurable:!0,enumerable:!0,get:function(){return s.get(this)},set:function(n){assertRange(n,t,e),s.set(this,n)}})}}function timeRange(t,e=1/0){const s=new WeakMap;return function(n,i){Reflect.defineProperty(n,i,{configurable:!0,enumerable:!0,get:function(){return s.get(this)},set:function(n){assertRange(this.toSeconds(n),t,e),s.set(this,n)}})}}class Player extends Source{constructor(){const t=optionsFromArguments(Player.getDefaults(),arguments,["url","onload"]);super(t),this.name="Player",this._activeSources=new Set,this._buffer=new ToneAudioBuffer({onload:this._onload.bind(this,t.onload),onerror:t.onerror,reverse:t.reverse,url:t.url}),this.autostart=t.autostart,this._loop=t.loop,this._loopStart=t.loopStart,this._loopEnd=t.loopEnd,this._playbackRate=t.playbackRate,this.fadeIn=t.fadeIn,this.fadeOut=t.fadeOut}static getDefaults(){return Object.assign(Source.getDefaults(),{autostart:!1,fadeIn:0,fadeOut:0,loop:!1,loopEnd:0,loopStart:0,onload:noOp,onerror:noOp,playbackRate:1,reverse:!1})}load(t){return e(this,void 0,void 0,function*(){return yield this._buffer.load(t),this._onload(),this})}_onload(t=noOp){t(),this.autostart&&this.start()}_onSourceEnd(t){this.onstop(this),this._activeSources.delete(t),0!==this._activeSources.size||this._synced||"started"!==this._state.getValueAtTime(this.now())||(this._state.cancel(this.now()),this._state.setStateAtTime("stopped",this.now()))}start(t,e,s){return super.start(t,e,s),this}_start(t,e,s){e=this._loop?defaultArg(e,this._loopStart):defaultArg(e,0);const n=this.toSeconds(e),i=s;s=defaultArg(s,Math.max(this._buffer.duration-n,0));let o=this.toSeconds(s);o/=this._playbackRate,t=this.toSeconds(t);const r=new ToneBufferSource({url:this._buffer,context:this.context,fadeIn:this.fadeIn,fadeOut:this.fadeOut,loop:this._loop,loopEnd:this._loopEnd,loopStart:this._loopStart,onended:this._onSourceEnd.bind(this),playbackRate:this._playbackRate}).connect(this.output);this._loop||this._synced||(this._state.cancel(t+o),this._state.setStateAtTime("stopped",t+o,{implicitEnd:!0})),this._activeSources.add(r),this._loop&&isUndef(i)?r.start(t,n):r.start(t,n,o-this.toSeconds(this.fadeOut))}_stop(t){const e=this.toSeconds(t);this._activeSources.forEach(t=>t.stop(e))}restart(t,e,s){return super.restart(t,e,s),this}_restart(t,e,s){var n;null===(n=[...this._activeSources].pop())||void 0===n||n.stop(t),this._start(t,e,s)}seek(t,e){const s=this.toSeconds(e);if("started"===this._state.getValueAtTime(s)){const e=this.toSeconds(t);this._stop(s),this._start(s,e)}return this}setLoopPoints(t,e){return this.loopStart=t,this.loopEnd=e,this}get loopStart(){return this._loopStart}set loopStart(t){this._loopStart=t,this.buffer.loaded&&assertRange(this.toSeconds(t),0,this.buffer.duration),this._activeSources.forEach(e=>{e.loopStart=t})}get loopEnd(){return this._loopEnd}set loopEnd(t){this._loopEnd=t,this.buffer.loaded&&assertRange(this.toSeconds(t),0,this.buffer.duration),this._activeSources.forEach(e=>{e.loopEnd=t})}get buffer(){return this._buffer}set buffer(t){this._buffer.set(t)}get loop(){return this._loop}set loop(t){if(this._loop!==t&&(this._loop=t,this._activeSources.forEach(e=>{e.loop=t}),t)){const t=this._state.getNextState("stopped",this.now());t&&this._state.cancel(t.time)}}get playbackRate(){return this._playbackRate}set playbackRate(t){this._playbackRate=t;const e=this.now(),s=this._state.getNextState("stopped",e);s&&s.implicitEnd&&(this._state.cancel(s.time),this._activeSources.forEach(t=>t.cancelStop())),this._activeSources.forEach(s=>{s.playbackRate.setValueAtTime(t,e)})}get reverse(){return this._buffer.reverse}set reverse(t){this._buffer.reverse=t}get loaded(){return this._buffer.loaded}dispose(){return super.dispose(),this._activeSources.forEach(t=>t.dispose()),this._activeSources.clear(),this._buffer.dispose(),this}}s([timeRange(0)],Player.prototype,"fadeIn",void 0),s([timeRange(0)],Player.prototype,"fadeOut",void 0);class Players extends ToneAudioNode{constructor(){const t=optionsFromArguments(Players.getDefaults(),arguments,["urls","onload"],"urls");super(t),this.name="Players",this.input=void 0,this._players=new Map,this._volume=this.output=new Volume({context:this.context,volume:t.volume}),this.volume=this._volume.volume,readOnly(this,"volume"),this._buffers=new ToneAudioBuffers({urls:t.urls,onload:t.onload,baseUrl:t.baseUrl,onerror:t.onerror}),this.mute=t.mute,this._fadeIn=t.fadeIn,this._fadeOut=t.fadeOut}static getDefaults(){return Object.assign(Source.getDefaults(),{baseUrl:"",fadeIn:0,fadeOut:0,mute:!1,onload:noOp,onerror:noOp,urls:{},volume:0})}get mute(){return this._volume.mute}set mute(t){this._volume.mute=t}get fadeIn(){return this._fadeIn}set fadeIn(t){this._fadeIn=t,this._players.forEach(e=>{e.fadeIn=t})}get fadeOut(){return this._fadeOut}set fadeOut(t){this._fadeOut=t,this._players.forEach(e=>{e.fadeOut=t})}get state(){return Array.from(this._players).some(([t,e])=>"started"===e.state)?"started":"stopped"}has(t){return this._buffers.has(t)}player(t){if(assert(this.has(t),`No Player with the name ${t} exists on this object`),!this._players.has(t)){const e=new Player({context:this.context,fadeIn:this._fadeIn,fadeOut:this._fadeOut,url:this._buffers.get(t)}).connect(this.output);this._players.set(t,e)}return this._players.get(t)}get loaded(){return this._buffers.loaded}add(t,e,s){return assert(!this._buffers.has(t),"A buffer with that name already exists on this object"),this._buffers.add(t,e,s),this}stopAll(t){return this._players.forEach(e=>e.stop(t)),this}dispose(){return super.dispose(),this._volume.dispose(),this.volume.dispose(),this._players.forEach(t=>t.dispose()),this._buffers.dispose(),this}}class GrainPlayer extends Source{constructor(){const t=optionsFromArguments(GrainPlayer.getDefaults(),arguments,["url","onload"]);super(t),this.name="GrainPlayer",this._loopStart=0,this._loopEnd=0,this._activeSources=[],this.buffer=new ToneAudioBuffer({onload:t.onload,onerror:t.onerror,reverse:t.reverse,url:t.url}),this._clock=new Clock({context:this.context,callback:this._tick.bind(this),frequency:1/t.grainSize}),this._playbackRate=t.playbackRate,this._grainSize=t.grainSize,this._overlap=t.overlap,this.detune=t.detune,this.overlap=t.overlap,this.loop=t.loop,this.playbackRate=t.playbackRate,this.grainSize=t.grainSize,this.loopStart=t.loopStart,this.loopEnd=t.loopEnd,this.reverse=t.reverse,this._clock.on("stop",this._onstop.bind(this))}static getDefaults(){return Object.assign(Source.getDefaults(),{onload:noOp,onerror:noOp,overlap:.1,grainSize:.2,playbackRate:1,detune:0,loop:!1,loopStart:0,loopEnd:0,reverse:!1})}_start(t,e,s){e=defaultArg(e,0),e=this.toSeconds(e),t=this.toSeconds(t);const n=1/this._clock.frequency.getValueAtTime(t);this._clock.start(t,e/n),s&&this.stop(t+this.toSeconds(s))}restart(t,e,s){return super.restart(t,e,s),this}_restart(t,e,s){this._stop(t),this._start(t,e,s)}_stop(t){this._clock.stop(t)}_onstop(t){this._activeSources.forEach(e=>{e.fadeOut=0,e.stop(t)}),this.onstop(this)}_tick(t){const e=this._clock.getTicksAtTime(t),s=e*this._grainSize;if(this.log("offset",s),!this.loop&&s>this.buffer.duration)return void this.stop(t);const n=s<this._overlap?0:this._overlap,i=new ToneBufferSource({context:this.context,url:this.buffer,fadeIn:n,fadeOut:this._overlap,loop:this.loop,loopStart:this._loopStart,loopEnd:this._loopEnd,playbackRate:intervalToFrequencyRatio(this.detune/100)}).connect(this.output);i.start(t,this._grainSize*e),i.stop(t+this._grainSize/this.playbackRate),this._activeSources.push(i),i.onended=()=>{const t=this._activeSources.indexOf(i);-1!==t&&this._activeSources.splice(t,1)}}get playbackRate(){return this._playbackRate}set playbackRate(t){assertRange(t,.001),this._playbackRate=t,this.grainSize=this._grainSize}get loopStart(){return this._loopStart}set loopStart(t){this.buffer.loaded&&assertRange(this.toSeconds(t),0,this.buffer.duration),this._loopStart=this.toSeconds(t)}get loopEnd(){return this._loopEnd}set loopEnd(t){this.buffer.loaded&&assertRange(this.toSeconds(t),0,this.buffer.duration),this._loopEnd=this.toSeconds(t)}get reverse(){return this.buffer.reverse}set reverse(t){this.buffer.reverse=t}get grainSize(){return this._grainSize}set grainSize(t){this._grainSize=this.toSeconds(t),this._clock.frequency.setValueAtTime(this._playbackRate/this._grainSize,this.now())}get overlap(){return this._overlap}set overlap(t){const e=this.toSeconds(t);assertRange(e,0),this._overlap=e}get loaded(){return this.buffer.loaded}dispose(){return super.dispose(),this.buffer.dispose(),this._clock.dispose(),this._activeSources.forEach(t=>t.dispose()),this}}class Abs extends SignalOperator{constructor(){super(...arguments),this.name="Abs",this._abs=new WaveShaper({context:this.context,mapping:t=>Math.abs(t)<.001?0:Math.abs(t)}),this.input=this._abs,this.output=this._abs}dispose(){return super.dispose(),this._abs.dispose(),this}}class GainToAudio extends SignalOperator{constructor(){super(...arguments),this.name="GainToAudio",this._norm=new WaveShaper({context:this.context,mapping:t=>2*Math.abs(t)-1}),this.input=this._norm,this.output=this._norm}dispose(){return super.dispose(),this._norm.dispose(),this}}class Negate extends SignalOperator{constructor(){super(...arguments),this.name="Negate",this._multiply=new Multiply({context:this.context,value:-1}),this.input=this._multiply,this.output=this._multiply}dispose(){return super.dispose(),this._multiply.dispose(),this}}class Subtract extends Signal{constructor(){super(optionsFromArguments(Subtract.getDefaults(),arguments,["value"])),this.override=!1,this.name="Subtract",this._sum=new Gain({context:this.context}),this.input=this._sum,this.output=this._sum,this._neg=new Negate({context:this.context}),this.subtrahend=this._param,connectSeries(this._constantSource,this._neg,this._sum)}static getDefaults(){return Object.assign(Signal.getDefaults(),{value:0})}dispose(){return super.dispose(),this._neg.dispose(),this._sum.dispose(),this}}class GreaterThanZero extends SignalOperator{constructor(){super(optionsFromArguments(GreaterThanZero.getDefaults(),arguments)),this.name="GreaterThanZero",this._thresh=this.output=new WaveShaper({context:this.context,length:127,mapping:t=>t<=0?0:1}),this._scale=this.input=new Multiply({context:this.context,value:1e4}),this._scale.connect(this._thresh)}dispose(){return super.dispose(),this._scale.dispose(),this._thresh.dispose(),this}}class GreaterThan extends Signal{constructor(){const t=optionsFromArguments(GreaterThan.getDefaults(),arguments,["value"]);super(t),this.name="GreaterThan",this.override=!1,this._subtract=this.input=new Subtract({context:this.context,value:t.value}),this._gtz=this.output=new GreaterThanZero({context:this.context}),this.comparator=this._param=this._subtract.subtrahend,readOnly(this,"comparator"),this._subtract.connect(this._gtz)}static getDefaults(){return Object.assign(Signal.getDefaults(),{value:0})}dispose(){return super.dispose(),this._gtz.dispose(),this._subtract.dispose(),this.comparator.dispose(),this}}class ScaleExp extends Scale{constructor(){const t=optionsFromArguments(ScaleExp.getDefaults(),arguments,["min","max","exponent"]);super(t),this.name="ScaleExp",this.input=this._exp=new Pow({context:this.context,value:t.exponent}),this._exp.connect(this._mult)}static getDefaults(){return Object.assign(Scale.getDefaults(),{exponent:1})}get exponent(){return this._exp.value}set exponent(t){this._exp.value=t}dispose(){return super.dispose(),this._exp.dispose(),this}}class Envelope extends ToneAudioNode{constructor(){const t=optionsFromArguments(Envelope.getDefaults(),arguments,["attack","decay","sustain","release"]);super(t),this.name="Envelope",this._sig=new Signal({context:this.context,value:0}),this.output=this._sig,this.input=void 0,this.attack=t.attack,this.decay=t.decay,this.sustain=t.sustain,this.release=t.release,this.attackCurve=t.attackCurve,this.releaseCurve=t.releaseCurve,this.decayCurve=t.decayCurve}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{attack:.01,attackCurve:"linear",decay:.1,decayCurve:"exponential",release:1,releaseCurve:"exponential",sustain:.5})}get value(){return this.getValueAtTime(this.now())}_getCurve(t,e){if(isString(t))return t;{let s;for(s in Pn)if(Pn[s][e]===t)return s;return t}}_setCurve(t,e,s){if(isString(s)&&Reflect.has(Pn,s)){const n=Pn[s];isObject(n)?"_decayCurve"!==t&&(this[t]=n[e]):this[t]=n}else{if(!isArray(s)||"_decayCurve"===t)throw new Error("Envelope: invalid curve: "+s);this[t]=s}}get attackCurve(){return this._getCurve(this._attackCurve,"In")}set attackCurve(t){this._setCurve("_attackCurve","In",t)}get releaseCurve(){return this._getCurve(this._releaseCurve,"Out")}set releaseCurve(t){this._setCurve("_releaseCurve","Out",t)}get decayCurve(){return this._getCurve(this._decayCurve,"Out")}set decayCurve(t){this._setCurve("_decayCurve","Out",t)}triggerAttack(t,e=1){this.log("triggerAttack",t,e),t=this.toSeconds(t);let s=this.toSeconds(this.attack);const n=this.toSeconds(this.decay),i=this.getValueAtTime(t);if(i>0){s=(1-i)/(1/s)}if(s<this.sampleTime)this._sig.cancelScheduledValues(t),this._sig.setValueAtTime(e,t);else if("linear"===this._attackCurve)this._sig.linearRampTo(e,s,t);else if("exponential"===this._attackCurve)this._sig.targetRampTo(e,s,t);else{this._sig.cancelAndHoldAtTime(t);let n=this._attackCurve;for(let t=1;t<n.length;t++)if(n[t-1]<=i&&i<=n[t]){n=this._attackCurve.slice(t),n[0]=i;break}this._sig.setValueCurveAtTime(n,t,s,e)}if(n&&this.sustain<1){const i=e*this.sustain,o=t+s;this.log("decay",o),"linear"===this._decayCurve?this._sig.linearRampToValueAtTime(i,n+o):this._sig.exponentialApproachValueAtTime(i,o,n)}return this}triggerRelease(t){this.log("triggerRelease",t),t=this.toSeconds(t);const e=this.getValueAtTime(t);if(e>0){const s=this.toSeconds(this.release);s<this.sampleTime?this._sig.setValueAtTime(0,t):"linear"===this._releaseCurve?this._sig.linearRampTo(0,s,t):"exponential"===this._releaseCurve?this._sig.targetRampTo(0,s,t):(assert(isArray(this._releaseCurve),"releaseCurve must be either 'linear', 'exponential' or an array"),this._sig.cancelAndHoldAtTime(t),this._sig.setValueCurveAtTime(this._releaseCurve,t,s,e))}return this}getValueAtTime(t){return this._sig.getValueAtTime(t)}triggerAttackRelease(t,e,s=1){return e=this.toSeconds(e),this.triggerAttack(e,s),this.triggerRelease(e+this.toSeconds(t)),this}cancel(t){return this._sig.cancelScheduledValues(this.toSeconds(t)),this}connect(t,e=0,s=0){return connectSignal(this,t,e,s),this}asArray(){return e(this,arguments,void 0,function*(t=1024){const e=t/this.context.sampleRate,s=new OfflineContext(1,e,this.context.sampleRate),n=this.toSeconds(this.attack)+this.toSeconds(this.decay),i=n+this.toSeconds(this.release),o=.1*i,r=i+o,a=new this.constructor(Object.assign(this.get(),{attack:e*this.toSeconds(this.attack)/r,decay:e*this.toSeconds(this.decay)/r,release:e*this.toSeconds(this.release)/r,context:s}));a._sig.toDestination(),a.triggerAttackRelease(e*(n+o)/r,0);return(yield s.render()).getChannelData(0)})}dispose(){return super.dispose(),this._sig.dispose(),this}}s([timeRange(0)],Envelope.prototype,"attack",void 0),s([timeRange(0)],Envelope.prototype,"decay",void 0),s([range(0,1)],Envelope.prototype,"sustain",void 0),s([timeRange(0)],Envelope.prototype,"release",void 0);const Pn=(()=>{const t=128;let e,s;const n=[];for(e=0;e<t;e++)n[e]=Math.sin(e/127*(Math.PI/2));const i=[];for(e=0;e<127;e++){s=e/127;const t=Math.sin(s*(2*Math.PI)*6.4-Math.PI/2)+1;i[e]=t/10+.83*s}i[127]=1;const o=[];for(e=0;e<t;e++)o[e]=Math.ceil(e/127*5)/5;const r=[];for(e=0;e<t;e++)s=e/127,r[e]=.5*(1-Math.cos(Math.PI*s));const a=[];for(e=0;e<t;e++){s=e/127;const t=4*Math.pow(s,3)+.2,n=Math.cos(t*Math.PI*2*s);a[e]=Math.abs(n*(1-s))}function invertCurve(t){const e=new Array(t.length);for(let s=0;s<t.length;s++)e[s]=1-t[s];return e}return{bounce:{In:invertCurve(a),Out:a},cosine:{In:n,Out:function reverseCurve(t){return t.slice(0).reverse()}(n)},exponential:"exponential",linear:"linear",ripple:{In:i,Out:invertCurve(i)},sine:{In:r,Out:invertCurve(r)},step:{In:o,Out:invertCurve(o)}}})();class Instrument extends ToneAudioNode{constructor(){const t=optionsFromArguments(Instrument.getDefaults(),arguments);super(t),this._scheduledEvents=[],this._synced=!1,this._original_triggerAttack=this.triggerAttack,this._original_triggerRelease=this.triggerRelease,this._syncedRelease=t=>this._original_triggerRelease(t),this._volume=this.output=new Volume({context:this.context,volume:t.volume}),this.volume=this._volume.volume,readOnly(this,"volume")}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{volume:0})}sync(){return this._syncState()&&(this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",0),this.context.transport.on("stop",this._syncedRelease),this.context.transport.on("pause",this._syncedRelease),this.context.transport.on("loopEnd",this._syncedRelease)),this}_syncState(){let t=!1;return this._synced||(this._synced=!0,t=!0),t}_syncMethod(t,e){const s=this["_original_"+t]=this[t];this[t]=(...t)=>{const n=t[e],i=this.context.transport.schedule(n=>{t[e]=n,s.apply(this,t)},n);this._scheduledEvents.push(i)}}unsync(){return this._scheduledEvents.forEach(t=>this.context.transport.clear(t)),this._scheduledEvents=[],this._synced&&(this._synced=!1,this.triggerAttack=this._original_triggerAttack,this.triggerRelease=this._original_triggerRelease,this.context.transport.off("stop",this._syncedRelease),this.context.transport.off("pause",this._syncedRelease),this.context.transport.off("loopEnd",this._syncedRelease)),this}triggerAttackRelease(t,e,s,n){const i=this.toSeconds(s),o=this.toSeconds(e);return this.triggerAttack(t,i,n),this.triggerRelease(i+o),this}dispose(){return super.dispose(),this._volume.dispose(),this.unsync(),this._scheduledEvents=[],this}}class Monophonic extends Instrument{constructor(){const t=optionsFromArguments(Monophonic.getDefaults(),arguments);super(t),this.portamento=t.portamento,this.onsilence=t.onsilence}static getDefaults(){return Object.assign(Instrument.getDefaults(),{detune:0,onsilence:noOp,portamento:0})}triggerAttack(t,e,s=1){this.log("triggerAttack",t,e,s);const n=this.toSeconds(e);return this._triggerEnvelopeAttack(n,s),this.setNote(t,n),this}triggerRelease(t){this.log("triggerRelease",t);const e=this.toSeconds(t);return this._triggerEnvelopeRelease(e),this}setNote(t,e){const s=this.toSeconds(e),n=t instanceof FrequencyClass?t.toFrequency():t;if(this.portamento>0&&this.getLevelAtTime(s)>.05){const t=this.toSeconds(this.portamento);this.frequency.exponentialRampTo(n,t,s)}else this.frequency.setValueAtTime(n,s);return this}}s([timeRange(0)],Monophonic.prototype,"portamento",void 0);class AmplitudeEnvelope extends Envelope{constructor(){super(optionsFromArguments(AmplitudeEnvelope.getDefaults(),arguments,["attack","decay","sustain","release"])),this.name="AmplitudeEnvelope",this._gainNode=new Gain({context:this.context,gain:0}),this.output=this._gainNode,this.input=this._gainNode,this._sig.connect(this._gainNode.gain),this.output=this._gainNode,this.input=this._gainNode}dispose(){return super.dispose(),this._gainNode.dispose(),this}}class Synth extends Monophonic{constructor(){const t=optionsFromArguments(Synth.getDefaults(),arguments);super(t),this.name="Synth",this.oscillator=new OmniOscillator(Object.assign({context:this.context,detune:t.detune,onstop:()=>this.onsilence(this)},t.oscillator)),this.frequency=this.oscillator.frequency,this.detune=this.oscillator.detune,this.envelope=new AmplitudeEnvelope(Object.assign({context:this.context},t.envelope)),this.oscillator.chain(this.envelope,this.output),readOnly(this,["oscillator","frequency","detune","envelope"])}static getDefaults(){return Object.assign(Monophonic.getDefaults(),{envelope:Object.assign(omitFromObject(Envelope.getDefaults(),Object.keys(ToneAudioNode.getDefaults())),{attack:.005,decay:.1,release:1,sustain:.3}),oscillator:Object.assign(omitFromObject(OmniOscillator.getDefaults(),[...Object.keys(Source.getDefaults()),"frequency","detune"]),{type:"triangle"})})}_triggerEnvelopeAttack(t,e){if(this.envelope.triggerAttack(t,e),this.oscillator.start(t),0===this.envelope.sustain){const e=this.toSeconds(this.envelope.attack),s=this.toSeconds(this.envelope.decay);this.oscillator.stop(t+e+s)}}_triggerEnvelopeRelease(t){this.envelope.triggerRelease(t),this.oscillator.stop(t+this.toSeconds(this.envelope.release))}getLevelAtTime(t){return t=this.toSeconds(t),this.envelope.getValueAtTime(t)}dispose(){return super.dispose(),this.oscillator.dispose(),this.envelope.dispose(),this}}class ModulationSynth extends Monophonic{constructor(){const t=optionsFromArguments(ModulationSynth.getDefaults(),arguments);super(t),this.name="ModulationSynth",this._carrier=new Synth({context:this.context,oscillator:t.oscillator,envelope:t.envelope,onsilence:()=>this.onsilence(this),volume:-10}),this._modulator=new Synth({context:this.context,oscillator:t.modulation,envelope:t.modulationEnvelope,volume:-10}),this.oscillator=this._carrier.oscillator,this.envelope=this._carrier.envelope,this.modulation=this._modulator.oscillator,this.modulationEnvelope=this._modulator.envelope,this.frequency=new Signal({context:this.context,units:"frequency"}),this.detune=new Signal({context:this.context,value:t.detune,units:"cents"}),this.harmonicity=new Multiply({context:this.context,value:t.harmonicity,minValue:0}),this._modulationNode=new Gain({context:this.context,gain:0}),readOnly(this,["frequency","harmonicity","oscillator","envelope","modulation","modulationEnvelope","detune"])}static getDefaults(){return Object.assign(Monophonic.getDefaults(),{harmonicity:3,oscillator:Object.assign(omitFromObject(OmniOscillator.getDefaults(),[...Object.keys(Source.getDefaults()),"frequency","detune"]),{type:"sine"}),envelope:Object.assign(omitFromObject(Envelope.getDefaults(),Object.keys(ToneAudioNode.getDefaults())),{attack:.01,decay:.01,sustain:1,release:.5}),modulation:Object.assign(omitFromObject(OmniOscillator.getDefaults(),[...Object.keys(Source.getDefaults()),"frequency","detune"]),{type:"square"}),modulationEnvelope:Object.assign(omitFromObject(Envelope.getDefaults(),Object.keys(ToneAudioNode.getDefaults())),{attack:.5,decay:0,sustain:1,release:.5})})}_triggerEnvelopeAttack(t,e){this._carrier._triggerEnvelopeAttack(t,e),this._modulator._triggerEnvelopeAttack(t,e)}_triggerEnvelopeRelease(t){return this._carrier._triggerEnvelopeRelease(t),this._modulator._triggerEnvelopeRelease(t),this}getLevelAtTime(t){return t=this.toSeconds(t),this.envelope.getValueAtTime(t)}dispose(){return super.dispose(),this._carrier.dispose(),this._modulator.dispose(),this.frequency.dispose(),this.detune.dispose(),this.harmonicity.dispose(),this._modulationNode.dispose(),this}}class AMSynth extends ModulationSynth{constructor(){super(optionsFromArguments(AMSynth.getDefaults(),arguments)),this.name="AMSynth",this._modulationScale=new AudioToGain({context:this.context}),this.frequency.connect(this._carrier.frequency),this.frequency.chain(this.harmonicity,this._modulator.frequency),this.detune.fan(this._carrier.detune,this._modulator.detune),this._modulator.chain(this._modulationScale,this._modulationNode.gain),this._carrier.chain(this._modulationNode,this.output)}dispose(){return super.dispose(),this._modulationScale.dispose(),this}}class BiquadFilter extends ToneAudioNode{constructor(){const t=optionsFromArguments(BiquadFilter.getDefaults(),arguments,["frequency","type"]);super(t),this.name="BiquadFilter",this._filter=this.context.createBiquadFilter(),this.input=this.output=this._filter,this.Q=new Param({context:this.context,units:"number",value:t.Q,param:this._filter.Q}),this.frequency=new Param({context:this.context,units:"frequency",value:t.frequency,param:this._filter.frequency}),this.detune=new Param({context:this.context,units:"cents",value:t.detune,param:this._filter.detune}),this.gain=new Param({context:this.context,units:"decibels",convert:!1,value:t.gain,param:this._filter.gain}),this.type=t.type}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{Q:1,type:"lowpass",frequency:350,detune:0,gain:0})}get type(){return this._filter.type}set type(t){assert(-1!==["lowpass","highpass","bandpass","lowshelf","highshelf","notch","allpass","peaking"].indexOf(t),`Invalid filter type: ${t}`),this._filter.type=t}getFrequencyResponse(t=128){const e=new Float32Array(t);for(let o=0;o<t;o++){const s=19980*Math.pow(o/t,2)+20;e[o]=s}const s=new Float32Array(t),n=new Float32Array(t),i=this.context.createBiquadFilter();return i.type=this.type,i.Q.value=this.Q.value,i.frequency.value=this.frequency.value,i.gain.value=this.gain.value,i.getFrequencyResponse(e,s,n),s}dispose(){return super.dispose(),this._filter.disconnect(),this.Q.dispose(),this.frequency.dispose(),this.gain.dispose(),this.detune.dispose(),this}}class Filter extends ToneAudioNode{constructor(){const t=optionsFromArguments(Filter.getDefaults(),arguments,["frequency","type","rolloff"]);super(t),this.name="Filter",this.input=new Gain({context:this.context}),this.output=new Gain({context:this.context}),this._filters=[],this._filters=[],this.Q=new Signal({context:this.context,units:"positive",value:t.Q}),this.frequency=new Signal({context:this.context,units:"frequency",value:t.frequency}),this.detune=new Signal({context:this.context,units:"cents",value:t.detune}),this.gain=new Signal({context:this.context,units:"decibels",convert:!1,value:t.gain}),this._type=t.type,this.rolloff=t.rolloff,readOnly(this,["detune","frequency","gain","Q"])}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{Q:1,detune:0,frequency:350,gain:0,rolloff:-12,type:"lowpass"})}get type(){return this._type}set type(t){assert(-1!==["lowpass","highpass","bandpass","lowshelf","highshelf","notch","allpass","peaking"].indexOf(t),`Invalid filter type: ${t}`),this._type=t,this._filters.forEach(e=>e.type=t)}get rolloff(){return this._rolloff}set rolloff(t){const e=isNumber(t)?t:parseInt(t,10),s=[-12,-24,-48,-96];let n=s.indexOf(e);assert(-1!==n,`rolloff can only be ${s.join(", ")}`),n+=1,this._rolloff=e,this.input.disconnect(),this._filters.forEach(t=>t.disconnect()),this._filters=new Array(n);for(let i=0;i<n;i++){const t=new BiquadFilter({context:this.context});t.type=this._type,this.frequency.connect(t.frequency),this.detune.connect(t.detune),this.Q.connect(t.Q),this.gain.connect(t.gain),this._filters[i]=t}this._internalChannels=this._filters,connectSeries(this.input,...this._internalChannels,this.output)}getFrequencyResponse(t=128){const e=new BiquadFilter({context:this.context,frequency:this.frequency.value,gain:this.gain.value,Q:this.Q.value,type:this._type,detune:this.detune.value}),s=new Float32Array(t).map(()=>1);return this._filters.forEach(()=>{e.getFrequencyResponse(t).forEach((t,e)=>s[e]*=t)}),e.dispose(),s}dispose(){return super.dispose(),this._filters.forEach(t=>{t.dispose()}),writable(this,["detune","frequency","gain","Q"]),this.frequency.dispose(),this.Q.dispose(),this.detune.dispose(),this.gain.dispose(),this}}class FrequencyEnvelope extends Envelope{constructor(){const t=optionsFromArguments(FrequencyEnvelope.getDefaults(),arguments,["attack","decay","sustain","release"]);super(t),this.name="FrequencyEnvelope",this._octaves=t.octaves,this._baseFrequency=this.toFrequency(t.baseFrequency),this._exponent=this.input=new Pow({context:this.context,value:t.exponent}),this._scale=this.output=new Scale({context:this.context,min:this._baseFrequency,max:this._baseFrequency*Math.pow(2,this._octaves)}),this._sig.chain(this._exponent,this._scale)}static getDefaults(){return Object.assign(Envelope.getDefaults(),{baseFrequency:200,exponent:1,octaves:4})}get baseFrequency(){return this._baseFrequency}set baseFrequency(t){const e=this.toFrequency(t);assertRange(e,0),this._baseFrequency=e,this._scale.min=this._baseFrequency,this.octaves=this._octaves}get octaves(){return this._octaves}set octaves(t){this._octaves=t,this._scale.max=this._baseFrequency*Math.pow(2,t)}get exponent(){return this._exponent.value}set exponent(t){this._exponent.value=t}dispose(){return super.dispose(),this._exponent.dispose(),this._scale.dispose(),this}}class MonoSynth extends Monophonic{constructor(){const t=optionsFromArguments(MonoSynth.getDefaults(),arguments);super(t),this.name="MonoSynth",this.oscillator=new OmniOscillator(Object.assign(t.oscillator,{context:this.context,detune:t.detune,onstop:()=>this.onsilence(this)})),this.frequency=this.oscillator.frequency,this.detune=this.oscillator.detune,this.filter=new Filter(Object.assign(t.filter,{context:this.context})),this.filterEnvelope=new FrequencyEnvelope(Object.assign(t.filterEnvelope,{context:this.context})),this.envelope=new AmplitudeEnvelope(Object.assign(t.envelope,{context:this.context})),this.oscillator.chain(this.filter,this.envelope,this.output),this.filterEnvelope.connect(this.filter.frequency),readOnly(this,["oscillator","frequency","detune","filter","filterEnvelope","envelope"])}static getDefaults(){return Object.assign(Monophonic.getDefaults(),{envelope:Object.assign(omitFromObject(Envelope.getDefaults(),Object.keys(ToneAudioNode.getDefaults())),{attack:.005,decay:.1,release:1,sustain:.9}),filter:Object.assign(omitFromObject(Filter.getDefaults(),Object.keys(ToneAudioNode.getDefaults())),{Q:1,rolloff:-12,type:"lowpass"}),filterEnvelope:Object.assign(omitFromObject(FrequencyEnvelope.getDefaults(),Object.keys(ToneAudioNode.getDefaults())),{attack:.6,baseFrequency:200,decay:.2,exponent:2,octaves:3,release:2,sustain:.5}),oscillator:Object.assign(omitFromObject(OmniOscillator.getDefaults(),Object.keys(Source.getDefaults())),{type:"sawtooth"})})}_triggerEnvelopeAttack(t,e=1){if(this.envelope.triggerAttack(t,e),this.filterEnvelope.triggerAttack(t),this.oscillator.start(t),0===this.envelope.sustain){const e=this.toSeconds(this.envelope.attack),s=this.toSeconds(this.envelope.decay);this.oscillator.stop(t+e+s)}}_triggerEnvelopeRelease(t){this.envelope.triggerRelease(t),this.filterEnvelope.triggerRelease(t),this.oscillator.stop(t+this.toSeconds(this.envelope.release))}getLevelAtTime(t){return t=this.toSeconds(t),this.envelope.getValueAtTime(t)}dispose(){return super.dispose(),this.oscillator.dispose(),this.envelope.dispose(),this.filterEnvelope.dispose(),this.filter.dispose(),this}}class DuoSynth extends Monophonic{constructor(){const t=optionsFromArguments(DuoSynth.getDefaults(),arguments);super(t),this.name="DuoSynth",this.voice0=new MonoSynth(Object.assign(t.voice0,{context:this.context,onsilence:()=>this.onsilence(this)})),this.voice1=new MonoSynth(Object.assign(t.voice1,{context:this.context})),this.harmonicity=new Multiply({context:this.context,units:"positive",value:t.harmonicity}),this._vibrato=new LFO({frequency:t.vibratoRate,context:this.context,min:-50,max:50}),this._vibrato.start(),this.vibratoRate=this._vibrato.frequency,this._vibratoGain=new Gain({context:this.context,units:"normalRange",gain:t.vibratoAmount}),this.vibratoAmount=this._vibratoGain.gain,this.frequency=new Signal({context:this.context,units:"frequency",value:440}),this.detune=new Signal({context:this.context,units:"cents",value:t.detune}),this.frequency.connect(this.voice0.frequency),this.frequency.chain(this.harmonicity,this.voice1.frequency),this._vibrato.connect(this._vibratoGain),this._vibratoGain.fan(this.voice0.detune,this.voice1.detune),this.detune.fan(this.voice0.detune,this.voice1.detune),this.voice0.connect(this.output),this.voice1.connect(this.output),readOnly(this,["voice0","voice1","frequency","vibratoAmount","vibratoRate"])}getLevelAtTime(t){return t=this.toSeconds(t),this.voice0.envelope.getValueAtTime(t)+this.voice1.envelope.getValueAtTime(t)}static getDefaults(){return deepMerge(Monophonic.getDefaults(),{vibratoAmount:.5,vibratoRate:5,harmonicity:1.5,voice0:deepMerge(omitFromObject(MonoSynth.getDefaults(),Object.keys(Monophonic.getDefaults())),{filterEnvelope:{attack:.01,decay:0,sustain:1,release:.5},envelope:{attack:.01,decay:0,sustain:1,release:.5}}),voice1:deepMerge(omitFromObject(MonoSynth.getDefaults(),Object.keys(Monophonic.getDefaults())),{filterEnvelope:{attack:.01,decay:0,sustain:1,release:.5},envelope:{attack:.01,decay:0,sustain:1,release:.5}})})}_triggerEnvelopeAttack(t,e){this.voice0._triggerEnvelopeAttack(t,e),this.voice1._triggerEnvelopeAttack(t,e)}_triggerEnvelopeRelease(t){return this.voice0._triggerEnvelopeRelease(t),this.voice1._triggerEnvelopeRelease(t),this}dispose(){return super.dispose(),this.voice0.dispose(),this.voice1.dispose(),this.frequency.dispose(),this.detune.dispose(),this._vibrato.dispose(),this.vibratoRate.dispose(),this._vibratoGain.dispose(),this.harmonicity.dispose(),this}}class FMSynth extends ModulationSynth{constructor(){const t=optionsFromArguments(FMSynth.getDefaults(),arguments);super(t),this.name="FMSynth",this.modulationIndex=new Multiply({context:this.context,value:t.modulationIndex}),this.frequency.connect(this._carrier.frequency),this.frequency.chain(this.harmonicity,this._modulator.frequency),this.frequency.chain(this.modulationIndex,this._modulationNode),this.detune.fan(this._carrier.detune,this._modulator.detune),this._modulator.connect(this._modulationNode.gain),this._modulationNode.connect(this._carrier.frequency),this._carrier.connect(this.output)}static getDefaults(){return Object.assign(ModulationSynth.getDefaults(),{modulationIndex:10})}dispose(){return super.dispose(),this.modulationIndex.dispose(),this}}const In=[1,1.483,1.932,2.546,2.63,3.897];class MetalSynth extends Monophonic{constructor(){const t=optionsFromArguments(MetalSynth.getDefaults(),arguments);super(t),this.name="MetalSynth",this._oscillators=[],this._freqMultipliers=[],this.detune=new Signal({context:this.context,units:"cents",value:t.detune}),this.frequency=new Signal({context:this.context,units:"frequency"}),this._amplitude=new Gain({context:this.context,gain:0}).connect(this.output),this._highpass=new Filter({Q:0,context:this.context,type:"highpass"}).connect(this._amplitude);for(let e=0;e<In.length;e++){const s=new FMOscillator({context:this.context,harmonicity:t.harmonicity,modulationIndex:t.modulationIndex,modulationType:"square",onstop:0===e?()=>this.onsilence(this):noOp,type:"square"});s.connect(this._highpass),this._oscillators[e]=s;const n=new Multiply({context:this.context,value:In[e]});this._freqMultipliers[e]=n,this.frequency.chain(n,s.frequency),this.detune.connect(s.detune)}this._filterFreqScaler=new Scale({context:this.context,max:7e3,min:this.toFrequency(t.resonance)}),this.envelope=new Envelope({attack:t.envelope.attack,attackCurve:"linear",context:this.context,decay:t.envelope.decay,release:t.envelope.release,sustain:0}),this.envelope.chain(this._filterFreqScaler,this._highpass.frequency),this.envelope.connect(this._amplitude.gain),this._octaves=t.octaves,this.octaves=t.octaves}static getDefaults(){return deepMerge(Monophonic.getDefaults(),{envelope:Object.assign(omitFromObject(Envelope.getDefaults(),Object.keys(ToneAudioNode.getDefaults())),{attack:.001,decay:1.4,release:.2}),harmonicity:5.1,modulationIndex:32,octaves:1.5,resonance:4e3})}_triggerEnvelopeAttack(t,e=1){return this.envelope.triggerAttack(t,e),this._oscillators.forEach(e=>e.start(t)),0===this.envelope.sustain&&this._oscillators.forEach(e=>{e.stop(t+this.toSeconds(this.envelope.attack)+this.toSeconds(this.envelope.decay))}),this}_triggerEnvelopeRelease(t){return this.envelope.triggerRelease(t),this._oscillators.forEach(e=>e.stop(t+this.toSeconds(this.envelope.release))),this}getLevelAtTime(t){return t=this.toSeconds(t),this.envelope.getValueAtTime(t)}get modulationIndex(){return this._oscillators[0].modulationIndex.value}set modulationIndex(t){this._oscillators.forEach(e=>e.modulationIndex.value=t)}get harmonicity(){return this._oscillators[0].harmonicity.value}set harmonicity(t){this._oscillators.forEach(e=>e.harmonicity.value=t)}get resonance(){return this._filterFreqScaler.min}set resonance(t){this._filterFreqScaler.min=this.toFrequency(t),this.octaves=this._octaves}get octaves(){return this._octaves}set octaves(t){this._octaves=t,this._filterFreqScaler.max=this._filterFreqScaler.min*Math.pow(2,t)}dispose(){return super.dispose(),this._oscillators.forEach(t=>t.dispose()),this._freqMultipliers.forEach(t=>t.dispose()),this.frequency.dispose(),this.detune.dispose(),this._filterFreqScaler.dispose(),this._amplitude.dispose(),this.envelope.dispose(),this._highpass.dispose(),this}}class MembraneSynth extends Synth{constructor(){const t=optionsFromArguments(MembraneSynth.getDefaults(),arguments);super(t),this.name="MembraneSynth",this.portamento=0,this.pitchDecay=t.pitchDecay,this.octaves=t.octaves,readOnly(this,["oscillator","envelope"])}static getDefaults(){return deepMerge(Monophonic.getDefaults(),Synth.getDefaults(),{envelope:{attack:.001,attackCurve:"exponential",decay:.4,release:1.4,sustain:.01},octaves:10,oscillator:{type:"sine"},pitchDecay:.05})}setNote(t,e){const s=this.toSeconds(e),n=this.toFrequency(t instanceof FrequencyClass?t.toFrequency():t),i=n*this.octaves;return this.oscillator.frequency.setValueAtTime(i,s),this.oscillator.frequency.exponentialRampToValueAtTime(n,s+this.toSeconds(this.pitchDecay)),this}dispose(){return super.dispose(),this}}s([range(0)],MembraneSynth.prototype,"octaves",void 0),s([timeRange(0)],MembraneSynth.prototype,"pitchDecay",void 0);class NoiseSynth extends Instrument{constructor(){const t=optionsFromArguments(NoiseSynth.getDefaults(),arguments);super(t),this.name="NoiseSynth",this.noise=new Noise(Object.assign({context:this.context},t.noise)),this.envelope=new AmplitudeEnvelope(Object.assign({context:this.context},t.envelope)),this.noise.chain(this.envelope,this.output)}static getDefaults(){return Object.assign(Instrument.getDefaults(),{envelope:Object.assign(omitFromObject(Envelope.getDefaults(),Object.keys(ToneAudioNode.getDefaults())),{decay:.1,sustain:0}),noise:Object.assign(omitFromObject(Noise.getDefaults(),Object.keys(Source.getDefaults())),{type:"white"})})}triggerAttack(t,e=1){return t=this.toSeconds(t),this.envelope.triggerAttack(t,e),this.noise.start(t),0===this.envelope.sustain&&this.noise.stop(t+this.toSeconds(this.envelope.attack)+this.toSeconds(this.envelope.decay)),this}triggerRelease(t){return t=this.toSeconds(t),this.envelope.triggerRelease(t),this.noise.stop(t+this.toSeconds(this.envelope.release)),this}sync(){return this._syncState()&&(this._syncMethod("triggerAttack",0),this._syncMethod("triggerRelease",0)),this}triggerAttackRelease(t,e,s=1){return e=this.toSeconds(e),t=this.toSeconds(t),this.triggerAttack(e,s),this.triggerRelease(e+t),this}dispose(){return super.dispose(),this.noise.dispose(),this.envelope.dispose(),this}}const Vn=new Set;function addToWorklet(t){Vn.add(t)}function registerProcessor(t,e){const s=`registerProcessor("${t}", ${e})`;Vn.add(s)}class ToneAudioWorklet extends ToneAudioNode{constructor(t){super(t),this.name="ToneAudioWorklet",this.workletOptions={},this.onprocessorerror=noOp;const e=URL.createObjectURL(new Blob([Array.from(Vn).join("\n")],{type:"text/javascript"})),s=this._audioWorkletName();this._dummyGain=this.context.createGain(),this._dummyParam=this._dummyGain.gain,this.context.addAudioWorkletModule(e).then(()=>{this.disposed||(this._worklet=this.context.createAudioWorkletNode(s,this.workletOptions),this._worklet.onprocessorerror=this.onprocessorerror.bind(this),this.onReady(this._worklet))})}dispose(){return super.dispose(),this._dummyGain.disconnect(),this._worklet&&(this._worklet.port.postMessage("dispose"),this._worklet.disconnect()),this}}addToWorklet('\n\t/**\n\t * The base AudioWorkletProcessor for use in Tone.js. Works with the {@link ToneAudioWorklet}. \n\t */\n\tclass ToneAudioWorkletProcessor extends AudioWorkletProcessor {\n\n\t\tconstructor(options) {\n\t\t\t\n\t\t\tsuper(options);\n\t\t\t/**\n\t\t\t * If the processor was disposed or not. Keep alive until it\'s disposed.\n\t\t\t */\n\t\t\tthis.disposed = false;\n\t\t   \t/** \n\t\t\t * The number of samples in the processing block\n\t\t\t */\n\t\t\tthis.blockSize = 128;\n\t\t\t/**\n\t\t\t * the sample rate\n\t\t\t */\n\t\t\tthis.sampleRate = sampleRate;\n\n\t\t\tthis.port.onmessage = (event) => {\n\t\t\t\t// when it receives a dispose \n\t\t\t\tif (event.data === "dispose") {\n\t\t\t\t\tthis.disposed = true;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n');addToWorklet("\n\t/**\n\t * Abstract class for a single input/output processor. \n\t * has a 'generate' function which processes one sample at a time\n\t */\n\tclass SingleIOProcessor extends ToneAudioWorkletProcessor {\n\n\t\tconstructor(options) {\n\t\t\tsuper(Object.assign(options, {\n\t\t\t\tnumberOfInputs: 1,\n\t\t\t\tnumberOfOutputs: 1\n\t\t\t}));\n\t\t\t/**\n\t\t\t * Holds the name of the parameter and a single value of that\n\t\t\t * parameter at the current sample\n\t\t\t * @type { [name: string]: number }\n\t\t\t */\n\t\t\tthis.params = {}\n\t\t}\n\n\t\t/**\n\t\t * Generate an output sample from the input sample and parameters\n\t\t * @abstract\n\t\t * @param input number\n\t\t * @param channel number\n\t\t * @param parameters { [name: string]: number }\n\t\t * @returns number\n\t\t */\n\t\tgenerate(){}\n\n\t\t/**\n\t\t * Update the private params object with the \n\t\t * values of the parameters at the given index\n\t\t * @param parameters { [name: string]: Float32Array },\n\t\t * @param index number\n\t\t */\n\t\tupdateParams(parameters, index) {\n\t\t\tfor (const paramName in parameters) {\n\t\t\t\tconst param = parameters[paramName];\n\t\t\t\tif (param.length > 1) {\n\t\t\t\t\tthis.params[paramName] = parameters[paramName][index];\n\t\t\t\t} else {\n\t\t\t\t\tthis.params[paramName] = parameters[paramName][0];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Process a single frame of the audio\n\t\t * @param inputs Float32Array[][]\n\t\t * @param outputs Float32Array[][]\n\t\t */\n\t\tprocess(inputs, outputs, parameters) {\n\t\t\tconst input = inputs[0];\n\t\t\tconst output = outputs[0];\n\t\t\t// get the parameter values\n\t\t\tconst channelCount = Math.max(input && input.length || 0, output.length);\n\t\t\tfor (let sample = 0; sample < this.blockSize; sample++) {\n\t\t\t\tthis.updateParams(parameters, sample);\n\t\t\t\tfor (let channel = 0; channel < channelCount; channel++) {\n\t\t\t\t\tconst inputSample = input && input.length ? input[channel][sample] : 0;\n\t\t\t\t\toutput[channel][sample] = this.generate(inputSample, channel, this.params);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn !this.disposed;\n\t\t}\n\t};\n");addToWorklet("\n\t/**\n\t * A multichannel buffer for use within an AudioWorkletProcessor as a delay line\n\t */\n\tclass DelayLine {\n\t\t\n\t\tconstructor(size, channels) {\n\t\t\tthis.buffer = [];\n\t\t\tthis.writeHead = []\n\t\t\tthis.size = size;\n\n\t\t\t// create the empty channels\n\t\t\tfor (let i = 0; i < channels; i++) {\n\t\t\t\tthis.buffer[i] = new Float32Array(this.size);\n\t\t\t\tthis.writeHead[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Push a value onto the end\n\t\t * @param channel number\n\t\t * @param value number\n\t\t */\n\t\tpush(channel, value) {\n\t\t\tthis.writeHead[channel] += 1;\n\t\t\tif (this.writeHead[channel] > this.size) {\n\t\t\t\tthis.writeHead[channel] = 0;\n\t\t\t}\n\t\t\tthis.buffer[channel][this.writeHead[channel]] = value;\n\t\t}\n\n\t\t/**\n\t\t * Get the recorded value of the channel given the delay\n\t\t * @param channel number\n\t\t * @param delay number delay samples\n\t\t */\n\t\tget(channel, delay) {\n\t\t\tlet readHead = this.writeHead[channel] - Math.floor(delay);\n\t\t\tif (readHead < 0) {\n\t\t\t\treadHead += this.size;\n\t\t\t}\n\t\t\treturn this.buffer[channel][readHead];\n\t\t}\n\t}\n");const Ln="feedback-comb-filter";registerProcessor(Ln,'\n\tclass FeedbackCombFilterWorklet extends SingleIOProcessor {\n\n\t\tconstructor(options) {\n\t\t\tsuper(options);\n\t\t\tthis.delayLine = new DelayLine(this.sampleRate, options.channelCount || 2);\n\t\t}\n\n\t\tstatic get parameterDescriptors() {\n\t\t\treturn [{\n\t\t\t\tname: "delayTime",\n\t\t\t\tdefaultValue: 0.1,\n\t\t\t\tminValue: 0,\n\t\t\t\tmaxValue: 1,\n\t\t\t\tautomationRate: "k-rate"\n\t\t\t}, {\n\t\t\t\tname: "feedback",\n\t\t\t\tdefaultValue: 0.5,\n\t\t\t\tminValue: 0,\n\t\t\t\tmaxValue: 0.9999,\n\t\t\t\tautomationRate: "k-rate"\n\t\t\t}];\n\t\t}\n\n\t\tgenerate(input, channel, parameters) {\n\t\t\tconst delayedSample = this.delayLine.get(channel, parameters.delayTime * this.sampleRate);\n\t\t\tthis.delayLine.push(channel, input + delayedSample * parameters.feedback);\n\t\t\treturn delayedSample;\n\t\t}\n\t}\n');class FeedbackCombFilter extends ToneAudioWorklet{constructor(){const t=optionsFromArguments(FeedbackCombFilter.getDefaults(),arguments,["delayTime","resonance"]);super(t),this.name="FeedbackCombFilter",this.input=new Gain({context:this.context}),this.output=new Gain({context:this.context}),this.delayTime=new Param({context:this.context,value:t.delayTime,units:"time",minValue:0,maxValue:1,param:this._dummyParam,swappable:!0}),this.resonance=new Param({context:this.context,value:t.resonance,units:"normalRange",param:this._dummyParam,swappable:!0}),readOnly(this,["resonance","delayTime"])}_audioWorkletName(){return Ln}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{delayTime:.1,resonance:.5})}onReady(t){connectSeries(this.input,t,this.output);const e=t.parameters.get("delayTime");this.delayTime.setParam(e);const s=t.parameters.get("feedback");this.resonance.setParam(s)}dispose(){return super.dispose(),this.input.dispose(),this.output.dispose(),this.delayTime.dispose(),this.resonance.dispose(),this}}class OnePoleFilter extends ToneAudioNode{constructor(){const t=optionsFromArguments(OnePoleFilter.getDefaults(),arguments,["frequency","type"]);super(t),this.name="OnePoleFilter",this._frequency=t.frequency,this._type=t.type,this.input=new Gain({context:this.context}),this.output=new Gain({context:this.context}),this._createFilter()}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{frequency:880,type:"lowpass"})}_createFilter(){const t=this._filter,e=this.toFrequency(this._frequency),s=1/(2*Math.PI*e);if("lowpass"===this._type){const t=1/(s*this.context.sampleRate),e=t-1;this._filter=this.context.createIIRFilter([t,0],[1,e])}else{const t=1/(s*this.context.sampleRate)-1;this._filter=this.context.createIIRFilter([1,-1],[1,t])}this.input.chain(this._filter,this.output),t&&this.context.setTimeout(()=>{this.disposed||(this.input.disconnect(t),t.disconnect())},this.blockTime)}get frequency(){return this._frequency}set frequency(t){this._frequency=t,this._createFilter()}get type(){return this._type}set type(t){this._type=t,this._createFilter()}getFrequencyResponse(t=128){const e=new Float32Array(t);for(let i=0;i<t;i++){const s=19980*Math.pow(i/t,2)+20;e[i]=s}const s=new Float32Array(t),n=new Float32Array(t);return this._filter.getFrequencyResponse(e,s,n),s}dispose(){return super.dispose(),this.input.dispose(),this.output.dispose(),this._filter.disconnect(),this}}class LowpassCombFilter extends ToneAudioNode{constructor(){const t=optionsFromArguments(LowpassCombFilter.getDefaults(),arguments,["delayTime","resonance","dampening"]);super(t),this.name="LowpassCombFilter",this._combFilter=this.output=new FeedbackCombFilter({context:this.context,delayTime:t.delayTime,resonance:t.resonance}),this.delayTime=this._combFilter.delayTime,this.resonance=this._combFilter.resonance,this._lowpass=this.input=new OnePoleFilter({context:this.context,frequency:t.dampening,type:"lowpass"}),this._lowpass.connect(this._combFilter)}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{dampening:3e3,delayTime:.1,resonance:.5})}get dampening(){return this._lowpass.frequency}set dampening(t){this._lowpass.frequency=t}dispose(){return super.dispose(),this._combFilter.dispose(),this._lowpass.dispose(),this}}class PluckSynth extends Instrument{constructor(){const t=optionsFromArguments(PluckSynth.getDefaults(),arguments);super(t),this.name="PluckSynth",this._noise=new Noise({context:this.context,type:"pink"}),this.attackNoise=t.attackNoise,this._lfcf=new LowpassCombFilter({context:this.context,dampening:t.dampening,resonance:t.resonance}),this.resonance=t.resonance,this.release=t.release,this._noise.connect(this._lfcf),this._lfcf.connect(this.output)}static getDefaults(){return deepMerge(Instrument.getDefaults(),{attackNoise:1,dampening:4e3,resonance:.7,release:1})}get dampening(){return this._lfcf.dampening}set dampening(t){this._lfcf.dampening=t}triggerAttack(t,e){const s=this.toFrequency(t);e=this.toSeconds(e);const n=1/s;return this._lfcf.delayTime.setValueAtTime(n,e),this._noise.start(e),this._noise.stop(e+n*this.attackNoise),this._lfcf.resonance.cancelScheduledValues(e),this._lfcf.resonance.setValueAtTime(this.resonance,e),this}triggerRelease(t){return this._lfcf.resonance.linearRampTo(0,this.release,t),this}dispose(){return super.dispose(),this._noise.dispose(),this._lfcf.dispose(),this}}class PolySynth extends Instrument{constructor(){const t=optionsFromArguments(PolySynth.getDefaults(),arguments,["voice","options"]);super(t),this.name="PolySynth",this._availableVoices=[],this._activeVoices=[],this._voices=[],this._gcTimeout=-1,this._averageActiveVoices=0,this._syncedRelease=t=>this.releaseAll(t),assert(!isNumber(t.voice),"DEPRECATED: The polyphony count is no longer the first argument.");const e=t.voice.getDefaults();this.options=Object.assign(e,t.options),this.voice=t.voice,this.maxPolyphony=t.maxPolyphony,this._dummyVoice=this._getNextAvailableVoice();const s=this._voices.indexOf(this._dummyVoice);this._voices.splice(s,1),this._gcTimeout=this.context.setInterval(this._collectGarbage.bind(this),1)}static getDefaults(){return Object.assign(Instrument.getDefaults(),{maxPolyphony:32,options:{},voice:Synth})}get activeVoices(){return this._activeVoices.length}_makeVoiceAvailable(t){this._availableVoices.push(t);const e=this._activeVoices.findIndex(e=>e.voice===t);this._activeVoices.splice(e,1)}_getNextAvailableVoice(){if(this._availableVoices.length)return this._availableVoices.shift();if(this._voices.length<this.maxPolyphony){const t=new this.voice(Object.assign(this.options,{context:this.context,onsilence:this._makeVoiceAvailable.bind(this)}));return assert(t instanceof Monophonic,"Voice must extend Monophonic class"),t.connect(this.output),this._voices.push(t),t}warn("Max polyphony exceeded. Note dropped.")}_collectGarbage(){if(this._averageActiveVoices=Math.max(.95*this._averageActiveVoices,this.activeVoices),this._availableVoices.length&&this._voices.length>Math.ceil(this._averageActiveVoices+1)){const t=this._availableVoices.shift(),e=this._voices.indexOf(t);this._voices.splice(e,1),this.context.isOffline||t.dispose()}}_triggerAttack(t,e,s){t.forEach(t=>{const n=new MidiClass(this.context,t).toMidi(),i=this._getNextAvailableVoice();i&&(i.triggerAttack(t,e,s),this._activeVoices.push({midi:n,voice:i,released:!1}),this.log("triggerAttack",t,e))})}_triggerRelease(t,e){t.forEach(t=>{const s=new MidiClass(this.context,t).toMidi(),n=this._activeVoices.find(({midi:t,released:e})=>t===s&&!e);n&&(n.voice.triggerRelease(e),n.released=!0,this.log("triggerRelease",t,e))})}_scheduleEvent(t,e,s,n){assert(!this.disposed,"Synth was already disposed"),s<=this.now()?"attack"===t?this._triggerAttack(e,s,n):this._triggerRelease(e,s):this.context.setTimeout(()=>{this.disposed||this._scheduleEvent(t,e,s,n)},s-this.now())}triggerAttack(t,e,s){Array.isArray(t)||(t=[t]);const n=this.toSeconds(e);return this._scheduleEvent("attack",t,n,s),this}triggerRelease(t,e){Array.isArray(t)||(t=[t]);const s=this.toSeconds(e);return this._scheduleEvent("release",t,s),this}triggerAttackRelease(t,e,s,n){const i=this.toSeconds(s);if(this.triggerAttack(t,i,n),isArray(e)){assert(isArray(t),"If the duration is an array, the notes must also be an array");for(let s=0;s<t.length;s++){const n=e[Math.min(s,e.length-1)],o=this.toSeconds(n);assert(o>0,"The duration must be greater than 0"),this.triggerRelease(t[s],i+o)}}else{const s=this.toSeconds(e);assert(s>0,"The duration must be greater than 0"),this.triggerRelease(t,i+s)}return this}sync(){return this._syncState()&&(this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",1),this.context.transport.on("stop",this._syncedRelease),this.context.transport.on("pause",this._syncedRelease),this.context.transport.on("loopEnd",this._syncedRelease)),this}set(t){const e=omitFromObject(t,["onsilence","context"]);return this.options=deepMerge(this.options,e),this._voices.forEach(t=>t.set(e)),this._dummyVoice.set(e),this}get(){return this._dummyVoice.get()}releaseAll(t){const e=this.toSeconds(t);return this._activeVoices.forEach(({voice:t})=>{t.triggerRelease(e)}),this}dispose(){return super.dispose(),this._dummyVoice.dispose(),this._voices.forEach(t=>t.dispose()),this._activeVoices=[],this._availableVoices=[],this.context.clearInterval(this._gcTimeout),this}}class Sampler extends Instrument{constructor(){const t=optionsFromArguments(Sampler.getDefaults(),arguments,["urls","onload","baseUrl"],"urls");super(t),this.name="Sampler",this._activeSources=new Map;const e={};Object.keys(t.urls).forEach(s=>{const n=parseInt(s,10);if(assert(isNote(s)||isNumber(n)&&isFinite(n),`url key is neither a note or midi pitch: ${s}`),isNote(s)){const n=new FrequencyClass(this.context,s).toMidi();e[n]=t.urls[s]}else isNumber(n)&&isFinite(n)&&(e[n]=t.urls[n])}),this._buffers=new ToneAudioBuffers({urls:e,onload:t.onload,baseUrl:t.baseUrl,onerror:t.onerror}),this.attack=t.attack,this.release=t.release,this.curve=t.curve,this._buffers.loaded&&Promise.resolve().then(t.onload)}static getDefaults(){return Object.assign(Instrument.getDefaults(),{attack:0,baseUrl:"",curve:"exponential",onload:noOp,onerror:noOp,release:.1,urls:{}})}_findClosest(t){let e=0;for(;e<96;){if(this._buffers.has(t+e))return-e;if(this._buffers.has(t-e))return e;e++}throw new Error(`No available buffers for note: ${t}`)}triggerAttack(t,e,s=1){return this.log("triggerAttack",t,e,s),Array.isArray(t)||(t=[t]),t.forEach(t=>{const n=ftomf(new FrequencyClass(this.context,t).toFrequency()),i=Math.round(n),o=n-i,r=this._findClosest(i),a=i-r,c=this._buffers.get(a),h=intervalToFrequencyRatio(r+o),l=new ToneBufferSource({url:c,context:this.context,curve:this.curve,fadeIn:this.attack,fadeOut:this.release,playbackRate:h}).connect(this.output);l.start(e,0,c.duration/h,s),isArray(this._activeSources.get(i))||this._activeSources.set(i,[]),this._activeSources.get(i).push(l),l.onended=()=>{if(this._activeSources&&this._activeSources.has(i)){const t=this._activeSources.get(i),e=t.indexOf(l);-1!==e&&t.splice(e,1)}}}),this}triggerRelease(t,e){return this.log("triggerRelease",t,e),Array.isArray(t)||(t=[t]),t.forEach(t=>{const s=new FrequencyClass(this.context,t).toMidi();if(this._activeSources.has(s)&&this._activeSources.get(s).length){const t=this._activeSources.get(s);e=this.toSeconds(e),t.forEach(t=>{t.stop(e)}),this._activeSources.set(s,[])}}),this}releaseAll(t){const e=this.toSeconds(t);return this._activeSources.forEach(t=>{for(;t.length;){t.shift().stop(e)}}),this}sync(){return this._syncState()&&(this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",1)),this}triggerAttackRelease(t,e,s,n=1){const i=this.toSeconds(s);return this.triggerAttack(t,i,n),isArray(e)?(assert(isArray(t),"notes must be an array when duration is array"),t.forEach((t,s)=>{const n=e[Math.min(s,e.length-1)];this.triggerRelease(t,i+this.toSeconds(n))})):this.triggerRelease(t,i+this.toSeconds(e)),this}add(t,e,s){if(assert(isNote(t)||isFinite(t),`note must be a pitch or midi: ${t}`),isNote(t)){const n=new FrequencyClass(this.context,t).toMidi();this._buffers.add(n,e,s)}else this._buffers.add(t,e,s);return this}get loaded(){return this._buffers.loaded}dispose(){return super.dispose(),this._buffers.dispose(),this._activeSources.forEach(t=>{t.forEach(t=>t.dispose())}),this._activeSources.clear(),this}}s([timeRange(0)],Sampler.prototype,"attack",void 0),s([timeRange(0)],Sampler.prototype,"release",void 0);class ToneEvent extends ToneWithContext{constructor(){const t=optionsFromArguments(ToneEvent.getDefaults(),arguments,["callback","value"]);super(t),this.name="ToneEvent",this._state=new StateTimeline("stopped"),this._startOffset=0,this._loop=t.loop,this.callback=t.callback,this.value=t.value,this._loopStart=this.toTicks(t.loopStart),this._loopEnd=this.toTicks(t.loopEnd),this._playbackRate=t.playbackRate,this._probability=t.probability,this._humanize=t.humanize,this.mute=t.mute,this._playbackRate=t.playbackRate,this._state.increasing=!0,this._rescheduleEvents()}static getDefaults(){return Object.assign(ToneWithContext.getDefaults(),{callback:noOp,humanize:!1,loop:!1,loopEnd:"1m",loopStart:0,mute:!1,playbackRate:1,probability:1,value:null})}_rescheduleEvents(t=-1){this._state.forEachFrom(t,t=>{let e;if("started"===t.state){-1!==t.id&&this.context.transport.clear(t.id);const s=t.time+Math.round(this.startOffset/this._playbackRate);if(!0===this._loop||isNumber(this._loop)&&this._loop>1){e=1/0,isNumber(this._loop)&&(e=this._loop*this._getLoopDuration());const n=this._state.getAfter(s);null!==n&&(e=Math.min(e,n.time-s)),e!==1/0&&(e=new TicksClass(this.context,e));const i=new TicksClass(this.context,this._getLoopDuration());t.id=this.context.transport.scheduleRepeat(this._tick.bind(this),i,new TicksClass(this.context,s),e)}else t.id=this.context.transport.schedule(this._tick.bind(this),new TicksClass(this.context,s))}})}get state(){return this._state.getValueAtTime(this.context.transport.ticks)}get startOffset(){return this._startOffset}set startOffset(t){this._startOffset=t}get probability(){return this._probability}set probability(t){this._probability=t}get humanize(){return this._humanize}set humanize(t){this._humanize=t}start(t){const e=this.toTicks(t);return"stopped"===this._state.getValueAtTime(e)&&(this._state.add({id:-1,state:"started",time:e}),this._rescheduleEvents(e)),this}stop(t){this.cancel(t);const e=this.toTicks(t);if("started"===this._state.getValueAtTime(e)){this._state.setStateAtTime("stopped",e,{id:-1});const t=this._state.getBefore(e);let s=e;null!==t&&(s=t.time),this._rescheduleEvents(s)}return this}cancel(t){t=defaultArg(t,-1/0);const e=this.toTicks(t);return this._state.forEachFrom(e,t=>{this.context.transport.clear(t.id)}),this._state.cancel(e),this}_tick(t){const e=this.context.transport.getTicksAtTime(t);if(!this.mute&&"started"===this._state.getValueAtTime(e)){if(this.probability<1&&Math.random()>this.probability)return;if(this.humanize){let e=.02;isBoolean(this.humanize)||(e=this.toSeconds(this.humanize)),t+=(2*Math.random()-1)*e}this.callback(t,this.value)}}_getLoopDuration(){return(this._loopEnd-this._loopStart)/this._playbackRate}get loop(){return this._loop}set loop(t){this._loop=t,this._rescheduleEvents()}get playbackRate(){return this._playbackRate}set playbackRate(t){this._playbackRate=t,this._rescheduleEvents()}get loopEnd(){return new TicksClass(this.context,this._loopEnd).toSeconds()}set loopEnd(t){this._loopEnd=this.toTicks(t),this._loop&&this._rescheduleEvents()}get loopStart(){return new TicksClass(this.context,this._loopStart).toSeconds()}set loopStart(t){this._loopStart=this.toTicks(t),this._loop&&this._rescheduleEvents()}get progress(){if(this._loop){const t=this.context.transport.ticks,e=this._state.get(t);if(null!==e&&"started"===e.state){const s=this._getLoopDuration();return(t-e.time)%s/s}return 0}return 0}dispose(){return super.dispose(),this.cancel(),this._state.dispose(),this}}class Loop extends ToneWithContext{constructor(){const t=optionsFromArguments(Loop.getDefaults(),arguments,["callback","interval"]);super(t),this.name="Loop",this._event=new ToneEvent({context:this.context,callback:this._tick.bind(this),loop:!0,loopEnd:t.interval,playbackRate:t.playbackRate,probability:t.probability,humanize:t.humanize}),this.callback=t.callback,this.iterations=t.iterations}static getDefaults(){return Object.assign(ToneWithContext.getDefaults(),{interval:"4n",callback:noOp,playbackRate:1,iterations:1/0,probability:1,mute:!1,humanize:!1})}start(t){return this._event.start(t),this}stop(t){return this._event.stop(t),this}cancel(t){return this._event.cancel(t),this}_tick(t){this.callback(t)}get state(){return this._event.state}get progress(){return this._event.progress}get interval(){return this._event.loopEnd}set interval(t){this._event.loopEnd=t}get playbackRate(){return this._event.playbackRate}set playbackRate(t){this._event.playbackRate=t}get humanize(){return this._event.humanize}set humanize(t){this._event.humanize=t}get probability(){return this._event.probability}set probability(t){this._event.probability=t}get mute(){return this._event.mute}set mute(t){this._event.mute=t}get iterations(){return!0===this._event.loop?1/0:this._event.loop}set iterations(t){this._event.loop=t===1/0||t}dispose(){return super.dispose(),this._event.dispose(),this}}class Part extends ToneEvent{constructor(){const t=optionsFromArguments(Part.getDefaults(),arguments,["callback","events"]);super(t),this.name="Part",this._state=new StateTimeline("stopped"),this._events=new Set,this._state.increasing=!0,t.events.forEach(t=>{isArray(t)?this.add(t[0],t[1]):this.add(t)})}static getDefaults(){return Object.assign(ToneEvent.getDefaults(),{events:[]})}start(t,e){const s=this.toTicks(t);if("started"!==this._state.getValueAtTime(s)){e=defaultArg(e,this._loop?this._loopStart:0),e=this._loop?defaultArg(e,this._loopStart):defaultArg(e,0);const t=this.toTicks(e);this._state.add({id:-1,offset:t,state:"started",time:s}),this._forEach(e=>{this._startNote(e,s,t)})}return this}_startNote(t,e,s){e-=s,this._loop?t.startOffset>=this._loopStart&&t.startOffset<this._loopEnd?(t.startOffset<s&&(e+=this._getLoopDuration()),t.start(new TicksClass(this.context,e))):t.startOffset<this._loopStart&&t.startOffset>=s&&(t.loop=!1,t.start(new TicksClass(this.context,e))):t.startOffset>=s&&t.start(new TicksClass(this.context,e))}get startOffset(){return this._startOffset}set startOffset(t){this._startOffset=t,this._forEach(t=>{t.startOffset+=this._startOffset})}stop(t){const e=this.toTicks(t);return this._state.cancel(e),this._state.setStateAtTime("stopped",e),this._forEach(e=>{e.stop(t)}),this}at(t,e){const s=new TransportTimeClass(this.context,t).toTicks(),n=new TicksClass(this.context,1).toSeconds(),i=this._events.values();let o=i.next();for(;!o.done;){const t=o.value;if(Math.abs(s-t.startOffset)<n)return isDefined(e)&&(t.value=e),t;o=i.next()}return isDefined(e)?(this.add(t,e),this.at(t)):null}add(t,e){t instanceof Object&&Reflect.has(t,"time")&&(t=(e=t).time);const s=this.toTicks(t);let n;return e instanceof ToneEvent?(n=e,n.callback=this._tick.bind(this)):n=new ToneEvent({callback:this._tick.bind(this),context:this.context,value:e}),n.startOffset=s,n.set({humanize:this.humanize,loop:this.loop,loopEnd:this.loopEnd,loopStart:this.loopStart,playbackRate:this.playbackRate,probability:this.probability}),this._events.add(n),this._restartEvent(n),this}_restartEvent(t){this._state.forEach(e=>{"started"===e.state?this._startNote(t,e.time,e.offset):t.stop(new TicksClass(this.context,e.time))})}remove(t,e){return isObject(t)&&t.hasOwnProperty("time")&&(t=(e=t).time),t=this.toTicks(t),this._events.forEach(s=>{s.startOffset===t&&(isUndef(e)||isDefined(e)&&s.value===e)&&(this._events.delete(s),s.dispose())}),this}clear(){return this._forEach(t=>t.dispose()),this._events.clear(),this}cancel(t){return this._forEach(e=>e.cancel(t)),this._state.cancel(this.toTicks(t)),this}_forEach(t){return this._events&&this._events.forEach(e=>{e instanceof Part?e._forEach(t):t(e)}),this}_setAll(t,e){this._forEach(s=>{s[t]=e})}_tick(t,e){this.mute||this.callback(t,e)}_testLoopBoundries(t){this._loop&&(t.startOffset<this._loopStart||t.startOffset>=this._loopEnd)?t.cancel(0):"stopped"===t.state&&this._restartEvent(t)}get probability(){return this._probability}set probability(t){this._probability=t,this._setAll("probability",t)}get humanize(){return this._humanize}set humanize(t){this._humanize=t,this._setAll("humanize",t)}get loop(){return this._loop}set loop(t){this._loop=t,this._forEach(e=>{e.loopStart=this.loopStart,e.loopEnd=this.loopEnd,e.loop=t,this._testLoopBoundries(e)})}get loopEnd(){return new TicksClass(this.context,this._loopEnd).toSeconds()}set loopEnd(t){this._loopEnd=this.toTicks(t),this._loop&&this._forEach(e=>{e.loopEnd=t,this._testLoopBoundries(e)})}get loopStart(){return new TicksClass(this.context,this._loopStart).toSeconds()}set loopStart(t){this._loopStart=this.toTicks(t),this._loop&&this._forEach(t=>{t.loopStart=this.loopStart,this._testLoopBoundries(t)})}get playbackRate(){return this._playbackRate}set playbackRate(t){this._playbackRate=t,this._setAll("playbackRate",t)}get length(){return this._events.size}dispose(){return super.dispose(),this.clear(),this}}function*upPatternGen(t){let e=0;for(;e<t;)e=clamp(e,0,t-1),yield e,e++}function*downPatternGen(t){let e=t-1;for(;e>=0;)e=clamp(e,0,t-1),yield e,e--}function*infiniteGen(t,e){for(;;)yield*e(t)}function*alternatingGenerator(t,e){let s=e?0:t-1;for(;;)s=clamp(s,0,t-1),yield s,e?(s++,s>=t-1&&(e=!1)):(s--,s<=0&&(e=!0))}function*jumpUp(t){let e=0,s=0;for(;e<t;)e=clamp(e,0,t-1),yield e,s++,e+=s%2?2:-1}function*jumpDown(t){let e=t-1,s=0;for(;e>=0;)e=clamp(e,0,t-1),yield e,s++,e+=s%2?-2:1}function*randomOnce(t){const e=[];for(let s=0;s<t;s++)e.push(s);for(;e.length>0;){const s=clamp(e.splice(Math.floor(e.length*Math.random()),1)[0],0,t-1);yield s}}function*PatternGenerator(t,e="up",s=0){switch(assert(t>=1,"The number of values must be at least one"),e){case"up":yield*infiniteGen(t,upPatternGen);case"down":yield*infiniteGen(t,downPatternGen);case"upDown":yield*alternatingGenerator(t,!0);case"downUp":yield*alternatingGenerator(t,!1);case"alternateUp":yield*infiniteGen(t,jumpUp);case"alternateDown":yield*infiniteGen(t,jumpDown);case"random":yield*function*randomGen(t){for(;;){const e=Math.floor(Math.random()*t);yield e}}(t);case"randomOnce":yield*infiniteGen(t,randomOnce);case"randomWalk":yield*function*randomWalk(t){let e=Math.floor(Math.random()*t);for(;;)0===e?e++:e===t-1||Math.random()<.5?e--:e++,yield e}(t)}}class Pattern extends Loop{constructor(){const t=optionsFromArguments(Pattern.getDefaults(),arguments,["callback","values","pattern"]);super(t),this.name="Pattern",this.callback=t.callback,this._values=t.values,this._pattern=PatternGenerator(t.values.length,t.pattern),this._type=t.pattern}static getDefaults(){return Object.assign(Loop.getDefaults(),{pattern:"up",values:[],callback:noOp})}_tick(t){const e=this._pattern.next();this._index=e.value,this._value=this._values[e.value],this.callback(t,this._value)}get values(){return this._values}set values(t){this._values=t,this.pattern=this._type}get value(){return this._value}get index(){return this._index}get pattern(){return this._type}set pattern(t){this._type=t,this._pattern=PatternGenerator(this._values.length,this._type)}}class Sequence extends ToneEvent{constructor(){const t=optionsFromArguments(Sequence.getDefaults(),arguments,["callback","events","subdivision"]);super(t),this.name="Sequence",this._part=new Part({callback:this._seqCallback.bind(this),context:this.context}),this._events=[],this._eventsArray=[],this._subdivision=this.toTicks(t.subdivision),this.events=t.events,this.loop=t.loop,this.loopStart=t.loopStart,this.loopEnd=t.loopEnd,this.playbackRate=t.playbackRate,this.probability=t.probability,this.humanize=t.humanize,this.mute=t.mute,this.playbackRate=t.playbackRate}static getDefaults(){return Object.assign(omitFromObject(ToneEvent.getDefaults(),["value"]),{events:[],loop:!0,loopEnd:0,loopStart:0,subdivision:"8n"})}_seqCallback(t,e){null===e||this.mute||this.callback(t,e)}get events(){return this._events}set events(t){this.clear(),this._eventsArray=t,this._events=this._createSequence(this._eventsArray),this._eventsUpdated()}start(t,e){return this._part.start(t,e?this._indexTime(e):e),this}stop(t){return this._part.stop(t),this}get subdivision(){return new TicksClass(this.context,this._subdivision).toSeconds()}_createSequence(t){return new Proxy(t,{get:(t,e)=>t[e],set:(t,e,s)=>(isString(e)&&isFinite(parseInt(e,10))&&isArray(s)?t[e]=this._createSequence(s):t[e]=s,this._eventsUpdated(),!0)})}_eventsUpdated(){this._part.clear(),this._rescheduleSequence(this._eventsArray,this._subdivision,this.startOffset),this.loopEnd=this.loopEnd}_rescheduleSequence(t,e,s){t.forEach((t,n)=>{const i=n*e+s;if(isArray(t))this._rescheduleSequence(t,e/t.length,i);else{const e=new TicksClass(this.context,i,"i").toSeconds();this._part.add(e,t)}})}_indexTime(t){return new TicksClass(this.context,t*this._subdivision+this.startOffset).toSeconds()}clear(){return this._part.clear(),this}dispose(){return super.dispose(),this._part.dispose(),this}get loop(){return this._part.loop}set loop(t){this._part.loop=t}get loopStart(){return this._loopStart}set loopStart(t){this._loopStart=t,this._part.loopStart=this._indexTime(t)}get loopEnd(){return this._loopEnd}set loopEnd(t){this._loopEnd=t,this._part.loopEnd=0===t?this._indexTime(this._eventsArray.length):this._indexTime(t)}get startOffset(){return this._part.startOffset}set startOffset(t){this._part.startOffset=t}get playbackRate(){return this._part.playbackRate}set playbackRate(t){this._part.playbackRate=t}get probability(){return this._part.probability}set probability(t){this._part.probability=t}get progress(){return this._part.progress}get humanize(){return this._part.humanize}set humanize(t){this._part.humanize=t}get length(){return this._part.length}}class CrossFade extends ToneAudioNode{constructor(){const t=optionsFromArguments(CrossFade.getDefaults(),arguments,["fade"]);super(t),this.name="CrossFade",this._panner=this.context.createStereoPanner(),this._split=this.context.createChannelSplitter(2),this._g2a=new GainToAudio({context:this.context}),this.a=new Gain({context:this.context,gain:0}),this.b=new Gain({context:this.context,gain:0}),this.output=new Gain({context:this.context}),this._internalChannels=[this.a,this.b],this.fade=new Signal({context:this.context,units:"normalRange",value:t.fade}),readOnly(this,"fade"),this.context.getConstant(1).connect(this._panner),this._panner.connect(this._split),this._panner.channelCount=1,this._panner.channelCountMode="explicit",connect(this._split,this.a.gain,0),connect(this._split,this.b.gain,1),this.fade.chain(this._g2a,this._panner.pan),this.a.connect(this.output),this.b.connect(this.output)}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{fade:.5})}dispose(){return super.dispose(),this.a.dispose(),this.b.dispose(),this.output.dispose(),this.fade.dispose(),this._g2a.dispose(),this._panner.disconnect(),this._split.disconnect(),this}}class Effect extends ToneAudioNode{constructor(t){super(t),this.name="Effect",this._dryWet=new CrossFade({context:this.context}),this.wet=this._dryWet.fade,this.effectSend=new Gain({context:this.context}),this.effectReturn=new Gain({context:this.context}),this.input=new Gain({context:this.context}),this.output=this._dryWet,this.input.fan(this._dryWet.a,this.effectSend),this.effectReturn.connect(this._dryWet.b),this.wet.setValueAtTime(t.wet,0),this._internalChannels=[this.effectReturn,this.effectSend],readOnly(this,"wet")}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{wet:1})}connectEffect(t){return this._internalChannels.push(t),this.effectSend.chain(t,this.effectReturn),this}dispose(){return super.dispose(),this._dryWet.dispose(),this.effectSend.dispose(),this.effectReturn.dispose(),this.wet.dispose(),this}}class LFOEffect extends Effect{constructor(t){super(t),this.name="LFOEffect",this._lfo=new LFO({context:this.context,frequency:t.frequency,amplitude:t.depth}),this.depth=this._lfo.amplitude,this.frequency=this._lfo.frequency,this.type=t.type,readOnly(this,["frequency","depth"])}static getDefaults(){return Object.assign(Effect.getDefaults(),{frequency:1,type:"sine",depth:1})}start(t){return this._lfo.start(t),this}stop(t){return this._lfo.stop(t),this}sync(){return this._lfo.sync(),this}unsync(){return this._lfo.unsync(),this}get type(){return this._lfo.type}set type(t){this._lfo.type=t}dispose(){return super.dispose(),this._lfo.dispose(),this.frequency.dispose(),this.depth.dispose(),this}}class AutoFilter extends LFOEffect{constructor(){const t=optionsFromArguments(AutoFilter.getDefaults(),arguments,["frequency","baseFrequency","octaves"]);super(t),this.name="AutoFilter",this.filter=new Filter(Object.assign(t.filter,{context:this.context})),this.connectEffect(this.filter),this._lfo.connect(this.filter.frequency),this.octaves=t.octaves,this.baseFrequency=t.baseFrequency}static getDefaults(){return Object.assign(LFOEffect.getDefaults(),{baseFrequency:200,octaves:2.6,filter:{type:"lowpass",rolloff:-12,Q:1}})}get baseFrequency(){return this._lfo.min}set baseFrequency(t){this._lfo.min=this.toFrequency(t),this.octaves=this._octaves}get octaves(){return this._octaves}set octaves(t){this._octaves=t,this._lfo.max=this._lfo.min*Math.pow(2,t)}dispose(){return super.dispose(),this.filter.dispose(),this}}class Panner extends ToneAudioNode{constructor(){const t=optionsFromArguments(Panner.getDefaults(),arguments,["pan"]);super(t),this.name="Panner",this._panner=this.context.createStereoPanner(),this.input=this._panner,this.output=this._panner,this.pan=new Param({context:this.context,param:this._panner.pan,value:t.pan,minValue:-1,maxValue:1}),this._panner.channelCount=t.channelCount,this._panner.channelCountMode="explicit",readOnly(this,"pan")}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{pan:0,channelCount:1})}dispose(){return super.dispose(),this._panner.disconnect(),this.pan.dispose(),this}}class AutoPanner extends LFOEffect{constructor(){const t=optionsFromArguments(AutoPanner.getDefaults(),arguments,["frequency"]);super(t),this.name="AutoPanner",this._panner=new Panner({context:this.context,channelCount:t.channelCount}),this.connectEffect(this._panner),this._lfo.connect(this._panner.pan),this._lfo.min=-1,this._lfo.max=1}static getDefaults(){return Object.assign(LFOEffect.getDefaults(),{channelCount:1})}dispose(){return super.dispose(),this._panner.dispose(),this}}class Follower extends ToneAudioNode{constructor(){const t=optionsFromArguments(Follower.getDefaults(),arguments,["smoothing"]);super(t),this.name="Follower",this._abs=this.input=new Abs({context:this.context}),this._lowpass=this.output=new OnePoleFilter({context:this.context,frequency:1/this.toSeconds(t.smoothing),type:"lowpass"}),this._abs.connect(this._lowpass),this._smoothing=t.smoothing}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{smoothing:.05})}get smoothing(){return this._smoothing}set smoothing(t){this._smoothing=t,this._lowpass.frequency=1/this.toSeconds(this.smoothing)}dispose(){return super.dispose(),this._abs.dispose(),this._lowpass.dispose(),this}}class AutoWah extends Effect{constructor(){const t=optionsFromArguments(AutoWah.getDefaults(),arguments,["baseFrequency","octaves","sensitivity"]);super(t),this.name="AutoWah",this._follower=new Follower({context:this.context,smoothing:t.follower}),this._sweepRange=new ScaleExp({context:this.context,min:0,max:1,exponent:.5}),this._baseFrequency=this.toFrequency(t.baseFrequency),this._octaves=t.octaves,this._inputBoost=new Gain({context:this.context}),this._bandpass=new Filter({context:this.context,rolloff:-48,frequency:0,Q:t.Q}),this._peaking=new Filter({context:this.context,type:"peaking"}),this._peaking.gain.value=t.gain,this.gain=this._peaking.gain,this.Q=this._bandpass.Q,this.effectSend.chain(this._inputBoost,this._follower,this._sweepRange),this._sweepRange.connect(this._bandpass.frequency),this._sweepRange.connect(this._peaking.frequency),this.effectSend.chain(this._bandpass,this._peaking,this.effectReturn),this._setSweepRange(),this.sensitivity=t.sensitivity,readOnly(this,["gain","Q"])}static getDefaults(){return Object.assign(Effect.getDefaults(),{baseFrequency:100,octaves:6,sensitivity:0,Q:2,gain:2,follower:.2})}get octaves(){return this._octaves}set octaves(t){this._octaves=t,this._setSweepRange()}get follower(){return this._follower.smoothing}set follower(t){this._follower.smoothing=t}get baseFrequency(){return this._baseFrequency}set baseFrequency(t){this._baseFrequency=this.toFrequency(t),this._setSweepRange()}get sensitivity(){return gainToDb(1/this._inputBoost.gain.value)}set sensitivity(t){this._inputBoost.gain.value=1/dbToGain(t)}_setSweepRange(){this._sweepRange.min=this._baseFrequency,this._sweepRange.max=Math.min(this._baseFrequency*Math.pow(2,this._octaves),this.context.sampleRate/2)}dispose(){return super.dispose(),this._follower.dispose(),this._sweepRange.dispose(),this._bandpass.dispose(),this._peaking.dispose(),this._inputBoost.dispose(),this}}const jn="bit-crusher";registerProcessor(jn,"\n\tclass BitCrusherWorklet extends SingleIOProcessor {\n\n\t\tstatic get parameterDescriptors() {\n\t\t\treturn [{\n\t\t\t\tname: \"bits\",\n\t\t\t\tdefaultValue: 12,\n\t\t\t\tminValue: 1,\n\t\t\t\tmaxValue: 16,\n\t\t\t\tautomationRate: 'k-rate'\n\t\t\t}];\n\t\t}\n\n\t\tgenerate(input, _channel, parameters) {\n\t\t\tconst step = Math.pow(0.5, parameters.bits - 1);\n\t\t\tconst val = step * Math.floor(input / step + 0.5);\n\t\t\treturn val;\n\t\t}\n\t}\n");class BitCrusher extends Effect{constructor(){const t=optionsFromArguments(BitCrusher.getDefaults(),arguments,["bits"]);super(t),this.name="BitCrusher",this._bitCrusherWorklet=new BitCrusherWorklet({context:this.context,bits:t.bits}),this.connectEffect(this._bitCrusherWorklet),this.bits=this._bitCrusherWorklet.bits}static getDefaults(){return Object.assign(Effect.getDefaults(),{bits:4})}dispose(){return super.dispose(),this._bitCrusherWorklet.dispose(),this}}class BitCrusherWorklet extends ToneAudioWorklet{constructor(){const t=optionsFromArguments(BitCrusherWorklet.getDefaults(),arguments);super(t),this.name="BitCrusherWorklet",this.input=new Gain({context:this.context}),this.output=new Gain({context:this.context}),this.bits=new Param({context:this.context,value:t.bits,units:"positive",minValue:1,maxValue:16,param:this._dummyParam,swappable:!0})}static getDefaults(){return Object.assign(ToneAudioWorklet.getDefaults(),{bits:12})}_audioWorkletName(){return jn}onReady(t){connectSeries(this.input,t,this.output);const e=t.parameters.get("bits");this.bits.setParam(e)}dispose(){return super.dispose(),this.input.dispose(),this.output.dispose(),this.bits.dispose(),this}}class Chebyshev extends Effect{constructor(){const t=optionsFromArguments(Chebyshev.getDefaults(),arguments,["order"]);super(t),this.name="Chebyshev",this._shaper=new WaveShaper({context:this.context,length:4096}),this._order=t.order,this.connectEffect(this._shaper),this.order=t.order,this.oversample=t.oversample}static getDefaults(){return Object.assign(Effect.getDefaults(),{order:1,oversample:"none"})}_getCoefficient(t,e,s){return s.has(e)||(0===e?s.set(e,0):1===e?s.set(e,t):s.set(e,2*t*this._getCoefficient(t,e-1,s)-this._getCoefficient(t,e-2,s))),s.get(e)}get order(){return this._order}set order(t){assert(Number.isInteger(t),"'order' must be an integer"),this._order=t,this._shaper.setMap(e=>this._getCoefficient(e,t,new Map))}get oversample(){return this._shaper.oversample}set oversample(t){this._shaper.oversample=t}dispose(){return super.dispose(),this._shaper.dispose(),this}}class Split extends ToneAudioNode{constructor(){const t=optionsFromArguments(Split.getDefaults(),arguments,["channels"]);super(t),this.name="Split",this._splitter=this.input=this.output=this.context.createChannelSplitter(t.channels),this._internalChannels=[this._splitter]}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{channels:2})}dispose(){return super.dispose(),this._splitter.disconnect(),this}}class Merge extends ToneAudioNode{constructor(){const t=optionsFromArguments(Merge.getDefaults(),arguments,["channels"]);super(t),this.name="Merge",this._merger=this.output=this.input=this.context.createChannelMerger(t.channels)}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{channels:2})}dispose(){return super.dispose(),this._merger.disconnect(),this}}class StereoEffect extends ToneAudioNode{constructor(t){super(t),this.name="StereoEffect",this.input=new Gain({context:this.context}),this.input.channelCount=2,this.input.channelCountMode="explicit",this._dryWet=this.output=new CrossFade({context:this.context,fade:t.wet}),this.wet=this._dryWet.fade,this._split=new Split({context:this.context,channels:2}),this._merge=new Merge({context:this.context,channels:2}),this.input.connect(this._split),this.input.connect(this._dryWet.a),this._merge.connect(this._dryWet.b),readOnly(this,["wet"])}connectEffectLeft(...t){this._split.connect(t[0],0,0),connectSeries(...t),connect(t[t.length-1],this._merge,0,0)}connectEffectRight(...t){this._split.connect(t[0],1,0),connectSeries(...t),connect(t[t.length-1],this._merge,0,1)}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{wet:1})}dispose(){return super.dispose(),this._dryWet.dispose(),this._split.dispose(),this._merge.dispose(),this}}class StereoFeedbackEffect extends StereoEffect{constructor(t){super(t),this.feedback=new Signal({context:this.context,value:t.feedback,units:"normalRange"}),this._feedbackL=new Gain({context:this.context}),this._feedbackR=new Gain({context:this.context}),this._feedbackSplit=new Split({context:this.context,channels:2}),this._feedbackMerge=new Merge({context:this.context,channels:2}),this._merge.connect(this._feedbackSplit),this._feedbackMerge.connect(this._split),this._feedbackSplit.connect(this._feedbackL,0,0),this._feedbackL.connect(this._feedbackMerge,0,0),this._feedbackSplit.connect(this._feedbackR,1,0),this._feedbackR.connect(this._feedbackMerge,0,1),this.feedback.fan(this._feedbackL.gain,this._feedbackR.gain),readOnly(this,["feedback"])}static getDefaults(){return Object.assign(StereoEffect.getDefaults(),{feedback:.5})}dispose(){return super.dispose(),this.feedback.dispose(),this._feedbackL.dispose(),this._feedbackR.dispose(),this._feedbackSplit.dispose(),this._feedbackMerge.dispose(),this}}class Chorus extends StereoFeedbackEffect{constructor(){const t=optionsFromArguments(Chorus.getDefaults(),arguments,["frequency","delayTime","depth"]);super(t),this.name="Chorus",this._depth=t.depth,this._delayTime=t.delayTime/1e3,this._lfoL=new LFO({context:this.context,frequency:t.frequency,min:0,max:1}),this._lfoR=new LFO({context:this.context,frequency:t.frequency,min:0,max:1,phase:180}),this._delayNodeL=new Delay({context:this.context}),this._delayNodeR=new Delay({context:this.context}),this.frequency=this._lfoL.frequency,readOnly(this,["frequency"]),this._lfoL.frequency.connect(this._lfoR.frequency),this.connectEffectLeft(this._delayNodeL),this.connectEffectRight(this._delayNodeR),this._lfoL.connect(this._delayNodeL.delayTime),this._lfoR.connect(this._delayNodeR.delayTime),this.depth=this._depth,this.type=t.type,this.spread=t.spread}static getDefaults(){return Object.assign(StereoFeedbackEffect.getDefaults(),{frequency:1.5,delayTime:3.5,depth:.7,type:"sine",spread:180,feedback:0,wet:.5})}get depth(){return this._depth}set depth(t){this._depth=t;const e=this._delayTime*t;this._lfoL.min=Math.max(this._delayTime-e,0),this._lfoL.max=this._delayTime+e,this._lfoR.min=Math.max(this._delayTime-e,0),this._lfoR.max=this._delayTime+e}get delayTime(){return 1e3*this._delayTime}set delayTime(t){this._delayTime=t/1e3,this.depth=this._depth}get type(){return this._lfoL.type}set type(t){this._lfoL.type=t,this._lfoR.type=t}get spread(){return this._lfoR.phase-this._lfoL.phase}set spread(t){this._lfoL.phase=90-t/2,this._lfoR.phase=t/2+90}start(t){return this._lfoL.start(t),this._lfoR.start(t),this}stop(t){return this._lfoL.stop(t),this._lfoR.stop(t),this}sync(){return this._lfoL.sync(),this._lfoR.sync(),this}unsync(){return this._lfoL.unsync(),this._lfoR.unsync(),this}dispose(){return super.dispose(),this._lfoL.dispose(),this._lfoR.dispose(),this._delayNodeL.dispose(),this._delayNodeR.dispose(),this.frequency.dispose(),this}}class Distortion extends Effect{constructor(){const t=optionsFromArguments(Distortion.getDefaults(),arguments,["distortion"]);super(t),this.name="Distortion",this._shaper=new WaveShaper({context:this.context,length:4096}),this._distortion=t.distortion,this.connectEffect(this._shaper),this.distortion=t.distortion,this.oversample=t.oversample}static getDefaults(){return Object.assign(Effect.getDefaults(),{distortion:.4,oversample:"none"})}get distortion(){return this._distortion}set distortion(t){this._distortion=t;const e=100*t,s=Math.PI/180;this._shaper.setMap(t=>Math.abs(t)<.001?0:(3+e)*t*20*s/(Math.PI+e*Math.abs(t)))}get oversample(){return this._shaper.oversample}set oversample(t){this._shaper.oversample=t}dispose(){return super.dispose(),this._shaper.dispose(),this}}class FeedbackEffect extends Effect{constructor(t){super(t),this.name="FeedbackEffect",this._feedbackGain=new Gain({context:this.context,gain:t.feedback,units:"normalRange"}),this.feedback=this._feedbackGain.gain,readOnly(this,"feedback"),this.effectReturn.chain(this._feedbackGain,this.effectSend)}static getDefaults(){return Object.assign(Effect.getDefaults(),{feedback:.125})}dispose(){return super.dispose(),this._feedbackGain.dispose(),this.feedback.dispose(),this}}class FeedbackDelay extends FeedbackEffect{constructor(){const t=optionsFromArguments(FeedbackDelay.getDefaults(),arguments,["delayTime","feedback"]);super(t),this.name="FeedbackDelay",this._delayNode=new Delay({context:this.context,delayTime:t.delayTime,maxDelay:t.maxDelay}),this.delayTime=this._delayNode.delayTime,this.connectEffect(this._delayNode),readOnly(this,"delayTime")}static getDefaults(){return Object.assign(FeedbackEffect.getDefaults(),{delayTime:.25,maxDelay:1})}dispose(){return super.dispose(),this._delayNode.dispose(),this.delayTime.dispose(),this}}class PhaseShiftAllpass extends ToneAudioNode{constructor(t){super(t),this.name="PhaseShiftAllpass",this.input=new Gain({context:this.context}),this.output=new Gain({context:this.context}),this.offset90=new Gain({context:this.context});this._bank0=this._createAllPassFilterBank([.6923878,.9360654322959,.988229522686,.9987488452737]),this._bank1=this._createAllPassFilterBank([.4021921162426,.856171088242,.9722909545651,.9952884791278]),this._oneSampleDelay=this.context.createIIRFilter([0,1],[1,0]),connectSeries(this.input,...this._bank0,this._oneSampleDelay,this.output),connectSeries(this.input,...this._bank1,this.offset90)}_createAllPassFilterBank(t){return t.map(t=>{const e=[[t*t,0,-1],[1,0,-t*t]];return this.context.createIIRFilter(e[0],e[1])})}dispose(){return super.dispose(),this.input.dispose(),this.output.dispose(),this.offset90.dispose(),this._bank0.forEach(t=>t.disconnect()),this._bank1.forEach(t=>t.disconnect()),this._oneSampleDelay.disconnect(),this}}class FrequencyShifter extends Effect{constructor(){const t=optionsFromArguments(FrequencyShifter.getDefaults(),arguments,["frequency"]);super(t),this.name="FrequencyShifter",this.frequency=new Signal({context:this.context,units:"frequency",value:t.frequency,minValue:-this.context.sampleRate/2,maxValue:this.context.sampleRate/2}),this._sine=new ToneOscillatorNode({context:this.context,type:"sine"}),this._cosine=new Oscillator({context:this.context,phase:-90,type:"sine"}),this._sineMultiply=new Multiply({context:this.context}),this._cosineMultiply=new Multiply({context:this.context}),this._negate=new Negate({context:this.context}),this._add=new Add({context:this.context}),this._phaseShifter=new PhaseShiftAllpass({context:this.context}),this.effectSend.connect(this._phaseShifter),this.frequency.fan(this._sine.frequency,this._cosine.frequency),this._phaseShifter.offset90.connect(this._cosineMultiply),this._cosine.connect(this._cosineMultiply.factor),this._phaseShifter.connect(this._sineMultiply),this._sine.connect(this._sineMultiply.factor),this._sineMultiply.connect(this._negate),this._cosineMultiply.connect(this._add),this._negate.connect(this._add.addend),this._add.connect(this.effectReturn);const e=this.immediate();this._sine.start(e),this._cosine.start(e)}static getDefaults(){return Object.assign(Effect.getDefaults(),{frequency:0})}dispose(){return super.dispose(),this.frequency.dispose(),this._add.dispose(),this._cosine.dispose(),this._cosineMultiply.dispose(),this._negate.dispose(),this._phaseShifter.dispose(),this._sine.dispose(),this._sineMultiply.dispose(),this}}const Bn=[1557/44100,1617/44100,1491/44100,1422/44100,1277/44100,1356/44100,1188/44100,1116/44100],Wn=[225,556,441,341];class Freeverb extends StereoEffect{constructor(){const t=optionsFromArguments(Freeverb.getDefaults(),arguments,["roomSize","dampening"]);super(t),this.name="Freeverb",this._combFilters=[],this._allpassFiltersL=[],this._allpassFiltersR=[],this.roomSize=new Signal({context:this.context,value:t.roomSize,units:"normalRange"}),this._allpassFiltersL=Wn.map(t=>{const e=this.context.createBiquadFilter();return e.type="allpass",e.frequency.value=t,e}),this._allpassFiltersR=Wn.map(t=>{const e=this.context.createBiquadFilter();return e.type="allpass",e.frequency.value=t,e}),this._combFilters=Bn.map((e,s)=>{const n=new LowpassCombFilter({context:this.context,dampening:t.dampening,delayTime:e});return s<Bn.length/2?this.connectEffectLeft(n,...this._allpassFiltersL):this.connectEffectRight(n,...this._allpassFiltersR),this.roomSize.connect(n.resonance),n}),readOnly(this,["roomSize"])}static getDefaults(){return Object.assign(StereoEffect.getDefaults(),{roomSize:.7,dampening:3e3})}get dampening(){return this._combFilters[0].dampening}set dampening(t){this._combFilters.forEach(e=>e.dampening=t)}dispose(){return super.dispose(),this._allpassFiltersL.forEach(t=>t.disconnect()),this._allpassFiltersR.forEach(t=>t.disconnect()),this._combFilters.forEach(t=>t.dispose()),this.roomSize.dispose(),this}}const Gn=[.06748,.06404,.08212,.09004],zn=[.773,.802,.753,.733],Un=[347,113,37];class JCReverb extends StereoEffect{constructor(){const t=optionsFromArguments(JCReverb.getDefaults(),arguments,["roomSize"]);super(t),this.name="JCReverb",this._allpassFilters=[],this._feedbackCombFilters=[],this.roomSize=new Signal({context:this.context,value:t.roomSize,units:"normalRange"}),this._scaleRoomSize=new Scale({context:this.context,min:-.733,max:.197}),this._allpassFilters=Un.map(t=>{const e=this.context.createBiquadFilter();return e.type="allpass",e.frequency.value=t,e}),this._feedbackCombFilters=Gn.map((t,e)=>{const s=new FeedbackCombFilter({context:this.context,delayTime:t});return this._scaleRoomSize.connect(s.resonance),s.resonance.value=zn[e],e<Gn.length/2?this.connectEffectLeft(...this._allpassFilters,s):this.connectEffectRight(...this._allpassFilters,s),s}),this.roomSize.connect(this._scaleRoomSize),readOnly(this,["roomSize"])}static getDefaults(){return Object.assign(StereoEffect.getDefaults(),{roomSize:.5})}dispose(){return super.dispose(),this._allpassFilters.forEach(t=>t.disconnect()),this._feedbackCombFilters.forEach(t=>t.dispose()),this.roomSize.dispose(),this._scaleRoomSize.dispose(),this}}class StereoXFeedbackEffect extends StereoFeedbackEffect{constructor(t){super(t),this._feedbackL.disconnect(),this._feedbackL.connect(this._feedbackMerge,0,1),this._feedbackR.disconnect(),this._feedbackR.connect(this._feedbackMerge,0,0),readOnly(this,["feedback"])}}class PingPongDelay extends StereoXFeedbackEffect{constructor(){const t=optionsFromArguments(PingPongDelay.getDefaults(),arguments,["delayTime","feedback"]);super(t),this.name="PingPongDelay",this._leftDelay=new Delay({context:this.context,maxDelay:t.maxDelay}),this._rightDelay=new Delay({context:this.context,maxDelay:t.maxDelay}),this._rightPreDelay=new Delay({context:this.context,maxDelay:t.maxDelay}),this.delayTime=new Signal({context:this.context,units:"time",value:t.delayTime}),this.connectEffectLeft(this._leftDelay),this.connectEffectRight(this._rightPreDelay,this._rightDelay),this.delayTime.fan(this._leftDelay.delayTime,this._rightDelay.delayTime,this._rightPreDelay.delayTime),this._feedbackL.disconnect(),this._feedbackL.connect(this._rightDelay),readOnly(this,["delayTime"])}static getDefaults(){return Object.assign(StereoXFeedbackEffect.getDefaults(),{delayTime:.25,maxDelay:1})}dispose(){return super.dispose(),this._leftDelay.dispose(),this._rightDelay.dispose(),this._rightPreDelay.dispose(),this.delayTime.dispose(),this}}class PitchShift extends FeedbackEffect{constructor(){const t=optionsFromArguments(PitchShift.getDefaults(),arguments,["pitch"]);super(t),this.name="PitchShift",this._frequency=new Signal({context:this.context}),this._delayA=new Delay({maxDelay:1,context:this.context}),this._lfoA=new LFO({context:this.context,min:0,max:.1,type:"sawtooth"}).connect(this._delayA.delayTime),this._delayB=new Delay({maxDelay:1,context:this.context}),this._lfoB=new LFO({context:this.context,min:0,max:.1,type:"sawtooth",phase:180}).connect(this._delayB.delayTime),this._crossFade=new CrossFade({context:this.context}),this._crossFadeLFO=new LFO({context:this.context,min:0,max:1,type:"triangle",phase:90}).connect(this._crossFade.fade),this._feedbackDelay=new Delay({delayTime:t.delayTime,context:this.context}),this.delayTime=this._feedbackDelay.delayTime,readOnly(this,"delayTime"),this._pitch=t.pitch,this._windowSize=t.windowSize,this._delayA.connect(this._crossFade.a),this._delayB.connect(this._crossFade.b),this._frequency.fan(this._lfoA.frequency,this._lfoB.frequency,this._crossFadeLFO.frequency),this.effectSend.fan(this._delayA,this._delayB),this._crossFade.chain(this._feedbackDelay,this.effectReturn);const e=this.now();this._lfoA.start(e),this._lfoB.start(e),this._crossFadeLFO.start(e),this.windowSize=this._windowSize}static getDefaults(){return Object.assign(FeedbackEffect.getDefaults(),{pitch:0,windowSize:.1,delayTime:0,feedback:0})}get pitch(){return this._pitch}set pitch(t){this._pitch=t;let e=0;t<0?(this._lfoA.min=0,this._lfoA.max=this._windowSize,this._lfoB.min=0,this._lfoB.max=this._windowSize,e=intervalToFrequencyRatio(t-1)+1):(this._lfoA.min=this._windowSize,this._lfoA.max=0,this._lfoB.min=this._windowSize,this._lfoB.max=0,e=intervalToFrequencyRatio(t)-1),this._frequency.value=e*(1.2/this._windowSize)}get windowSize(){return this._windowSize}set windowSize(t){this._windowSize=this.toSeconds(t),this.pitch=this._pitch}dispose(){return super.dispose(),this._frequency.dispose(),this._delayA.dispose(),this._delayB.dispose(),this._lfoA.dispose(),this._lfoB.dispose(),this._crossFade.dispose(),this._crossFadeLFO.dispose(),this._feedbackDelay.dispose(),this}}class Phaser extends StereoEffect{constructor(){const t=optionsFromArguments(Phaser.getDefaults(),arguments,["frequency","octaves","baseFrequency"]);super(t),this.name="Phaser",this._lfoL=new LFO({context:this.context,frequency:t.frequency,min:0,max:1}),this._lfoR=new LFO({context:this.context,frequency:t.frequency,min:0,max:1,phase:180}),this._baseFrequency=this.toFrequency(t.baseFrequency),this._octaves=t.octaves,this.Q=new Signal({context:this.context,value:t.Q,units:"positive"}),this._filtersL=this._makeFilters(t.stages,this._lfoL),this._filtersR=this._makeFilters(t.stages,this._lfoR),this.frequency=this._lfoL.frequency,this.frequency.value=t.frequency,this.connectEffectLeft(...this._filtersL),this.connectEffectRight(...this._filtersR),this._lfoL.frequency.connect(this._lfoR.frequency),this.baseFrequency=t.baseFrequency,this.octaves=t.octaves,this._lfoL.start(),this._lfoR.start(),readOnly(this,["frequency","Q"])}static getDefaults(){return Object.assign(StereoEffect.getDefaults(),{frequency:.5,octaves:3,stages:10,Q:10,baseFrequency:350})}_makeFilters(t,e){const s=[];for(let n=0;n<t;n++){const t=this.context.createBiquadFilter();t.type="allpass",this.Q.connect(t.Q),e.connect(t.frequency),s.push(t)}return s}get octaves(){return this._octaves}set octaves(t){this._octaves=t;const e=this._baseFrequency*Math.pow(2,t);this._lfoL.max=e,this._lfoR.max=e}get baseFrequency(){return this._baseFrequency}set baseFrequency(t){this._baseFrequency=this.toFrequency(t),this._lfoL.min=this._baseFrequency,this._lfoR.min=this._baseFrequency,this.octaves=this._octaves}dispose(){return super.dispose(),this.Q.dispose(),this._lfoL.dispose(),this._lfoR.dispose(),this._filtersL.forEach(t=>t.disconnect()),this._filtersR.forEach(t=>t.disconnect()),this.frequency.dispose(),this}}class Reverb extends Effect{constructor(){const t=optionsFromArguments(Reverb.getDefaults(),arguments,["decay"]);super(t),this.name="Reverb",this._convolver=this.context.createConvolver(),this.ready=Promise.resolve();const e=this.toSeconds(t.decay);assertRange(e,.001),this._decay=e;const s=this.toSeconds(t.preDelay);assertRange(s,0),this._preDelay=s,this.generate(),this.connectEffect(this._convolver)}static getDefaults(){return Object.assign(Effect.getDefaults(),{decay:1.5,preDelay:.01})}get decay(){return this._decay}set decay(t){assertRange(t=this.toSeconds(t),.001),this._decay=t,this.generate()}get preDelay(){return this._preDelay}set preDelay(t){assertRange(t=this.toSeconds(t),0),this._preDelay=t,this.generate()}generate(){return e(this,void 0,void 0,function*(){const t=this.ready,e=new OfflineContext(2,this._decay+this._preDelay,this.context.sampleRate),s=new Noise({context:e}),n=new Noise({context:e}),i=new Merge({context:e});s.connect(i,0,0),n.connect(i,0,1);const o=new Gain({context:e}).toDestination();i.connect(o),s.start(0),n.start(0),o.gain.setValueAtTime(0,0),o.gain.setValueAtTime(1,this._preDelay),o.gain.exponentialApproachValueAtTime(0,this._preDelay,this.decay);const r=e.render();return this.ready=r.then(noOp),yield t,this._convolver.buffer=(yield r).get(),this})}dispose(){return super.dispose(),this._convolver.disconnect(),this}}class MidSideSplit extends ToneAudioNode{constructor(){super(optionsFromArguments(MidSideSplit.getDefaults(),arguments)),this.name="MidSideSplit",this._split=this.input=new Split({channels:2,context:this.context}),this._midAdd=new Add({context:this.context}),this.mid=new Multiply({context:this.context,value:Math.SQRT1_2}),this._sideSubtract=new Subtract({context:this.context}),this.side=new Multiply({context:this.context,value:Math.SQRT1_2}),this._split.connect(this._midAdd,0),this._split.connect(this._midAdd.addend,1),this._split.connect(this._sideSubtract,0),this._split.connect(this._sideSubtract.subtrahend,1),this._midAdd.connect(this.mid),this._sideSubtract.connect(this.side)}dispose(){return super.dispose(),this.mid.dispose(),this.side.dispose(),this._midAdd.dispose(),this._sideSubtract.dispose(),this._split.dispose(),this}}class MidSideMerge extends ToneAudioNode{constructor(){super(optionsFromArguments(MidSideMerge.getDefaults(),arguments)),this.name="MidSideMerge",this.mid=new Gain({context:this.context}),this.side=new Gain({context:this.context}),this._left=new Add({context:this.context}),this._leftMult=new Multiply({context:this.context,value:Math.SQRT1_2}),this._right=new Subtract({context:this.context}),this._rightMult=new Multiply({context:this.context,value:Math.SQRT1_2}),this._merge=this.output=new Merge({context:this.context}),this.mid.fan(this._left),this.side.connect(this._left.addend),this.mid.connect(this._right),this.side.connect(this._right.subtrahend),this._left.connect(this._leftMult),this._right.connect(this._rightMult),this._leftMult.connect(this._merge,0,0),this._rightMult.connect(this._merge,0,1)}dispose(){return super.dispose(),this.mid.dispose(),this.side.dispose(),this._leftMult.dispose(),this._rightMult.dispose(),this._left.dispose(),this._right.dispose(),this}}class MidSideEffect extends Effect{constructor(t){super(t),this.name="MidSideEffect",this._midSideMerge=new MidSideMerge({context:this.context}),this._midSideSplit=new MidSideSplit({context:this.context}),this._midSend=this._midSideSplit.mid,this._sideSend=this._midSideSplit.side,this._midReturn=this._midSideMerge.mid,this._sideReturn=this._midSideMerge.side,this.effectSend.connect(this._midSideSplit),this._midSideMerge.connect(this.effectReturn)}connectEffectMid(...t){this._midSend.chain(...t,this._midReturn)}connectEffectSide(...t){this._sideSend.chain(...t,this._sideReturn)}dispose(){return super.dispose(),this._midSideSplit.dispose(),this._midSideMerge.dispose(),this._midSend.dispose(),this._sideSend.dispose(),this._midReturn.dispose(),this._sideReturn.dispose(),this}}class StereoWidener extends MidSideEffect{constructor(){const t=optionsFromArguments(StereoWidener.getDefaults(),arguments,["width"]);super(t),this.name="StereoWidener",this.width=new Signal({context:this.context,value:t.width,units:"normalRange"}),readOnly(this,["width"]),this._twoTimesWidthMid=new Multiply({context:this.context,value:2}),this._twoTimesWidthSide=new Multiply({context:this.context,value:2}),this._midMult=new Multiply({context:this.context}),this._twoTimesWidthMid.connect(this._midMult.factor),this.connectEffectMid(this._midMult),this._oneMinusWidth=new Subtract({context:this.context}),this._oneMinusWidth.connect(this._twoTimesWidthMid),connect(this.context.getConstant(1),this._oneMinusWidth),this.width.connect(this._oneMinusWidth.subtrahend),this._sideMult=new Multiply({context:this.context}),this.width.connect(this._twoTimesWidthSide),this._twoTimesWidthSide.connect(this._sideMult.factor),this.connectEffectSide(this._sideMult)}static getDefaults(){return Object.assign(MidSideEffect.getDefaults(),{width:.5})}dispose(){return super.dispose(),this.width.dispose(),this._midMult.dispose(),this._sideMult.dispose(),this._twoTimesWidthMid.dispose(),this._twoTimesWidthSide.dispose(),this._oneMinusWidth.dispose(),this}}class Tremolo extends StereoEffect{constructor(){const t=optionsFromArguments(Tremolo.getDefaults(),arguments,["frequency","depth"]);super(t),this.name="Tremolo",this._lfoL=new LFO({context:this.context,type:t.type,min:1,max:0}),this._lfoR=new LFO({context:this.context,type:t.type,min:1,max:0}),this._amplitudeL=new Gain({context:this.context}),this._amplitudeR=new Gain({context:this.context}),this.frequency=new Signal({context:this.context,value:t.frequency,units:"frequency"}),this.depth=new Signal({context:this.context,value:t.depth,units:"normalRange"}),readOnly(this,["frequency","depth"]),this.connectEffectLeft(this._amplitudeL),this.connectEffectRight(this._amplitudeR),this._lfoL.connect(this._amplitudeL.gain),this._lfoR.connect(this._amplitudeR.gain),this.frequency.fan(this._lfoL.frequency,this._lfoR.frequency),this.depth.fan(this._lfoR.amplitude,this._lfoL.amplitude),this.spread=t.spread}static getDefaults(){return Object.assign(StereoEffect.getDefaults(),{frequency:10,type:"sine",depth:.5,spread:180})}start(t){return this._lfoL.start(t),this._lfoR.start(t),this}stop(t){return this._lfoL.stop(t),this._lfoR.stop(t),this}sync(){return this._lfoL.sync(),this._lfoR.sync(),this.context.transport.syncSignal(this.frequency),this}unsync(){return this._lfoL.unsync(),this._lfoR.unsync(),this.context.transport.unsyncSignal(this.frequency),this}get type(){return this._lfoL.type}set type(t){this._lfoL.type=t,this._lfoR.type=t}get spread(){return this._lfoR.phase-this._lfoL.phase}set spread(t){this._lfoL.phase=90-t/2,this._lfoR.phase=t/2+90}dispose(){return super.dispose(),this._lfoL.dispose(),this._lfoR.dispose(),this._amplitudeL.dispose(),this._amplitudeR.dispose(),this.frequency.dispose(),this.depth.dispose(),this}}class Vibrato extends Effect{constructor(){const t=optionsFromArguments(Vibrato.getDefaults(),arguments,["frequency","depth"]);super(t),this.name="Vibrato",this._delayNode=new Delay({context:this.context,delayTime:0,maxDelay:t.maxDelay}),this._lfo=new LFO({context:this.context,type:t.type,min:0,max:t.maxDelay,frequency:t.frequency,phase:-90}).start().connect(this._delayNode.delayTime),this.frequency=this._lfo.frequency,this.depth=this._lfo.amplitude,this.depth.value=t.depth,readOnly(this,["frequency","depth"]),this.effectSend.chain(this._delayNode,this.effectReturn)}static getDefaults(){return Object.assign(Effect.getDefaults(),{maxDelay:.005,frequency:5,depth:.1,type:"sine"})}get type(){return this._lfo.type}set type(t){this._lfo.type=t}dispose(){return super.dispose(),this._delayNode.dispose(),this._lfo.dispose(),this.frequency.dispose(),this.depth.dispose(),this}}class Analyser extends ToneAudioNode{constructor(){const t=optionsFromArguments(Analyser.getDefaults(),arguments,["type","size"]);super(t),this.name="Analyser",this._analysers=[],this._buffers=[],this.input=this.output=this._gain=new Gain({context:this.context}),this._split=new Split({context:this.context,channels:t.channels}),this.input.connect(this._split),assertRange(t.channels,1);for(let e=0;e<t.channels;e++)this._analysers[e]=this.context.createAnalyser(),this._split.connect(this._analysers[e],e,0);this.size=t.size,this.type=t.type,this.smoothing=t.smoothing}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{size:1024,smoothing:.8,type:"fft",channels:1})}getValue(){return this._analysers.forEach((t,e)=>{const s=this._buffers[e];"fft"===this._type?t.getFloatFrequencyData(s):"waveform"===this._type&&t.getFloatTimeDomainData(s)}),1===this.channels?this._buffers[0]:this._buffers}get size(){return this._analysers[0].frequencyBinCount}set size(t){this._analysers.forEach((e,s)=>{e.fftSize=2*t,this._buffers[s]=new Float32Array(t)})}get channels(){return this._analysers.length}get type(){return this._type}set type(t){assert("waveform"===t||"fft"===t,`Analyser: invalid type: ${t}`),this._type=t}get smoothing(){return this._analysers[0].smoothingTimeConstant}set smoothing(t){this._analysers.forEach(e=>e.smoothingTimeConstant=t)}dispose(){return super.dispose(),this._analysers.forEach(t=>t.disconnect()),this._split.dispose(),this._gain.dispose(),this}}class MeterBase extends ToneAudioNode{constructor(){super(optionsFromArguments(MeterBase.getDefaults(),arguments)),this.name="MeterBase",this.input=this.output=this._analyser=new Analyser({context:this.context,size:256,type:"waveform"})}dispose(){return super.dispose(),this._analyser.dispose(),this}}class Meter extends MeterBase{constructor(){const t=optionsFromArguments(Meter.getDefaults(),arguments,["smoothing"]);super(t),this.name="Meter",this.input=this.output=this._analyser=new Analyser({context:this.context,size:256,type:"waveform",channels:t.channelCount}),this.smoothing=t.smoothing,this.normalRange=t.normalRange,this._rms=new Array(t.channelCount),this._rms.fill(0)}static getDefaults(){return Object.assign(MeterBase.getDefaults(),{smoothing:.8,normalRange:!1,channelCount:1})}getLevel(){return warn("'getLevel' has been changed to 'getValue'"),this.getValue()}getValue(){const t=this._analyser.getValue(),e=(1===this.channels?[t]:t).map((t,e)=>{const s=t.reduce((t,e)=>t+e*e,0),n=Math.sqrt(s/t.length);return this._rms[e]=Math.max(n,this._rms[e]*this.smoothing),this.normalRange?this._rms[e]:gainToDb(this._rms[e])});return 1===this.channels?e[0]:e}get channels(){return this._analyser.channels}dispose(){return super.dispose(),this._analyser.dispose(),this}}class FFT extends MeterBase{constructor(){const t=optionsFromArguments(FFT.getDefaults(),arguments,["size"]);super(t),this.name="FFT",this.normalRange=t.normalRange,this._analyser.type="fft",this.size=t.size}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{normalRange:!1,size:1024,smoothing:.8})}getValue(){return this._analyser.getValue().map(t=>this.normalRange?dbToGain(t):t)}get size(){return this._analyser.size}set size(t){this._analyser.size=t}get smoothing(){return this._analyser.smoothing}set smoothing(t){this._analyser.smoothing=t}getFrequencyOfIndex(t){return assert(0<=t&&t<this.size,`index must be greater than or equal to 0 and less than ${this.size}`),t*this.context.sampleRate/(2*this.size)}}class DCMeter extends MeterBase{constructor(){super(optionsFromArguments(DCMeter.getDefaults(),arguments)),this.name="DCMeter",this._analyser.type="waveform",this._analyser.size=256}getValue(){return this._analyser.getValue()[0]}}class Waveform extends MeterBase{constructor(){const t=optionsFromArguments(Waveform.getDefaults(),arguments,["size"]);super(t),this.name="Waveform",this._analyser.type="waveform",this.size=t.size}static getDefaults(){return Object.assign(MeterBase.getDefaults(),{size:1024})}getValue(){return this._analyser.getValue()}get size(){return this._analyser.size}set size(t){this._analyser.size=t}}class Solo extends ToneAudioNode{constructor(){const t=optionsFromArguments(Solo.getDefaults(),arguments,["solo"]);super(t),this.name="Solo",this.input=this.output=new Gain({context:this.context}),Solo._allSolos.has(this.context)||Solo._allSolos.set(this.context,new Set),Solo._allSolos.get(this.context).add(this),this.solo=t.solo}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{solo:!1})}get solo(){return this._isSoloed()}set solo(t){t?this._addSolo():this._removeSolo(),Solo._allSolos.get(this.context).forEach(t=>t._updateSolo())}get muted(){return 0===this.input.gain.value}_addSolo(){Solo._soloed.has(this.context)||Solo._soloed.set(this.context,new Set),Solo._soloed.get(this.context).add(this)}_removeSolo(){Solo._soloed.has(this.context)&&Solo._soloed.get(this.context).delete(this)}_isSoloed(){return Solo._soloed.has(this.context)&&Solo._soloed.get(this.context).has(this)}_noSolos(){return!Solo._soloed.has(this.context)||Solo._soloed.has(this.context)&&0===Solo._soloed.get(this.context).size}_updateSolo(){this._isSoloed()||this._noSolos()?this.input.gain.value=1:this.input.gain.value=0}dispose(){return super.dispose(),Solo._allSolos.get(this.context).delete(this),this._removeSolo(),this}}Solo._allSolos=new Map,Solo._soloed=new Map;class PanVol extends ToneAudioNode{constructor(){const t=optionsFromArguments(PanVol.getDefaults(),arguments,["pan","volume"]);super(t),this.name="PanVol",this._panner=this.input=new Panner({context:this.context,pan:t.pan,channelCount:t.channelCount}),this.pan=this._panner.pan,this._volume=this.output=new Volume({context:this.context,volume:t.volume}),this.volume=this._volume.volume,this._panner.connect(this._volume),this.mute=t.mute,readOnly(this,["pan","volume"])}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{mute:!1,pan:0,volume:0,channelCount:1})}get mute(){return this._volume.mute}set mute(t){this._volume.mute=t}dispose(){return super.dispose(),this._panner.dispose(),this.pan.dispose(),this._volume.dispose(),this.volume.dispose(),this}}class Channel extends ToneAudioNode{constructor(){const t=optionsFromArguments(Channel.getDefaults(),arguments,["volume","pan"]);super(t),this.name="Channel",this._solo=this.input=new Solo({solo:t.solo,context:this.context}),this._panVol=this.output=new PanVol({context:this.context,pan:t.pan,volume:t.volume,mute:t.mute,channelCount:t.channelCount}),this.pan=this._panVol.pan,this.volume=this._panVol.volume,this._solo.connect(this._panVol),readOnly(this,["pan","volume"])}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{pan:0,volume:0,mute:!1,solo:!1,channelCount:1})}get solo(){return this._solo.solo}set solo(t){this._solo.solo=t}get muted(){return this._solo.muted||this.mute}get mute(){return this._panVol.mute}set mute(t){this._panVol.mute=t}_getBus(t){return Channel.buses.has(t)||Channel.buses.set(t,new Gain({context:this.context})),Channel.buses.get(t)}send(t,e=0){const s=this._getBus(t),n=new Gain({context:this.context,units:"decibels",gain:e});return this.connect(n),n.connect(s),n}receive(t){return this._getBus(t).connect(this),this}dispose(){return super.dispose(),this._panVol.dispose(),this.pan.dispose(),this.volume.dispose(),this._solo.dispose(),this}}Channel.buses=new Map;class Mono extends ToneAudioNode{constructor(){super(optionsFromArguments(Mono.getDefaults(),arguments)),this.name="Mono",this.input=new Gain({context:this.context}),this._merge=this.output=new Merge({channels:2,context:this.context}),this.input.connect(this._merge,0,0),this.input.connect(this._merge,0,1)}dispose(){return super.dispose(),this._merge.dispose(),this.input.dispose(),this}}class MultibandSplit extends ToneAudioNode{constructor(){const t=optionsFromArguments(MultibandSplit.getDefaults(),arguments,["lowFrequency","highFrequency"]);super(t),this.name="MultibandSplit",this.input=new Gain({context:this.context}),this.output=void 0,this.low=new Filter({context:this.context,frequency:0,type:"lowpass"}),this._lowMidFilter=new Filter({context:this.context,frequency:0,type:"highpass"}),this.mid=new Filter({context:this.context,frequency:0,type:"lowpass"}),this.high=new Filter({context:this.context,frequency:0,type:"highpass"}),this._internalChannels=[this.low,this.mid,this.high],this.lowFrequency=new Signal({context:this.context,units:"frequency",value:t.lowFrequency}),this.highFrequency=new Signal({context:this.context,units:"frequency",value:t.highFrequency}),this.Q=new Signal({context:this.context,units:"positive",value:t.Q}),this.input.fan(this.low,this.high),this.input.chain(this._lowMidFilter,this.mid),this.lowFrequency.fan(this.low.frequency,this._lowMidFilter.frequency),this.highFrequency.fan(this.mid.frequency,this.high.frequency),this.Q.connect(this.low.Q),this.Q.connect(this._lowMidFilter.Q),this.Q.connect(this.mid.Q),this.Q.connect(this.high.Q),readOnly(this,["high","mid","low","highFrequency","lowFrequency"])}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{Q:1,highFrequency:2500,lowFrequency:400})}dispose(){return super.dispose(),writable(this,["high","mid","low","highFrequency","lowFrequency"]),this.low.dispose(),this._lowMidFilter.dispose(),this.mid.dispose(),this.high.dispose(),this.lowFrequency.dispose(),this.highFrequency.dispose(),this.Q.dispose(),this}}class Panner3D extends ToneAudioNode{constructor(){const t=optionsFromArguments(Panner3D.getDefaults(),arguments,["positionX","positionY","positionZ"]);super(t),this.name="Panner3D",this._panner=this.input=this.output=this.context.createPanner(),this.panningModel=t.panningModel,this.maxDistance=t.maxDistance,this.distanceModel=t.distanceModel,this.coneOuterGain=t.coneOuterGain,this.coneOuterAngle=t.coneOuterAngle,this.coneInnerAngle=t.coneInnerAngle,this.refDistance=t.refDistance,this.rolloffFactor=t.rolloffFactor,this.positionX=new Param({context:this.context,param:this._panner.positionX,value:t.positionX}),this.positionY=new Param({context:this.context,param:this._panner.positionY,value:t.positionY}),this.positionZ=new Param({context:this.context,param:this._panner.positionZ,value:t.positionZ}),this.orientationX=new Param({context:this.context,param:this._panner.orientationX,value:t.orientationX}),this.orientationY=new Param({context:this.context,param:this._panner.orientationY,value:t.orientationY}),this.orientationZ=new Param({context:this.context,param:this._panner.orientationZ,value:t.orientationZ})}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{coneInnerAngle:360,coneOuterAngle:360,coneOuterGain:0,distanceModel:"inverse",maxDistance:1e4,orientationX:0,orientationY:0,orientationZ:0,panningModel:"equalpower",positionX:0,positionY:0,positionZ:0,refDistance:1,rolloffFactor:1})}setPosition(t,e,s){return this.positionX.value=t,this.positionY.value=e,this.positionZ.value=s,this}setOrientation(t,e,s){return this.orientationX.value=t,this.orientationY.value=e,this.orientationZ.value=s,this}get panningModel(){return this._panner.panningModel}set panningModel(t){this._panner.panningModel=t}get refDistance(){return this._panner.refDistance}set refDistance(t){this._panner.refDistance=t}get rolloffFactor(){return this._panner.rolloffFactor}set rolloffFactor(t){this._panner.rolloffFactor=t}get distanceModel(){return this._panner.distanceModel}set distanceModel(t){this._panner.distanceModel=t}get coneInnerAngle(){return this._panner.coneInnerAngle}set coneInnerAngle(t){this._panner.coneInnerAngle=t}get coneOuterAngle(){return this._panner.coneOuterAngle}set coneOuterAngle(t){this._panner.coneOuterAngle=t}get coneOuterGain(){return this._panner.coneOuterGain}set coneOuterGain(t){this._panner.coneOuterGain=t}get maxDistance(){return this._panner.maxDistance}set maxDistance(t){this._panner.maxDistance=t}dispose(){return super.dispose(),this._panner.disconnect(),this.orientationX.dispose(),this.orientationY.dispose(),this.orientationZ.dispose(),this.positionX.dispose(),this.positionY.dispose(),this.positionZ.dispose(),this}}class Recorder extends ToneAudioNode{constructor(){const t=optionsFromArguments(Recorder.getDefaults(),arguments);super(t),this.name="Recorder",this.input=new Gain({context:this.context}),assert(Recorder.supported,"Media Recorder API is not available"),this._stream=this.context.createMediaStreamDestination(),this.input.connect(this._stream),this._recorder=new MediaRecorder(this._stream.stream,{mimeType:t.mimeType})}static getDefaults(){return ToneAudioNode.getDefaults()}get mimeType(){return this._recorder.mimeType}static get supported(){return null!==xn&&Reflect.has(xn,"MediaRecorder")}get state(){return"inactive"===this._recorder.state?"stopped":"paused"===this._recorder.state?"paused":"started"}start(){return e(this,void 0,void 0,function*(){assert("started"!==this.state,"Recorder is already started");const t=new Promise(t=>{const handleStart=()=>{this._recorder.removeEventListener("start",handleStart,!1),t()};this._recorder.addEventListener("start",handleStart,!1)});return"stopped"===this.state?this._recorder.start():this._recorder.resume(),yield t})}stop(){return e(this,void 0,void 0,function*(){assert("stopped"!==this.state,"Recorder is not started");const t=new Promise(t=>{const handleData=e=>{this._recorder.removeEventListener("dataavailable",handleData,!1),t(e.data)};this._recorder.addEventListener("dataavailable",handleData,!1)});return this._recorder.stop(),yield t})}pause(){return assert("started"===this.state,"Recorder must be started"),this._recorder.pause(),this}dispose(){return super.dispose(),this.input.dispose(),this._stream.disconnect(),this}}class Compressor extends ToneAudioNode{constructor(){const t=optionsFromArguments(Compressor.getDefaults(),arguments,["threshold","ratio"]);super(t),this.name="Compressor",this._compressor=this.context.createDynamicsCompressor(),this.input=this._compressor,this.output=this._compressor,this.threshold=new Param({minValue:this._compressor.threshold.minValue,maxValue:this._compressor.threshold.maxValue,context:this.context,convert:!1,param:this._compressor.threshold,units:"decibels",value:t.threshold}),this.attack=new Param({minValue:this._compressor.attack.minValue,maxValue:this._compressor.attack.maxValue,context:this.context,param:this._compressor.attack,units:"time",value:t.attack}),this.release=new Param({minValue:this._compressor.release.minValue,maxValue:this._compressor.release.maxValue,context:this.context,param:this._compressor.release,units:"time",value:t.release}),this.knee=new Param({minValue:this._compressor.knee.minValue,maxValue:this._compressor.knee.maxValue,context:this.context,convert:!1,param:this._compressor.knee,units:"decibels",value:t.knee}),this.ratio=new Param({minValue:this._compressor.ratio.minValue,maxValue:this._compressor.ratio.maxValue,context:this.context,convert:!1,param:this._compressor.ratio,units:"positive",value:t.ratio}),readOnly(this,["knee","release","attack","ratio","threshold"])}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{attack:.003,knee:30,ratio:12,release:.25,threshold:-24})}get reduction(){return this._compressor.reduction}dispose(){return super.dispose(),this._compressor.disconnect(),this.attack.dispose(),this.release.dispose(),this.threshold.dispose(),this.ratio.dispose(),this.knee.dispose(),this}}class Gate extends ToneAudioNode{constructor(){const t=optionsFromArguments(Gate.getDefaults(),arguments,["threshold","smoothing"]);super(t),this.name="Gate",this._follower=new Follower({context:this.context,smoothing:t.smoothing}),this._gt=new GreaterThan({context:this.context,value:dbToGain(t.threshold)}),this.input=new Gain({context:this.context}),this._gate=this.output=new Gain({context:this.context}),this.input.connect(this._gate),this.input.chain(this._follower,this._gt,this._gate.gain)}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{smoothing:.1,threshold:-40})}get threshold(){return gainToDb(this._gt.value)}set threshold(t){this._gt.value=dbToGain(t)}get smoothing(){return this._follower.smoothing}set smoothing(t){this._follower.smoothing=t}dispose(){return super.dispose(),this.input.dispose(),this._follower.dispose(),this._gt.dispose(),this._gate.dispose(),this}}class Limiter extends ToneAudioNode{constructor(){const t=optionsFromArguments(Limiter.getDefaults(),arguments,["threshold"]);super(t),this.name="Limiter",this._compressor=this.input=this.output=new Compressor({context:this.context,ratio:20,attack:.003,release:.01,threshold:t.threshold}),this.threshold=this._compressor.threshold,readOnly(this,"threshold")}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{threshold:-12})}get reduction(){return this._compressor.reduction}dispose(){return super.dispose(),this._compressor.dispose(),this.threshold.dispose(),this}}class MidSideCompressor extends ToneAudioNode{constructor(){const t=optionsFromArguments(MidSideCompressor.getDefaults(),arguments);super(t),this.name="MidSideCompressor",this._midSideSplit=this.input=new MidSideSplit({context:this.context}),this._midSideMerge=this.output=new MidSideMerge({context:this.context}),this.mid=new Compressor(Object.assign(t.mid,{context:this.context})),this.side=new Compressor(Object.assign(t.side,{context:this.context})),this._midSideSplit.mid.chain(this.mid,this._midSideMerge.mid),this._midSideSplit.side.chain(this.side,this._midSideMerge.side),readOnly(this,["mid","side"])}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{mid:{ratio:3,threshold:-24,release:.03,attack:.02,knee:16},side:{ratio:6,threshold:-30,release:.25,attack:.03,knee:10}})}dispose(){return super.dispose(),this.mid.dispose(),this.side.dispose(),this._midSideSplit.dispose(),this._midSideMerge.dispose(),this}}class MultibandCompressor extends ToneAudioNode{constructor(){const t=optionsFromArguments(MultibandCompressor.getDefaults(),arguments);super(t),this.name="MultibandCompressor",this._splitter=this.input=new MultibandSplit({context:this.context,lowFrequency:t.lowFrequency,highFrequency:t.highFrequency}),this.lowFrequency=this._splitter.lowFrequency,this.highFrequency=this._splitter.highFrequency,this.output=new Gain({context:this.context}),this.low=new Compressor(Object.assign(t.low,{context:this.context})),this.mid=new Compressor(Object.assign(t.mid,{context:this.context})),this.high=new Compressor(Object.assign(t.high,{context:this.context})),this._splitter.low.chain(this.low,this.output),this._splitter.mid.chain(this.mid,this.output),this._splitter.high.chain(this.high,this.output),readOnly(this,["high","mid","low","highFrequency","lowFrequency"])}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{lowFrequency:250,highFrequency:2e3,low:{ratio:6,threshold:-30,release:.25,attack:.03,knee:10},mid:{ratio:3,threshold:-24,release:.03,attack:.02,knee:16},high:{ratio:3,threshold:-24,release:.03,attack:.02,knee:16}})}dispose(){return super.dispose(),this._splitter.dispose(),this.low.dispose(),this.mid.dispose(),this.high.dispose(),this.output.dispose(),this}}class EQ3 extends ToneAudioNode{constructor(){const t=optionsFromArguments(EQ3.getDefaults(),arguments,["low","mid","high"]);super(t),this.name="EQ3",this.output=new Gain({context:this.context}),this._internalChannels=[],this.input=this._multibandSplit=new MultibandSplit({context:this.context,highFrequency:t.highFrequency,lowFrequency:t.lowFrequency}),this._lowGain=new Gain({context:this.context,gain:t.low,units:"decibels"}),this._midGain=new Gain({context:this.context,gain:t.mid,units:"decibels"}),this._highGain=new Gain({context:this.context,gain:t.high,units:"decibels"}),this.low=this._lowGain.gain,this.mid=this._midGain.gain,this.high=this._highGain.gain,this.Q=this._multibandSplit.Q,this.lowFrequency=this._multibandSplit.lowFrequency,this.highFrequency=this._multibandSplit.highFrequency,this._multibandSplit.low.chain(this._lowGain,this.output),this._multibandSplit.mid.chain(this._midGain,this.output),this._multibandSplit.high.chain(this._highGain,this.output),readOnly(this,["low","mid","high","lowFrequency","highFrequency"]),this._internalChannels=[this._multibandSplit]}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{high:0,highFrequency:2500,low:0,lowFrequency:400,mid:0})}dispose(){return super.dispose(),writable(this,["low","mid","high","lowFrequency","highFrequency"]),this._multibandSplit.dispose(),this.lowFrequency.dispose(),this.highFrequency.dispose(),this._lowGain.dispose(),this._midGain.dispose(),this._highGain.dispose(),this.low.dispose(),this.mid.dispose(),this.high.dispose(),this.Q.dispose(),this}}class Convolver extends ToneAudioNode{constructor(){const t=optionsFromArguments(Convolver.getDefaults(),arguments,["url","onload"]);super(t),this.name="Convolver",this._convolver=this.context.createConvolver(),this._buffer=new ToneAudioBuffer(t.url,e=>{this.buffer=e,t.onload()}),this.input=new Gain({context:this.context}),this.output=new Gain({context:this.context}),this._buffer.loaded&&(this.buffer=this._buffer),this.normalize=t.normalize,this.input.chain(this._convolver,this.output)}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{normalize:!0,onload:noOp})}load(t){return e(this,void 0,void 0,function*(){this.buffer=yield this._buffer.load(t)})}get buffer(){return this._buffer.length?this._buffer:null}set buffer(t){t&&this._buffer.set(t),this._convolver.buffer&&(this.input.disconnect(),this._convolver.disconnect(),this._convolver=this.context.createConvolver(),this.input.chain(this._convolver,this.output));const e=this._buffer.get();this._convolver.buffer=e||null}get normalize(){return this._convolver.normalize}set normalize(t){this._convolver.normalize=t}dispose(){return super.dispose(),this._buffer.dispose(),this._convolver.disconnect(),this}}function now(){return getContext().now()}const Qn=getContext().transport;function getTransport(){return getContext().transport}const Zn=getContext().destination,Xn=getContext().destination;const Yn=getContext().listener;const $n=getContext().draw;const Hn=getContext();const Jn=ToneAudioBuffer,Kn=ToneAudioBuffers,ti=ToneBufferSource,ei=Object.freeze(Object.defineProperty({__proto__:null,AMOscillator:AMOscillator,AMSynth:AMSynth,Abs:Abs,Add:Add,AmplitudeEnvelope:AmplitudeEnvelope,Analyser:Analyser,AudioToGain:AudioToGain,AutoFilter:AutoFilter,AutoPanner:AutoPanner,AutoWah:AutoWah,BaseContext:BaseContext,BiquadFilter:BiquadFilter,BitCrusher:BitCrusher,Buffer:Jn,BufferSource:ti,Buffers:Kn,Channel:Channel,Chebyshev:Chebyshev,Chorus:Chorus,Clock:Clock,Compressor:Compressor,Context:Context,Convolver:Convolver,CrossFade:CrossFade,DCMeter:DCMeter,Delay:Delay,Destination:Zn,Distortion:Distortion,Draw:$n,DuoSynth:DuoSynth,EQ3:EQ3,Emitter:Emitter,Envelope:Envelope,FFT:FFT,FMOscillator:FMOscillator,FMSynth:FMSynth,FatOscillator:FatOscillator,FeedbackCombFilter:FeedbackCombFilter,FeedbackDelay:FeedbackDelay,Filter:Filter,Follower:Follower,Freeverb:Freeverb,Frequency:function Frequency(t,e){return new FrequencyClass(getContext(),t,e)},FrequencyClass:FrequencyClass,FrequencyEnvelope:FrequencyEnvelope,FrequencyShifter:FrequencyShifter,Gain:Gain,GainToAudio:GainToAudio,Gate:Gate,GrainPlayer:GrainPlayer,GreaterThan:GreaterThan,GreaterThanZero:GreaterThanZero,IntervalTimeline:IntervalTimeline,JCReverb:JCReverb,LFO:LFO,Limiter:Limiter,Listener:Yn,Loop:Loop,LowpassCombFilter:LowpassCombFilter,Master:Xn,MembraneSynth:MembraneSynth,Merge:Merge,MetalSynth:MetalSynth,Meter:Meter,MidSideCompressor:MidSideCompressor,MidSideMerge:MidSideMerge,MidSideSplit:MidSideSplit,Midi:function Midi(t,e){return new MidiClass(getContext(),t,e)},MidiClass:MidiClass,Mono:Mono,MonoSynth:MonoSynth,MultibandCompressor:MultibandCompressor,MultibandSplit:MultibandSplit,Multiply:Multiply,Negate:Negate,Noise:Noise,NoiseSynth:NoiseSynth,Offline:function Offline(t,s){return e(this,arguments,void 0,function*(t,e,s=2,n=getContext().sampleRate){const i=getContext(),o=new OfflineContext(s,e,n);setContext(o),yield t(o);const r=o.render();setContext(i);const a=yield r;return new ToneAudioBuffer(a)})},OfflineContext:OfflineContext,OmniOscillator:OmniOscillator,OnePoleFilter:OnePoleFilter,Oscillator:Oscillator,PWMOscillator:PWMOscillator,PanVol:PanVol,Panner:Panner,Panner3D:Panner3D,Param:Param,Part:Part,Pattern:Pattern,Phaser:Phaser,PingPongDelay:PingPongDelay,PitchShift:PitchShift,Player:Player,Players:Players,PluckSynth:PluckSynth,PolySynth:PolySynth,Pow:Pow,PulseOscillator:PulseOscillator,Recorder:Recorder,Reverb:Reverb,Sampler:Sampler,Scale:Scale,ScaleExp:ScaleExp,Sequence:Sequence,Signal:Signal,Solo:Solo,Split:Split,StateTimeline:StateTimeline,StereoWidener:StereoWidener,Subtract:Subtract,SyncedSignal:class SyncedSignal extends Signal{constructor(){const t=optionsFromArguments(Signal.getDefaults(),arguments,["value","units"]);super(t),this.name="SyncedSignal",this.override=!1,this._lastVal=t.value,this._synced=this.context.transport.scheduleRepeat(this._onTick.bind(this),"1i"),this._syncedCallback=this._anchorValue.bind(this),this.context.transport.on("start",this._syncedCallback),this.context.transport.on("pause",this._syncedCallback),this.context.transport.on("stop",this._syncedCallback),this._constantSource.disconnect(),this._constantSource.stop(0),this._constantSource=this.output=new ToneConstantSource({context:this.context,offset:t.value,units:t.units}).start(0),this.setValueAtTime(t.value,0)}_onTick(t){const e=super.getValueAtTime(this.context.transport.seconds);this._lastVal!==e&&(this._lastVal=e,this._constantSource.offset.setValueAtTime(e,t))}_anchorValue(t){const e=super.getValueAtTime(this.context.transport.seconds);this._lastVal=e,this._constantSource.offset.cancelAndHoldAtTime(t),this._constantSource.offset.setValueAtTime(e,t)}getValueAtTime(t){const e=new TransportTimeClass(this.context,t).toSeconds();return super.getValueAtTime(e)}setValueAtTime(t,e){const s=new TransportTimeClass(this.context,e).toSeconds();return super.setValueAtTime(t,s),this}linearRampToValueAtTime(t,e){const s=new TransportTimeClass(this.context,e).toSeconds();return super.linearRampToValueAtTime(t,s),this}exponentialRampToValueAtTime(t,e){const s=new TransportTimeClass(this.context,e).toSeconds();return super.exponentialRampToValueAtTime(t,s),this}setTargetAtTime(t,e,s){const n=new TransportTimeClass(this.context,e).toSeconds();return super.setTargetAtTime(t,n,s),this}cancelScheduledValues(t){const e=new TransportTimeClass(this.context,t).toSeconds();return super.cancelScheduledValues(e),this}setValueCurveAtTime(t,e,s,n){const i=new TransportTimeClass(this.context,e).toSeconds();return s=this.toSeconds(s),super.setValueCurveAtTime(t,i,s,n),this}cancelAndHoldAtTime(t){const e=new TransportTimeClass(this.context,t).toSeconds();return super.cancelAndHoldAtTime(e),this}setRampPoint(t){const e=new TransportTimeClass(this.context,t).toSeconds();return super.setRampPoint(e),this}exponentialRampTo(t,e,s){const n=new TransportTimeClass(this.context,s).toSeconds();return super.exponentialRampTo(t,e,n),this}linearRampTo(t,e,s){const n=new TransportTimeClass(this.context,s).toSeconds();return super.linearRampTo(t,e,n),this}targetRampTo(t,e,s){const n=new TransportTimeClass(this.context,s).toSeconds();return super.targetRampTo(t,e,n),this}dispose(){return super.dispose(),this.context.transport.clear(this._synced),this.context.transport.off("start",this._syncedCallback),this.context.transport.off("pause",this._syncedCallback),this.context.transport.off("stop",this._syncedCallback),this._constantSource.dispose(),this}},Synth:Synth,Ticks:function Ticks(t,e){return new TicksClass(getContext(),t,e)},TicksClass:TicksClass,Time:Time$1,TimeClass:TimeClass,Timeline:Timeline,ToneAudioBuffer:ToneAudioBuffer,ToneAudioBuffers:ToneAudioBuffers,ToneAudioNode:ToneAudioNode,ToneBufferSource:ToneBufferSource,ToneEvent:ToneEvent,ToneOscillatorNode:ToneOscillatorNode,Transport:Qn,TransportTime:function TransportTime(t,e){return new TransportTimeClass(getContext(),t,e)},TransportTimeClass:TransportTimeClass,Tremolo:Tremolo,Unit:Fn,UserMedia:UserMedia,Vibrato:Vibrato,Volume:Volume,WaveShaper:WaveShaper,Waveform:Waveform,Zero:Zero,connect:connect,connectSeries:connectSeries,connectSignal:connectSignal,context:Hn,dbToGain:dbToGain,debug:vn,defaultArg:defaultArg,disconnect:disconnect,fanIn:function fanIn(...t){const e=t.pop();isDefined(e)&&t.forEach(t=>connect(t,e))},ftom:ftom,gainToDb:gainToDb,getContext:getContext,getDestination:function getDestination(){return getContext().destination},getDraw:function getDraw(){return getContext().draw},getListener:function getListener(){return getContext().listener},getTransport:getTransport,immediate:function immediate(){return getContext().immediate()},intervalToFrequencyRatio:intervalToFrequencyRatio,isArray:isArray,isBoolean:isBoolean,isDefined:isDefined,isFunction:isFunction,isNote:isNote,isNumber:isNumber,isObject:isObject,isString:isString,isUndef:isUndef,loaded:function loaded(){return ToneAudioBuffer.loaded()},mtof:mtof,now:now,optionsFromArguments:optionsFromArguments,setContext:setContext,start:start,supported:()=>(async(t,e,s,n,i,o,r,a,c,h,l,u,d,p,m,f)=>{if(t(e,e)&&t(s,s)&&t(i,i)&&t(o,o)&&t(a,a)&&t(c,c)&&t(h,h)&&t(l,l)&&t(u,u)&&t(d,d)&&t(p,p))return(await Promise.all([t(n,n),t(r,r),t(m,m),t(f,f)])).every(t=>t);return!1})(Z,(t=>()=>{if(null===t)return!1;const e=new t(1,1,44100).createBuffer(1,1,44100);if(void 0===e.copyToChannel)return!0;const s=new Float32Array(2);try{e.copyFromChannel(s,0,0)}catch{return!1}return!0})(ht),(t=>()=>{if(null===t)return!1;if(void 0!==t.prototype&&void 0!==t.prototype.close)return!0;const e=new t,s=void 0!==e.close;try{e.close()}catch{}return s})(_t),(t=>()=>{if(null===t)return Promise.resolve(!1);const e=new t(1,1,44100);return new Promise(t=>{let s=!0;const resolvePromise=n=>{s&&(s=!1,e.startRendering(),t(n instanceof TypeError))};let n;try{n=e.decodeAudioData(null,()=>{},resolvePromise)}catch(i){resolvePromise(i)}void 0!==n&&n.catch(resolvePromise)})})(ht),(t=>()=>{if(null===t)return!1;let e;try{e=new t({latencyHint:"balanced"})}catch{return!1}return e.close(),!0})(_t),(t=>()=>{if(null===t)return!1;const e=new t(1,1,44100).createGain(),s=e.connect(e)===e;return e.disconnect(e),s})(ht),((t,e)=>async()=>{if(null===t)return!0;if(null===e)return!1;const s=new Blob(['let c,p;class A extends AudioWorkletProcessor{constructor(){super();this.port.onmessage=(e)=>{p=e.data;p.onmessage=()=>{p.postMessage(c);p.close()};this.port.postMessage(0)}}process(){c=1}}registerProcessor("a",A)'],{type:"application/javascript; charset=utf-8"}),n=new MessageChannel,i=new e(1,128,44100),o=URL.createObjectURL(s);let r=!1;try{await i.audioWorklet.addModule(o);const e=new t(i,"a",{numberOfOutputs:0}),s=i.createOscillator();await new Promise(t=>{e.port.onmessage=()=>t(),e.port.postMessage(n.port2,[n.port2])}),e.port.onmessage=()=>r=!0,s.connect(e),s.start(0),await i.startRendering(),r=await new Promise(t=>{n.port1.onmessage=({data:e})=>t(1===e),n.port1.postMessage(0)})}catch{}finally{n.port1.close(),URL.revokeObjectURL(o)}return r})(bt,ht),(t=>()=>{if(null===t)return!1;const e=new t(1,1,44100).createChannelMerger();if("max"===e.channelCountMode)return!0;try{e.channelCount=2}catch{return!0}return!1})(ht),(t=>()=>{if(null===t)return!1;const e=new t(1,1,44100);return void 0===e.createConstantSource||e.createConstantSource().offset.maxValue!==Number.POSITIVE_INFINITY})(ht),(t=>()=>{if(null===t)return!1;const e=new t(1,1,44100),s=e.createConvolver();s.buffer=e.createBuffer(1,1,e.sampleRate);try{s.buffer=e.createBuffer(1,1,e.sampleRate)}catch{return!1}return!0})(ht),(t=>()=>{if(null===t)return!1;const e=new t(1,1,44100).createConvolver();try{e.channelCount=1}catch{return!1}return!0})(ht),testDomExceptionConstructorSupport,(t=>()=>null!==t&&t.hasOwnProperty("isSecureContext"))($),(t=>()=>{if(null===t)return!1;const e=new t;try{return e.createMediaStreamSource(new MediaStream),!1}catch(s){return!0}finally{e.close()}})(_t),(t=>()=>{if(null===t)return Promise.resolve(!1);const e=new t(1,1,44100);if(void 0===e.createStereoPanner)return Promise.resolve(!0);if(void 0===e.createConstantSource)return Promise.resolve(!0);const s=e.createConstantSource(),n=e.createStereoPanner();return s.channelCount=1,s.offset.value=1,n.channelCount=1,s.start(),s.connect(n).connect(e.destination),e.startRendering().then(t=>1!==t.getChannelData(0)[0])})(ht),testTransferablesSupport),version:i},Symbol.toStringTag,{value:"Module"}));class Time{constructor(t={}){__publicField(this,"number"),__publicField(this,"character"),__publicField(this,"dot"),__publicField(this,"triplet"),"string"==typeof t&&(t=Time.parse(t));const{number:e,character:s,dot:n,triplet:i}=t;this.number=Number(e),this.dot=n||!1,this.triplet=i||"t"===s,this.character=String(s).replace("t","n")}get preparedCharacter(){return this.triplet?"t":this.character}equals(t){return this.toString()===(null==t?void 0:t.toString())}toSeconds(){return function toSeconds(t){var e,s;try{return Time$1(t).toSeconds()}catch(n){console.error(n);return({"1m":2,"2m":4,"2n":1,"4n":.5,"8n":.25,"16n":.125,"32n":.0625}[t]||0)*(null==(s=null==(e=getTransport())?void 0:e.bpm)?void 0:s.value)/120}}(this.toString())}toString(){return`${this.number}${this.triplet?"t":this.character}${this.dot?".":""}`}static parse(t){if(t instanceof Time)return t;try{const[,e,s,n]=t.match(/^(\d+)([a-z])(\.?)$/i)||[];return{number:Number(e),character:s,dot:!!n,triplet:"t"===s}}catch(e){throw e}}toJSON(){return{number:this.number,character:this.character,dot:this.dot,triplet:this.triplet}}static create(t){return new Time(t)}}class Note{constructor(t={},e={}){__publicField(this,"name"),__publicField(this,"octave",4),__publicField(this,"modification",n.NATURAL),"string"==typeof t&&(t=Note.parse(t));const{name:s,octave:i,modification:o,flat:r,doubleFlat:a,sharp:c,doubleSharp:h}={...t,...e};this.name=(s||"").toLowerCase(),this.octave=i&&Number(i)||void 0,this.modification=r?n.FLAT:a?n.DOUBLE_FLAT:c?n.SHARP:h?n.DOUBLE_SHARP:o||n.NATURAL}get natural(){return this.modification===n.NATURAL}get flat(){return this.modification===n.FLAT}get doubleFlat(){return this.modification===n.DOUBLE_FLAT}get sharp(){return this.modification===n.SHARP}get doubleSharp(){return this.modification===n.DOUBLE_SHARP}equals(t){return this.toString()===(null==t?void 0:t.toString())}get isPause(){return!this.name}static isNatural(t){return!(this.isFlat(t)||this.isSharp(t)||this.isDoubleSharp(t)||this.isDoubleFlat(t))}static isFlat(t){return/[b]/.test(t)}static isDoubleFlat(t){return/(bb)/.test(t)}static isSharp(t){return/#/.test(t)}static isDoubleSharp(t){return/x|##/.test(t)}static parse(t){const[,e,s,n]=(null==t?void 0:t.toLowerCase().match(/([a-g]{1})([bx#]{0,2})(\d+)?/i))||[],i=Note.isDoubleFlat(s)||!1,o=!i&&Note.isFlat(s)||!1,r=Note.isDoubleSharp(s)||!1,a=!Note.isDoubleSharp(s)&&Note.isSharp(s)||!1;return{name:null==e?void 0:e.toLowerCase(),octave:Number(n),flat:o,doubleFlat:i,sharp:a,doubleSharp:r}}toString(){let t="";return this.flat?t="b":this.doubleFlat&&(t="bb"),this.sharp?t+="#":this.doubleSharp&&(t+="x"),`${this.name}${t}${this.octave||""}`}toJSON(){return{name:this.name,octave:this.octave,sharp:this.sharp,doubleSharp:this.doubleSharp}}static create(t={},e){return new Note(t,e)}}const si=class _NoteDescription{constructor(t={}){__publicField(this,"note"),__publicField(this,"time"),__publicField(this,"index",-1),__publicField(this,"velocity",0),__publicField(this,"delay"),__publicField(this,"duration",0),__publicField(this,"selected",!1),"string"==typeof t&&(t={name:t});const{index:e,name:s,note:n,time:i,velocity:o,duration:r,delay:a}=t;this.index=Number(void 0!==e?e:-1),this.note=s||n?new Note(s||n):void 0,this.time=i?new Time(i):void 0,this.velocity=void 0!==o?o:0,this.duration=void 0!==r?r:0,this.delay=void 0!==a?Number(a):0}equals(t){var e,s;return(null==(e=this.note)?void 0:e.equals(t.note))&&(null==(s=this.time)?void 0:s.equals(t.time))&&this.velocity===t.velocity&&this.duration===t.duration}get bindingCount(){return this.time&&["t","n"].includes(this.time.character)&&this.time.number>=4&&{8:1,16:2,32:3}[this.time.number]||0}getName(){var t;return null==(t=this.note)?void 0:t.toString()}getTime(){var t;return null==(t=this.time)?void 0:t.toString()}get isPause(){var t;return!(null==(t=this.note)?void 0:t.name)}get name(){var t;return(null==(t=this.note)?void 0:t.toString())||""}get octave(){var t;return(null==(t=this.note)?void 0:t.octave)||0}toSeconds(){var t;return this.duration||(null==(t=this.time)?void 0:t.toSeconds())||0}toJSON(){var t,e;return{note:null==(t=this.note)?void 0:t.toJSON(),time:null==(e=this.time)?void 0:e.toJSON(),velocity:this.velocity,duration:this.duration,delay:this.delay}}static create(t={}){return new _NoteDescription(t)}};__publicField(si,"Time",Time),__publicField(si,"Note",Note);let ni=si;export{AMSynth as A,DuoSynth as D,FMSynth as F,Xn as M,ni as N,PolySynth as P,Synth as S,Time$1 as T,Volume as V,Qn as a,PluckSynth as b,MonoSynth as c,MetalSynth as d,MembraneSynth as e,ei as f,getTransport as g,Part as h,now as n,start as s};
