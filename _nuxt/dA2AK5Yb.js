var t=Object.defineProperty,__publicField=(e,s,n)=>((e,s,n)=>s in e?t(e,s,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[s]=n)(e,"symbol"!=typeof s?s+"":s,n);import{T as e}from"./G8w6tKzW.js";import{i as s}from"./BHmTNEz3.js";import{c as n}from"./Bk3HlLVR.js";import{d as r,r as o,a0 as i,o as a,y as h,z as u,A as m,J as l,S as c,ac as d,_ as v}from"./BfpYGSxR.js";let f=class Metronom{constructor({speed:t=1,time:e="4n",beatCount:s=1}={}){__publicField(this,"time"),__publicField(this,"speed"),__publicField(this,"beatCount"),__publicField(this,"value",0),this.time=e,this.speed=t,this.beatCount=s}prev(){this.value=Math.max(this.value-this.timeDuration,0)}reset(){this.value=0}next(){this.value=this.value+this.timeDuration}get currentBeat(){return Math.floor(this.value/2)}prevBeat(t=this.beatCount){this.value=Math.max(this.value-2*t,0)}setBeat(t,e=1){this.value=t*e*2}nextBeat(t=this.beatCount){console.log("nexeatt",t),this.value=this.value+2*t}get timeDuration(){return e(this.time,"n").toSeconds()/this.speed}get steps(){return 2/this.timeDuration}now(){return window.performance.now()}getDuration(){return this.value}};class MetronomRenderer{constructor(t,e,s={}){__publicField(this,"canvas"),__publicField(this,"ctx"),__publicField(this,"metronom"),__publicField(this,"noteTimes"),__publicField(this,"outerMargin",[32,0,19,0]),__publicField(this,"beatCount",2),this.setOptions(s),this.canvas=t;const r=t.getContext("2d");if(!r)throw new Error("Canvas context is not available");if(this.ctx=r,this.noteTimes=n(),!(e instanceof f))throw new Error("MetronomRenderer: metronom must be an instance of Metronom");this.metronom=e}setOptions(t){const{outerMargin:e}=t||{};this.outerMargin=e||this.outerMargin}render(t){const e=this.ctx;e.clearRect(0,0,this.canvas.width,this.canvas.height);const n=s(this.outerMargin[0],this.outerMargin[1]),r=s(this.canvas.width-(this.outerMargin[0]+this.outerMargin[2]),this.canvas.height-(this.outerMargin[1]+this.outerMargin[3]));e.fillStyle="#FFAA5580",e.fill(this.getPath(n,r)),e.fillRect(n.x+Math.min(Math.max(Math.round(r.x*(this.metronom.value%(2*this.metronom.beatCount))/2/this.metronom.beatCount),0),r.x),n.y,r.x/this.metronom.steps/this.metronom.beatCount,r.y),"function"==typeof t&&t(e,{position:n,dimension:r})}getPath(t,s){const n=this.metronom,r=new Path2D,o=e(n.time).toSeconds();for(let e=0;e<this.noteTimes.length;e++){const i=this.noteTimes[Number(e)],a=2;for(let e=1;e<=(2/i[1]-1)*this.metronom.beatCount;e++)r.rect(t.x+Math.round(s.x*i[1]*e/2-a/2)/this.metronom.beatCount-a/2,t.y,a,38-2/i[1]);for(let e=0;e<=1/o*2*n.speed*this.metronom.beatCount;e++)r.rect(t.x+Math.round(s.x*o*e/n.speed/2-a/2)/this.metronom.beatCount-a/2,t.y,a,s.y)}return r}}const p={class:"synthesizer-metronom"},g={class:"wrapper"},M=v(r({__name:"Metronom",props:{model:{type:f,required:!0}},emits:["value","render","ready"],setup(t,{emit:e}){const s=o(),n=t,r=e,v=o();function onRefresh(){if(!s.value)return;const{width:t,height:e}=s.value.getBoundingClientRect();s.value.width=t,s.value.height=e,render()}function render(){var t;null==(t=v.value)||t.render((t,e)=>{r("render",t,e)})}return i(()=>n.model.value,t=>{r("value",t),render()}),i(()=>n.model.time,()=>{render()}),i(()=>n.model.speed,()=>{render()}),a(()=>{if(!s.value)throw new Error("Canvas element is not defined");v.value=new MetronomRenderer(s.value,n.model),onRefresh(),r("ready",{render:()=>render()})}),(t,e)=>(u(),h("div",p,[m("div",g,[l(t.$slots,"background",c(d({onRefresh:()=>onRefresh()})),()=>[e[0]||(e[0]=m("div",{class:"spacer"},null,-1))],!0),m("canvas",{ref_key:"canvasEl",ref:s},null,512)])]))}}),[["__scopeId","data-v-3f2e3064"]]);export{f as M,M as a};
