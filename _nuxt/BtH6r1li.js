const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./BBuOOGka.js","./BPnw8H1C.js","./BkRx7U8b.js","./entry.BKgKayuE.css","./Form.CHLd88nu.css","./D9PjJnFw.js","./Button.d1yhUyXb.css","./DpGpKT4E.js","./ButtonWrapper.CJ5gVsbK.css","./CPrp_Jrr.js","./eRs2tlcG.js","./FormField.uYJe21CG.css","./Textfield.DAJI4Mxe.css","./D3SuBBef.js","./CcXWfcLA.js","./Dropdown.D8llyuFU.css","./BoZA8JgY.js","./BT_Yc7AT.js","./uxCSd1pF.js","./Db7xYFkh.js","./CheckboxGroup.4lgYwaTL.css","./ClLpnmyR.js","./BTMT_sH9.js","./Page.BBrJQr8a.css","./JsFOm8c5.js","./Edit.DWp2AHFe.css","./D4EZoZB8.js","./BrM1ohlr.js","./OlYXjGCK.js","./Textarea.B98r7nMf.css","./Cnp2dj6X.js","./Checkbox.BmCNKUYp.css","./ItemMeta.CioGTNSL.css","./DClnbqzp.js","./B3Wmi0DA.js","./CtlMGvom.js","./D4lI5vpz.js","./D4b9WN8K.js","./Wv4Ty0OG.js","./Xk46uXlJ.js","./Markdown.CTZzViyZ.css","./Preview.DqiAOffZ.css","./BD5rj0uW.js","./DsnPi5_5.js","./DJBUgBH1.js","./CJbvcseS.js","./ItemSelect.C6OIF6Wx.css","./FileSelect.CsT4nFwb.css","./Open.DiRiyE1W.css","./BvvpeIHC.js","./Save.CjMM_VZ7.css"])))=>i.map(i=>d[i]);
import{L as D,O as g,K as h,a9 as k}from"./BkRx7U8b.js";import{i as F}from"./OlYXjGCK.js";import{d as $,A as s,T as _}from"./QwGUwJAP.js";import{s as x,f as C,b}from"./DG6QdPnO.js";import{w as O,e as p,h as I,D as v,u as M,j as W,I as N,d as P,k as A}from"./B3Wmi0DA.js";import{C as L}from"./CxKYomUj.js";import{I as u}from"./ClLpnmyR.js";async function z(l,o){let d;const m=l.modules.symbols,e=l.modules.windows,i=o||m.getSelectedItems().filter(t=>{if(t.fsItem)return t.fsItem;throw new Error(`Item has no fsItem. ${t.id}`)}).map(t=>t.fsItem);await Promise.all(i.map(async t=>{const n=D({actions:{openItemMeta:()=>a(n),save:(r,f)=>T(l,r,f),saveItemMeta:(r,f,w)=>E(l,r,f,w)},id:t.id,name:t.name,fsItem:t});[u.SYMBOL,u.VISIBLE,u.IGNORE_SYMBOL_REARRANGE,u.WINDOW_SCALE,u.WINDOW_SCROLL_X,u.WINDOW_SCROLL_Y,u.WINDOW_FULL_SIZE,u.WINDOW_SYMBOL_REARRANGE,u.WINDOW_SIDEBAR].forEach(r=>{n[r]=t.meta.has(r)?t.meta.get(r):!1}),e.addWindow({component:await h(()=>import("./BBuOOGka.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]),import.meta.url).then(r=>r.default),componentData:{fsItem:g(t),model:n},options:{title:`Edit File ${t.name}`,prompt:!1,scaleX:!1,scaleY:!1,scrollX:!1,scrollY:!1}}).awaitClose().then(()=>{})}));async function a(t){const n=t.fsItem;return d=e.addWindow({component:await h(()=>import("./D4EZoZB8.js"),__vite__mapDeps([26,1,2,3,4,5,6,7,8,27,10,11,28,29,30,18,19,31,14,15,13,16,21,22,23,24,32]),import.meta.url).then(c=>c.default),componentData:{fsItem:g(n),model:t},options:{title:`Item Meta ${n.name}`,scale:!0,scrollY:!0},layout:{size:F(420,360)}},{full:!0}),d.awaitClose().then(()=>{d=void 0})}}async function T(l,o,d){const{id:m,name:e}=d,i=o.getPath();if(!m)throw new Error("Id is emoty!");let a;const t=l.addExecution();try{await E(l,o,d),e&&m!==e?a=await l.executeCommand(`rename "${i}" "${e}" -n`):a=await l.executeCommand(`rename "${i}" "${m}" -rn`),a=l.executeCommand(`rename "${i}" "${m}"`)}catch(n){throw t(),n}return t(),a}function V(){return Object.values(u)}async function E(l,o,d,m=!1){const e=l.addExecution();await l.executeCommand(`cleanfilemeta "${o.getPath()}" ${m?"--force":""}`),await V().filter(a=>d[a]!==void 0).reduce((a,t)=>a.then(async()=>{let n=d[t],c=!1;typeof n=="string"?n=`"${n}"`:typeof n=="object"&&(c=!0,n=O(encodeURIComponent(JSON.stringify(n)))),await l.executeCommand(`editfilemeta "${o.getPath()}" "${t}" ${n} ${c?"--json":""}`)}),Promise.resolve()),e()}const Q=$(({module:l})=>{const{fileSystem:o,core:d,disks:m}=l;return[{name:["mountDisk"],description:"Mount Disk",args:[new s({index:0,name:"id",description:"Disk ID"})],async action({id:e},i){const a=d.addExecution();try{const t=await m[e].data(),n=await o.addFloppyDisk(()=>t({core:d}));m[e].hidden||i.message(`Mount Disk <strong>${n.name}</strong> <strong>(${n.id})</strong> successful!`),a()}catch(t){throw console.error(t),p.get("cant_find_disk",e)}}},{name:["changeDirectory","cd"],description:"cd %path%",args:[new s({index:0,name:"path",description:"Directory path"})],async action({path:e}){if(!e)throw p.get("bad_args");try{await o.changeDirectory(e)}catch(i){throw console.error(i),p.get("cant_find",e)}}},{name:["exist"],description:"Check if file exists.",args:[new s({index:0,name:"path",description:"Filename"})],async action({path:e},i){if(!e)throw p.get("bad_args");const a=I(e),t=await o.exist(e);return t?i.message(`File ${a} exists`):i.message(`File ${a} does not exist`),t}},{name:["makedir","mkdir"],args:[new s({index:0,name:"path",description:"Filename"}),new s({index:1,name:"name",description:"Name"}),new s({name:"ignore",flag:!0,description:"Ignore file exist."})],async action({path:e,name:i,ignore:a},t){if(!e)throw p.get("bad_args");const n=await o.makedir(e,i||I(e),{override:a});return t.message(`Directory "${n.name}" created`),n}},{name:["remove","rm"],args:[new s({index:0,name:"path",description:"Filename"}),new s({name:["recursive","r"],flag:!0,description:"Remove Directory Items and Directories."}),new s({name:["ignore"],flag:!0,description:"Ignore the specified file is deleted."})],async action({path:e,recursive:i,ignore:a},t){if(!e)throw p.get("bad_args");return(await o.remove(e,i,{ignore:a})||[]).map(c=>{const r=c.type===v.TYPE?"Directory":"File";return t.message(`Removed ${r}: ${c.name}`),c})}},{name:["readfile","getfile"],description:"Get file content",args:[new s({index:0,name:"path",description:"Filename"})],async action({path:e}){if(!e)throw p.get("bad_args");return(await o.get(e)).data}},{name:["makefile","mkfile"],description:"Creates a file with the specified attributes.",args:[new s({index:0,name:"path",description:"Filename"}),new s({index:1,name:"name",description:"Name"}),new s({index:3,name:"data",description:"Data"}),new s({name:"override",flag:!0,description:"Deletes existing file and recreates."})],action:async(e,i)=>{const a=await S(d,e);return i.message(`File "${a.name}" created`),a}},{name:["editfile"],description:"Edits file with specified attributes.",args:[new s({index:0,name:"path",description:"Filename"}),new s({index:1,name:"data",description:"Data"})],action:async(e,i)=>{const a=await Y(d,e);return i.message(`File "${a.name}" edited`),a}},{name:["openEditFileDialog"],description:"Opens a file dialog to edit the file.",args:[new s({index:0,name:"path",description:"Filename"})],async action({path:e}){if(!e)throw p.get("bad_args");const i=await o.get(e);return z(d,[i])}},{name:["editfilemeta"],description:"Edits file with specified attributes.",args:[new s({index:0,name:"path",description:"Filename"}),new s({index:1,name:"name",description:"Name"}),new s({index:2,name:"value",description:"Value"}),new s({index:3,name:"json",description:"Is JSON value?",flag:!0})],async action({path:e,name:i,value:a,json:t},n){if(!e)throw p.get("bad_args");t&&(a=JSON.parse(decodeURIComponent(M(a))));const c=await o.editFileMeta(e,i,a);return n.message(`File  "${c.name}" Meta edited`),c}},{name:["cleanfilemeta"],description:"Removes all undefined meta values from the file.",args:[new s({index:0,name:"path",description:"Filename"}),new s({name:"force",flag:!0,description:"When set, forces the cleaning of meta values."})],async action({path:e,force:i},a){if(!e)throw p.get("bad_args");const t=await o.cleanFileMeta(e,{force:i});return a.message(`File  "${t.name}" Meta cleaned`),t}},{name:["makelink","mklink"],description:"Creates a link to the specified path.",args:[new s({index:0,name:"ref",description:"Reference path with id (example.ext)."}),new s({index:1,name:"name",description:"Displayed Name"}),new s({index:2,name:"dest",description:"Destination directory."})],async action({ref:e,name:i,dest:a},t){if(!e)throw p.get("bad_args");a=a||".";const n=await o.get(e),c=await o.makelink(n,i);return await o.get(a)!==o.currentItem&&await o.move(c,a,{override:!0}),t.message(`Created link "${i}" with "${await n.getPath()}"`),c}},{name:["editlink"],description:"",args:[new s({index:0,name:"path",description:"Reference filepath with id (example.ext)."}),new s({index:1,name:"ref",description:"Destination directory."})],async action({path:e,ref:i},a){if(!(e&&i))throw p.get("bad_args");const t=await o.get(i),n=await o.editlink(e,t);return a.message(`Edited link "${name}" with "${await t.getPath()}"`),n}},{name:"rename",description:"Renamed a file",args:[new s({index:0,name:"path",description:"Filepath with id (example.ext)."}),new s({index:1,name:"value",description:"Value for id or displayed name."}),new s({name:["name","n"],flag:!0,description:"When set, changes the display name."}),new s({name:["removeName","rn"],flag:!0,description:"When set, removes the display name."})],async action({path:e,value:i,name:a,removeName:t},n){if(!t&&(!e||!i))throw p.get("bad_args");const c=await o.get(e),r=a?c.name:c.id;return await o.rename(e,i,{name:a,removeName:t}),n.message(`Renamed from "${r}" to "${i}"`),c}},{name:["cp","copy"],args:[new s({index:0,name:"from",description:"Source Filepath with id (example.ext)."}),new s({index:1,name:"dest",description:"Destination Filepath with id (example.ext)."}),new s({name:["ignore","i"],flag:!0,description:"When sets, creates a new file if exists."})],async action({from:e,dest:i,ignore:a},t){let n=i;if(!n&&a&&(n=e),!n||!e)throw p.get("bad_args");const c=await o.copy(e,n,{ignore:a});return t.message(`Copied from "${e}" to "${n}"`),c}},{name:["mv","move"],description:"move %from% %to%",args:[new s({index:0,name:"from",description:"From path"}),new s({index:1,name:"to",description:"To path"}),new s({index:2,name:"item-position",description:"Sets the position in the Icon view. (x,y)"})],async action({from:e,to:i,itemPosition:a},t){if(!i||!e)throw p.get("bad_args");const n=await o.move(e,i);a&&n.meta.set(u.POSITION,[0,0].map((r,f)=>{const w=a.split(",");return parseInt(w[Number(f)]||"0")})),n.save();let c;return n instanceof v?c="Directory":c="File",t.message(`${c} moved ${n.name}`),n}},{name:["executeFile"],description:"Execute file.",args:[new s({index:0,name:"path",description:"Path to the file"})],async action({path:e}){if(!e)throw p.get("bad_args");const i=await o.get(e);if(typeof i.action=="function")return i.action(d);throw p.get("cant_find_action",e)}}]});p.add("cant_find_action","Can't find action %1");p.add("cant_find_disk","Can't find disk %1");async function S(l,{path:o,name:d,data:m,override:e=!1}){if(!o)throw p.get("bad_args");return typeof m=="string"&&(m=W(m)),await l.modules.files.fs.makeFile(o,d,m,{override:e||!1,meta:[]})}function Y(l,{path:o,data:d}){if(!o)throw p.get("bad_args");return typeof d=="string"&&(d=W(d)),l.modules.files.fs.editFile(o,d)}async function X(l,o,d){const m=await l.executeCommand(`exist "${o}"`);let e=!1;return m&&(e=await l.executeCommand('openDialog "File exist, overwrite?" --confirm')),S(l,{path:o,data:d,override:e})}async function U(l,o){const d=await l.modules.files?.fs.get(o),m=await l.executeCommand(`readfile "${o}"`);return{fsItem:d,value:m}}const ee=$(({module:l,core:o})=>{const{fileSystem:d}=l;return[{name:"openPreview",args:[new s({index:0,name:"path",description:"Path to the file"}),new s({name:"maximized",description:"If set, window is maximized."})],async action({path:m,maximized:e}){const i=await d.get(m),{type:a,content:t,openMaximized:n}=i.data;if(a==="basic"&&!i.data[L.HAS_WINDOW_OUTPUT])await o.modules.parser?.parseBasic(t,async(c,r)=>await o.executeCommand(c,r));else{const c=await h(()=>import("./DClnbqzp.js"),__vite__mapDeps([33,34,21,2,3,22,23,28,35,36,37,38,39,40,24,41]),import.meta.url).then(r=>r.default);o.modules.windows?.addWindow({component:c,componentData:{type:a,content:t},options:{title:i.name,scaleX:!0,scaleY:!0,scrollX:!0,scrollY:!0},layout:{size:F(420,360)}},{full:n||e||!1})}}},{name:"saveFileDialog",args:[new s({index:0,name:"data",description:"File Content"}),new s({index:1,name:"id",description:"File Id"}),new s({index:2,name:"extension",description:"File Extension"})],action:m=>j(o,m)},{name:"openFileDialog",args:[new s({index:0,name:"type",description:"Type for File or Directory to open."})],async action({type:m}){const e=D({}),i=await h(()=>import("./BD5rj0uW.js"),__vite__mapDeps([42,43,1,2,3,4,5,6,7,8,44,45,46,34,21,22,23,28,35,36,37,38,47,9,10,11,12,24,48]),import.meta.url).then(t=>t.default),a=o.modules.windows?.addWindow({component:i,componentData:{type:m,model:e,fsItem:d.root&&g(d.root)},options:{title:"Open File",scaleX:!1,scaleY:!1,scrollX:!1,scrollY:!1}});if(a){const{value:t}=await a.awaitClose();return t&&U(o,t)}}},{name:"fileinfo",description:"Get info from File or Directory",args:[new s({index:0,name:"path",description:"Path to the file"}),new s({index:1,name:"name",description:"Name from the Info"}),new s({index:2,name:["list","ls"],flag:!0,description:"List all Infos"})],async action({path:m,name:e,list:i},a){const t=await d.getItemMetaList(m);if(i){const n=new _;n.addColumns([{value:"Name",align:"left",minWidth:20},{value:"Value",align:"left",minWidth:20}]),n.addRows(t.map(({name:c,value:r})=>{let f=r;return Array.isArray(r)&&(f=r.join(" ")),[c,f]})),a.message([n])}else return t.find(n=>n.name===e)}},{name:["info","i"],args:[new s({index:0,name:"path",description:"Path to the file"})],async action({path:m},e){let i=d.root;m&&(i=await d.get(m)),i?.parent&&(i=i.parent);const a=await i?.getItems(),t=new _;t.addColumns([{value:"Unit",align:"left",minWidth:8},{value:"Size",align:"right",minWidth:6},{value:"Used",align:"right",minWidth:6},{value:"Free",align:"right",minWidth:6},{value:"Full",minWidth:4},{value:"Errs",align:"center",minWidth:4},{value:"Status",align:"center",minWidth:10},{value:"Name",align:"right",minWidth:14}]);const n=Array.from(a?.values()||[]).filter(r=>r instanceof N);t.addRows(n.map(r=>{let f=0;return(r.size>0||r.maxSize>0)&&(f=r.size/r.maxSize*100),[`${r.id}:`,x(r.maxSize),x(r.size),x(r.maxSize-r.size),`${f}%`,"0",r.locked?"Read":"Read/Write",`${r.name||""}`]}));const c=["","Mounted disks:",t,"","Volumes available:"];n.forEach(r=>{c.push(`${r.name}: [Mounted]`)}),c.push(""),e.message(c)}},{name:["list","ls"],args:[new s({index:0,name:"path",description:"Path to the file"}),new s({name:"dir-size",flag:!0,description:"Show Directory Size."})],async action({path:m,dirSize:e},i){let a=d.currentItem;m&&(a=await d.get(m));const t=Array.from((await a?.getItems()||[]).values()),n=new _;n.addColumns([{value:"Name",align:"left",minWidth:26},{value:"Size",align:"right",minWidth:8},{value:"Access",align:"center",minWidth:12},{value:"Date / Time",align:"center",minWidth:18}]),n.addRows(t.reduce((f,w)=>{let y;w instanceof P&&!e?y="DIR":y=C(x(w.size),8,!0,"0");const R=w.isLocked()?"Read":"Read/Write";return f.push([`${w.id}:`,y,R,w.createdDate?b("D-mm-y H:I:S",w.createdDate):""]),f},[]));const c=t.reduce((f,w)=>(w instanceof v&&f++,f),0),r=t.reduce((f,w)=>(f+=w.size,f),0);return i.message([n,`${t.length} files - ${c} directories - ${r} blocks used`]),Promise.resolve()}}]});async function j(l,{data:o,id:d,extension:m}){const e=await h(()=>import("./BvvpeIHC.js"),__vite__mapDeps([49,1,2,3,4,5,6,7,8,44,45,46,34,21,22,23,28,35,36,37,38,47,9,10,11,12,50]),import.meta.url).then(a=>a.default),i=l.modules.windows?.addWindow({component:e,componentData:{fsItem:l.modules.files?.fs.root&&g(l.modules.files.fs.root),id:d},options:{title:"Save File",scaleX:!1,scaleY:!1,scrollX:!1,scrollY:!1}});if(i){const{value:a}=await i.awaitClose();if(a){let t=a;m&&(t=A(a,m));const n=await X(l,t,o);if(n)return g(k(n))}}}export{Q as a,ee as c,Y as e,z as o,j as s};
