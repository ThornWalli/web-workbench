import{T as f}from"./ehWpBOkw.js";import{i as v}from"./OlYXjGCK.js";import{c as M}from"./Ds-AH-SM.js";import{d as x,r as p,a0 as l,o as w,y as C,z as b,A as d,J as _,S as y,ac as T,_ as R}from"./BkRx7U8b.js";const m=2,B="n";let g=class{time;speed;beatCount;value=0;constructor({speed:e=1,time:t="4n",beatCount:o=1}={}){this.time=t,this.speed=e,this.beatCount=o}prev(){this.value=Math.max(this.value-this.timeDuration,0)}reset(){this.value=0}next(){this.value=this.value+this.timeDuration}get currentBeat(){return Math.floor(this.value/m)}prevBeat(e=this.beatCount){this.value=Math.max(this.value-e*m,0)}setBeat(e,t=1){this.value=e*t*m}nextBeat(e=this.beatCount){console.log("nexeatt",e),this.value=this.value+e*m}get timeDuration(){return f(this.time,B).toSeconds()/this.speed}get steps(){return 2/this.timeDuration}now(){return window.performance.now()}getDuration(){return this.value}};class E{canvas;ctx;metronom;noteTimes;outerMargin=[32,0,19,0];beatCount=2;constructor(e,t,o={}){this.setOptions(o),this.canvas=e;const s=e.getContext("2d");if(!s)throw new Error("Canvas context is not available");if(this.ctx=s,this.noteTimes=M(),t instanceof g)this.metronom=t;else throw new Error("MetronomRenderer: metronom must be an instance of Metronom")}setOptions(e){const{outerMargin:t}=e||{};this.outerMargin=t||this.outerMargin}render(e){const t=this.ctx;t.clearRect(0,0,this.canvas.width,this.canvas.height);const o=v(this.outerMargin[0],this.outerMargin[1]),s=v(this.canvas.width-(this.outerMargin[0]+this.outerMargin[2]),this.canvas.height-(this.outerMargin[1]+this.outerMargin[3]));t.fillStyle="#FFAA5580",t.fill(this.getPath(o,s)),t.fillRect(o.x+Math.min(Math.max(Math.round(s.x*(this.metronom.value%(2*this.metronom.beatCount))/2/this.metronom.beatCount),0),s.x),o.y,s.x/this.metronom.steps/this.metronom.beatCount,s.y),typeof e=="function"&&e(t,{position:o,dimension:s})}getPath(e,t){const o=this.metronom,s=new Path2D,h=f(o.time).toSeconds();for(let a=0;a<this.noteTimes.length;a++){const r=this.noteTimes[Number(a)],n=2;for(let i=1;i<=(2/r[1]-1)*this.metronom.beatCount;i++)s.rect(e.x+Math.round(t.x*r[1]*i/2-n/2)/this.metronom.beatCount-n/2,e.y,n,38-2/r[1]);for(let i=0;i<=1/h*2*o.speed*this.metronom.beatCount;i++)s.rect(e.x+Math.round(t.x*h*i/o.speed/2-n/2)/this.metronom.beatCount-n/2,e.y,n,t.y)}return s}}const D={class:"synthesizer-metronom"},S={class:"wrapper"},A=x({__name:"Metronom",props:{model:{type:g,required:!0}},emits:["value","render","ready"],setup(u,{emit:e}){const t=p(),o=u,s=e,c=p();l(()=>o.model.value,r=>{s("value",r),a()}),l(()=>o.model.time,()=>{a()}),l(()=>o.model.speed,()=>{a()}),w(()=>{if(!t.value)throw new Error("Canvas element is not defined");c.value=new E(t.value,o.model),h(),s("ready",{render:()=>a()})});function h(){if(!t.value)return;const{width:r,height:n}=t.value.getBoundingClientRect();t.value.width=r,t.value.height=n,a()}function a(){c.value?.render((r,n)=>{s("render",r,n)})}return(r,n)=>(b(),C("div",D,[d("div",S,[_(r.$slots,"background",y(T({onRefresh:()=>h()})),()=>[n[0]||(n[0]=d("div",{class:"spacer"},null,-1))],!0),d("canvas",{ref_key:"canvasEl",ref:t},null,512)])]))}}),z=R(A,[["__scopeId","data-v-3f2e3064"]]);export{g as M,z as a};
