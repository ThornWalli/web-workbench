import{z as T}from"./ZHhSaUdj.js";import{d as p,a as n,t as i,b as o,k as _,v as S,F as d,w as D,x as F,y as g,f as O,e as C}from"./jI0uH-Zs.js";import{S as N}from"./BTa_gj15.js";import{K as l}from"./B2exwp0w.js";import{O as P}from"./Bx1Gqxs7.js";const h=p(({core:a,model:t})=>{return[new n({order:0,title:"Document Editor",items:[new n({title:"New",hotKey:{alt:!0,code:l.KEY_N,title:"N"},action:E}),new n({title:"Open…",hotKey:{alt:!0,code:l.KEY_O,title:"O"},action:w}),new n({title:"Save",hotKey:{alt:!0,code:l.KEY_S,title:"S"},action:I}),new n({title:"Save As…",action:v}),new N,new n({hotKey:{alt:!0,code:l.KEY_I,title:"I"},title:"Info",action:()=>{var e;return(e=t.actions)==null?void 0:e.openInfo()}}),new n({title:"Close",action:f})]}),new n({order:1,title:"Document Settings",items:[new n({title:"Open maximized",type:o.CHECKBOX,name:i.OPEN_MAXIMIZED,model:t.value}),new n({title:"Output Format",items:[new n({title:"Markdown",type:o.RADIO,name:i.OUTPUT_TYPE,value:"markdown",model:t.value}),new n({title:"HTML",type:o.RADIO,name:i.OUTPUT_TYPE,value:"html",model:t.value})]}),new n({title:"Font Family",items:Object.values(_).map(e=>{const s=d[e];return new n({title:S[e],items:Object.entries(s).map(([r,u])=>new n({title:r,type:o.RADIO,name:i.FONT_FAMILY,value:u,model:t.value}))})})}),new n({title:"Font Size",items:D(t.value)}),new n({title:"Line Height",items:F(t.value)}),new n({title:"Modular Scale",items:g(t.value)})]}),new n({order:2,title:"Preview",type:o.CHECKBOX,name:O.DOCUMENT_EDITOR_SHOW_PREVIEW,model:a.config.observable,action({checked:e}){return a.config.set(O.DOCUMENT_EDITOR_SHOW_PREVIEW,e)}})];function f(){var e;return(e=t.actions)==null?void 0:e.close()}async function w(){const e=await a.executeCommand("openFileDialog");if(e)if("content"in e.value)t.fsItem=e.fsItem,t.value=Object.assign(t.value,C(),e.value);else throw new Error("Can't read file content")}function E(){var e;(e=t.actions)==null||e.reset()}function I(){return c()}function v(){return c(!0)}async function c(e=!1){const s=await T(JSON.stringify(t.value));let r;if(!e&&t.fsItem)return r=await a.executeCommand(`editfile "${t.fsItem.getPath()}" --data="${s}"`),r?a.executeCommand('openDialog "File saved."'):a.executeCommand('openDialog "File could not be saved."');{const u={html:"html",markdown:"md"}[String(t.value[i.OUTPUT_TYPE])],m=await a.executeCommand(`saveFileDialog --data="${s}" --extension="${u}"`);return m?(t.fsItem=P(m),t.fsItem):null}}});export{h as c};
