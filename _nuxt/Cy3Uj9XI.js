var f=Object.defineProperty;var M=(s,t,e)=>t in s?f(s,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[t]=e;var a=(s,t,e)=>M(s,typeof t!="symbol"?t+"":t,e);import{g as d}from"./BxO05Tpb.js";import{b as v}from"./D2bZ6ctC.js";import{a as x}from"./uFgmqckw.js";import{u as w}from"./I3M8u4_e.js";import{_ as b,t as _,v as y,x as c,G as R,K as C,a9 as $}from"./C5IvAcAs.js";const h=2;let g=class{constructor({speed:t=1,time:e="4n",beatCount:r=1}={}){a(this,"value",0);this.time=e,this.speed=t,this.beatCount=r}prev(){this.value=Math.max(this.value-this.timeDuration,0)}reset(){this.value=0}next(){this.value=this.value+this.timeDuration}get currentBeat(){return Math.floor(this.value/h)}prevBeat(t=this.beatCount){this.value=Math.max(this.value-t*h,0)}setBeat(t,e=1){this.value=t*e*h}nextBeat(t=this.beatCount){console.log("nexeatt",t),this.value=this.value+t*h}get timeDuration(){return new v(this.time).toSeconds()/this.speed}get steps(){return 2/this.timeDuration}now(){return window.performance.now()}getDuration(){return this.value}};class B{constructor(t,e,r={}){a(this,"outerMargin",[32,0,19,0]);a(this,"beatCount",2);if(this.setOptions(r),this.canvas=t,this.ctx=t.getContext("2d"),this.noteTimes=x(),e instanceof g)this.metronom=e;else throw new Error("MetronomRenderer: metronom must be an instance of Metronom")}setOptions(t){const{outerMargin:e}=t||{};this.outerMargin=e||this.outerMargin}render(t){const e=this.ctx;e.clearRect(0,0,this.canvas.width,this.canvas.height);const r=d(this.outerMargin[0],this.outerMargin[1]),o=d(this.canvas.width-(this.outerMargin[0]+this.outerMargin[2]),this.canvas.height-(this.outerMargin[1]+this.outerMargin[3]));e.fillStyle="#FFAA5580",e.fill(this.getPath(r,o)),e.fillRect(r.x+Math.min(Math.max(Math.round(o.x*(this.metronom.value%(2*this.metronom.beatCount))/2/this.metronom.beatCount),0),o.x),r.y,o.x/this.metronom.steps/this.metronom.beatCount,o.y),typeof t=="function"&&t(e,{position:r,dimension:o})}getPath(t,e){const r=this.metronom,o=new Path2D,p=new v(r.time).toSeconds();for(let m=0;m<this.noteTimes.length;m++){const u=this.noteTimes[Number(m)],i=2;for(let n=1;n<=(2/u[1]-1)*this.metronom.beatCount;n++)o.rect(t.x+Math.round(e.x*u[1]*n/2-i/2)/this.metronom.beatCount-i/2,t.y,i,38-2/u[1]);for(let n=0;n<=1/p*2*r.speed*this.metronom.beatCount;n++)o.rect(t.x+Math.round(e.x*p*n/r.speed/2-i/2)/this.metronom.beatCount-i/2,t.y,i,e.y)}return o}}const T={props:{model:{type:g,required:!0}},emits:["value","speed","render","ready"],async setup(){return{...await w()}},data(){return{metronomRenderer:null,dimension:d(0,0)}},computed:{isPlaying(){return this.model.state==="playing"}},watch:{"model.value"(s){this.$emit("value",s),this.render()},"model.time"(){this.render()},"model.speed"(){this.render()}},mounted(){this.metronomRenderer=new B(this.$refs.canvas,this.model),this.onRefresh(),this.$emit("ready",{render:()=>this.render()})},methods:{onRefresh(){const{width:s,height:t}=this.$refs.canvas.getBoundingClientRect();this.$refs.canvas.width=s,this.$refs.canvas.height=t,this.render()},render(){this.metronomRenderer.render((...s)=>{this.$emit("render",...s)})}}},D={class:"synthesizer-metronom"},P={class:"wrapper"},S={ref:"canvas"};function A(s,t,e,r,o,l){return _(),y("div",D,[c("div",P,[R(s.$slots,"background",C($({onRefresh:()=>l.onRefresh()})),()=>[t[0]||(t[0]=c("div",{class:"spacer"},null,-1))],!0),c("canvas",S,null,512)])])}const q=b(T,[["render",A],["__scopeId","data-v-3ea4984d"]]);export{q as M,g as a};
