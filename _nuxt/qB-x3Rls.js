import{r as T}from"./B3Wmi0DA.js";import{d as p,a as t,t as i,b as o,k as _,v as S,F as d,w as D,x as F,y as g,f as O,e as C}from"./ClLpnmyR.js";import{S as N}from"./B9nPFJJ2.js";import{K as l}from"./B4rpyJsK.js";import{O as P}from"./BkRx7U8b.js";const h=p(({core:a,model:e})=>{return[new t({order:0,title:"Document Editor",items:[new t({title:"New",hotKey:{alt:!0,code:l.KEY_N,title:"N"},action:E}),new t({title:"Open…",hotKey:{alt:!0,code:l.KEY_O,title:"O"},action:w}),new t({title:"Save",hotKey:{alt:!0,code:l.KEY_S,title:"S"},action:I}),new t({title:"Save As…",action:v}),new N,new t({hotKey:{alt:!0,code:l.KEY_I,title:"I"},title:"Info",action:()=>e.actions?.openInfo()}),new t({title:"Close",action:f})]}),new t({order:1,title:"Document Settings",items:[new t({title:"Open maximized",type:o.CHECKBOX,name:i.OPEN_MAXIMIZED,model:e.value}),new t({title:"Output Format",items:[new t({title:"Markdown",type:o.RADIO,name:i.OUTPUT_TYPE,value:"markdown",model:e.value}),new t({title:"HTML",type:o.RADIO,name:i.OUTPUT_TYPE,value:"html",model:e.value})]}),new t({title:"Font Family",items:Object.values(_).map(n=>{const s=d[n];return new t({title:S[n],items:Object.entries(s).map(([r,u])=>new t({title:r,type:o.RADIO,name:i.FONT_FAMILY,value:u,model:e.value}))})})}),new t({title:"Font Size",items:D(e.value)}),new t({title:"Line Height",items:F(e.value)}),new t({title:"Modular Scale",items:g(e.value)})]}),new t({order:2,title:"Preview",type:o.CHECKBOX,name:O.DOCUMENT_EDITOR_SHOW_PREVIEW,model:a.config.observable,action({value:n}){return a.config.set(O.DOCUMENT_EDITOR_SHOW_PREVIEW,n)}})];function f(){return e.actions?.close()}async function w(){const n=await a.executeCommand("openFileDialog");if(n)if("content"in n.value)e.fsItem=n.fsItem,e.value=Object.assign(e.value,C(),n.value);else throw new Error("Can't read file content")}function E(){e.actions?.reset()}function I(){return c()}function v(){return c(!0)}async function c(n=!1){const s=await T(JSON.stringify(e.value));let r;if(!n&&e.fsItem)return r=await a.executeCommand(`editfile "${e.fsItem.getPath()}" --data="${s}"`),r?a.executeCommand('openDialog "File saved."'):a.executeCommand('openDialog "File could not be saved."');{const u={html:"html",markdown:"md"}[String(e.value[i.OUTPUT_TYPE])],m=await a.executeCommand(`saveFileDialog --data="${s}" --extension="${u}"`);return m?(e.fsItem=P(m),e.fsItem):null}}});export{h as c};
